///////// Tools Tri3D //////////////////
///////// Version 2.0 //////////////////
//
//--- Tools Tri3D Written in Mel, the tool has many features to help you work faster ---//
//------//
//email : info.tri3d@gmail.com
// Copyright (c) 2023 Tri 3D Rigger.
//Last Modified 11/11/2023

////////////////////////////////////////////////////////////////
global proc trToolsTri3DRigger (){
	string $versionTri3DTools = 2.0;
    string $cInstallToolsTri3D = `trInstallToolsTri3D`;
    string $cCreateTools = "alias_tools";
    string $cTools_tt_name = "Tri 3D Tools " ;
    if (`window -exists $cCreateTools`) {
        deleteUI $cCreateTools;
    }
    window -title $cTools_tt_name -widthHeight 270 600 -sizeable true -menuBar true  $cCreateTools;




// menu //https://fakeupdate.net/win8/
string $khoahocrigging = "showHelp -a \"https://docs.google.com/document/d/1y65pZtAQbmDMrDfu6240hO__pPr8v_o70PwRqKEm4-c/edit\"";
string $gumroadUpdate = "showHelp -a \"https://phamtri.gumroad.com/l/hpouk?layout=profile\"" ;
string $fanpageFB = "showHelp -a \"https://www.facebook.com/profile.php?id=100087409486213\"" ;
string $huongdan = "showHelp -a \"https://www.youtube.com/watch?v=esc1lw27Dgw&list=PLLUiXehMlfsAw41PY1dSIRtbXc15vtW0s&index=3\"" ;
string $trollWeb = "showHelp -a \"https://fakeupdate.net/win8/\"" ;
string $huongdanCrashmMayangSkintools = "showHelp -a \"https://www.youtube.com/watch?v=iQIGEeUTO8k&t=19s\"" ;
// string $huongdanCrashmMayangSkintools = "showHelp -a \"https://www.youtube.com/watch?v=iQIGEeUTO8k&t=19s\"" ;
string $menuModify = `menu -l "Modify" -tearOff true`;
menuItem -l "Display" -divider true;
menuItem -i "kinJoint.png" -c "JdsWin;" "Joint Size View";
menuItem -l "Modify" -divider true;
menuItem -i "FreezeTransform.png" -c "FreezeTransformationsOptions;" "Freeze Transform Options";
string $menuJoint = `menu -l "Joint" -tearOff true`;
menuItem -i "kinMirrorJoint_S.png" -c "MirrorJointOptions;" "Mirror Joint";
menuItem -i "orientJoint.png" -c "OrientJointOptions;" "Orient Joint";
menuItem -divider true;
menuItem -i "kinHandle.png" -c "IKHandleTool;" "IK Handle Tool";
menuItem -i "kinSplineHandle.png" -c "IKSplineHandleToolOptions;" "IK Spline Handle Tool";
string $menuSkin = `menu -l "Skin" -tearOff true`;
menuItem -i "smoothSkin.png" -c "SmoothBindSkinOptions;" "Bind Skin";
menuItem -i "detachSkin.png" -c "AddInfluenceOptions;" "Influences";
menuItem -i "goToBindPose.png" -c "GoToBindPose;" "Go to bind pose";
string $menuConstrain = `menu -l "Constrain" -tearOff true`;
menuItem -i "parentConstraint.png" -c "ParentConstraintOptions;" "Parent Constraint";
menuItem -i "pointConstraint.svg" -c "PointConstraintOptions;" "Point Constraint";
menuItem -i "orientConstraint.png" -c "OrientConstraintOptions;" "Orient Constraint";
menuItem -i "scaleConstraint.png"  -c "ScaleConstraintOptions;" "Scale Constraint";
menuItem -i "aimConstraint.png"  -c "AimConstraintOptions;" "Aim Constraint";
menuItem -i "poleVectorConstraint.png"  -c "PoleVectorConstraintOptions;" "Pole Vector";
menuItem -divider true;
menuItem -c "Rivet;" "Rivet";
menuItem -optionBox true;
string $menuAbout = `menu -l "About" -tearOff true`;
menuItem -i ($cInstallToolsTri3D + "/Functions/Logo/4185714.png") -c $khoahocrigging "Khoa hoc Rigging";
menuItem -i ($cInstallToolsTri3D + "/Functions/Logo/LogoUdemy.jpg") -c $fanpageFB "Fanpage";
menuItem -i ($cInstallToolsTri3D + "/Functions/Logo/updateicon.png") -c $gumroadUpdate "Update Tools";
menuItem -i ($cInstallToolsTri3D + "/Functions/Logo/Trollface.png") -c $trollWeb "Troll";
string $cChangeButtonBuild1 = "button -edit -l Build -enable true buildMesh_button;button -edit -enable false buildJoint_button;";
string $cChangeButtonBuild2 = "textField -edit -editable true -pht S_Divisions  tf_S_Divisons_latice_Rig;";
string $cChangeButtonBuild3 = "textField -edit -editable true -pht T_Divisions tf_T_Divisons_latice_Rig;";
string $cChangeButtonBuild4 = "textField -edit -editable true -pht U_Divisions tf_U_Divisons_latice_Rig;";
string $cChangeButtonBuild5 = "button -edit -enable true buildJoint_button;";
string $cChangeButtonBuild6 = "button -edit -l CreateJ buildMesh_button;";
string $cChangeButtonBuild7 = "textField -edit -editable false -pht Nothing tf_S_Divisons_latice_Rig;";
string $cChangeButtonBuild8 = "textField -edit -editable false -pht Nothing tf_T_Divisons_latice_Rig;";
string $cChangeButtonBuild9 = "textField -edit -editable true -pht Number tf_U_Divisons_latice_Rig;";
string $cChangeButtonBuild = $cChangeButtonBuild1 + $cChangeButtonBuild2 + $cChangeButtonBuild3 + $cChangeButtonBuild4;
string $cChangeButtonCreate = $cChangeButtonBuild5 + $cChangeButtonBuild6 + $cChangeButtonBuild7 + $cChangeButtonBuild8 + $cChangeButtonBuild9;
string $cMainAllLayout = `tabLayout main_layout_all`;
string $cMainLayout = `scrollLayout -p $cMainAllLayout -w 260 Modify`;
    string $cColumn_modify = `columnLayout -p $cMainLayout -w 260 frame_function_modify`;
        string $cFl_functions = `frameLayout -p $cColumn_modify -l "Functions" -w 260 -cll true -cl true functions_frame_layout`;
        columnLayout -p $cFl_functions -w 260 rename_Layout;
        text -l "Obj must parent world space !!";
        string $cTextFieldFrontName = `textField -w 250 -h 30 -placeholderText "front_" frontName_textField`;
        button -l "Rename" -w 250 -c "renameFrontName";
        string $cTextFieldBackName = `textField -w 250 -h 30 -placeholderText "_back" backName_textField`;
        button -l "Rename" -w 250 -c "renameBackName";
        separator -p $cFl_functions -w 260;
        text -p $cFl_functions -l "Move Obj to Vertex :";
        rowColumnLayout -p $cFl_functions -nc 2 -w 260 move_obj_to_vertex;
            button -l "Select : " -w 100 -h 20 -c "button1_select_obj";
            string $cSaveTextMove = `textField -w 150 -tx "Please select Obj before !" -editable false save_name_obj_text_field`;
            button -l "Move" -w 100 -h 20 -c "button2_move_obj";
            string $cButtonMove = `textField -w 150 -tx "Please select vertex !" -editable false warning_action_move_obj`;
    string $cColumn_Rig = `columnLayout -p $cMainLayout -w 260 frame_function_Rig`;
        string $cFl_Rig_layout = `frameLayout -w 260 -mw 3 -l "Rig " -cll true Rig_functions_layout`;
            rowColumnLayout -p $cFl_Rig_layout -nc 7 controller_layout;                
                symbolButton -i "menuIconSelect.png" -c "select -hierarchy;" -w 35 -h 35;
                symbolButton -i "DeleteHistory.png" -c "delete -ch;" -w 35 -h 35;
                symbolButton -i "FreezeTransform.png" -c "makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1;" -w 35 -h 35;
                symbolButton -i ($cInstallToolsTri3D + "/Functions/Icons/unfreetransform.png") -w 35 -h 35;
                symbolButton -i "CenterPivot.png" -c "xform -cpc;" -w 35 -h 35;
                symbolButton -i "pivotReset.png" -c "performResetTransformations(0);" -w 35 -h 35;
                string $mastchtransform = `symbolButton -i "NEX_clickDragMoveSnap.png" -c "matchTransform;" -w 35 -h 35`;
				symbolButton -i "distanceBetween.svg" -c "distanceObjtoObj;" -w 35 -h 35;
				symbolButton -i "distanceBetween.svg" -c "autoRigWheel;" -w 35 -h 35;
				text -l "";text -l "";text -l "";text -l "";text -l "";text -l "";
                symbolButton -i "kinJoint.png" -c "setToolTo jointContext;" -w 35 -h 35;
                symbolButton -i "smoothSkin.png" -c "SmoothBindSkin;" -w 35 -h 35;
                symbolButton -i "detachSkin.png" -c "DetachSkin;" -w 35 -h 35;
                symbolButton -i "parentConstraint.png" -c "ParentConstraint;" -w 35 -h 35;
                symbolButton -i "orientConstraint.png" -c "OrientConstraint;" -w 35 -h 35;
                symbolButton -i "scaleConstraint.png" -c "ScaleConstraint;" -w 35 -h 35;
                symbolButton -i "copySkinWeight.png" -c "CopySkinWeights;" -w 35 -h 35;
                string $cValueScaleTextField = `textField -w 30 -tx "1" -pht "scale_value"  value_scale_text_field`;
                symbolButton -i ($cInstallToolsTri3D + "/Functions/Icons/addctrl.png") -w 35 -h 35 -c "ctrlIn";
                symbolButton -i ($cInstallToolsTri3D + "/Functions/Icons/add1ctrl.png") -w 35 -h 35 -c "ctrljnt";
                symbolButton -i ($cInstallToolsTri3D + "/Functions/Icons/add2ctrl.png") -w 35 -h 35 -c "ctrlSjnt";
                symbolButton -i ($cInstallToolsTri3D + "/Functions/Icons/add3ctrl.png") -w 35 -h 35 -c "geoToCtrl;";
                symbolButton -i ($cInstallToolsTri3D + "/Functions/Icons/jointadd.png") -w 35 -h 35 -c "addJntToCurve ";
                symbolButton -i ($cInstallToolsTri3D + "/Functions/Icons/jointaddpivot.png") -w 35 -h 35 -c "addJntToWS";
                symbolButton -i ($cInstallToolsTri3D + "/Functions/Icons/jointbind.png") -w 35 -h 35 -c "addJntBindToWS";
					string $popupButtonMatchtransformation = `popupMenu -b 3  -p $mastchtransform popupMatchTransform`;
					string $popupMatchtransformT = `menuItem -l "Translate" -c "matchTransform -pos" -p $popupButtonMatchtransformation`;
					string $popupMatchtransformR = `menuItem -l "Rotate" -c "matchTransform -rot" -p $popupButtonMatchtransformation`;
					string $popupMatchtransformS = `menuItem -l "Scale" -c "matchTransform -scl" -p $popupButtonMatchtransformation`;
            separator -p $cFl_Rig_layout -w 260;
            rowColumnLayout -p $cFl_Rig_layout -nc 7 connect_constraint;
                checkBox -label "Translate" -value 1 Translate_checkBox;
                text -l "";
                text -l "";
                checkBox -label "Rotate" -value 1 Rotate_checkBox;
                text -l "";
                text -l "";
                checkBox -label "Scale" -value 0 Scale_checkBox;
            rowColumnLayout -p $cFl_Rig_layout -nc 5 button_connect_constraint;
                button -l "Parent C" -w 75 -c constraintCheckbox;
                text -l "";
                button -l "Connections" -w 75 -c connectiontCheckbox;
                text -l "";
                button -l "Atools" -w 75 -c "importAtools";
                button -l "Group" -w 75 -h 20 -c "groupAndFreezePivot";
                text -l "" -w 10 -h 20;
                button -l "Influences" -w 75 -h 20 -c "AddInfluenceOptions;";
                text -l "" -w 10 -h 20;
                button -l "Delete Cons" -w 75 -h 20 -c "deleteUnusedConstraints";
            string $cCustomeCurve = `frameLayout -p $cFl_Rig_layout -l " Custome Curve" -w 260 -cll true -cl false curtome_curve_layout`;
                rowColumnLayout -p $cCustomeCurve -nc 5 -w 260 color_override_index;
                    button -l "Return" -w 50 -bgc 1 1 1 -c reFillColorCurve;
                    canvas -w 50 -rgb 1 0 0 -pc redColorCurve;
                    canvas -w 50 -rgb 1 1 0 -pc yellowColorCurve;
                    canvas -w 50 -rgb 1 0.250 0.078 -pc orangeColorCurve;
                    canvas -w 50 -rgb 1 0.506 0.766 -pc pinkColorCurve;
                    canvas -w 50 -rgb 0 1 0 -pc greenColorCurve;
                    canvas -w 50 -rgb 1 1 1 -pc whiteColorCurve; 
                    canvas -w 50 -rgb 1 0 1 -pc purpleColorCurve;
                    canvas -w 50 -rgb 0 1 1 -pc blueColorCurve;
                    canvas -w 50 -rgb 0 0 1-pc blueBlackColorCurve;
            string $sFrameCustomeCurve = `frameLayout -p $cCustomeCurve -l "Custome Curve" -w 260 -cll true -cl false custome_curve_layout`;
                // radioButtonGrp -labelArray3 "" "" "" -hlc 1 0 0 -numberOfRadioButtons 3 -select 1 radioButton_curve;
                rowColumnLayout -p $sFrameCustomeCurve -nc 5 layout_collection_layout;
                string $bRadioCollection =` radioCollection rdb_curve_custome` ;
                    string $bNormalRDB = `radioButton -label "Normal" -sl -hlc 1 0 0 -onCommand "textField -edit -enable false value_scale_customeCurve" rb_normal`;
                    string $bValueRDB = `radioButton -label "Value" -hlc 1 1 0 -onCommand "textField -edit -enable true value_scale_customeCurve" rb_value`;
                    string $tfValueCurveScale = `textField -tx "1" -w 25 value_scale_customeCurve`;
                    textField -edit -enable false value_scale_customeCurve;
                    string $bGroupRDB = `radioButton -label "Group" -hlc 1 0 1 -onCommand "textField -edit -enable true value_scale_customeCurve" rb_group`;
                    string $bGroupAndJnt = `radioButton -label "Joint" -hlc 0 1 0 -onCommand "textField -edit -enable true value_scale_customeCurve" rb_joint`;
            columnLayout -p $sFrameCustomeCurve -w 260 assist_curve;
            text -l "Must selected object before create controller :)";
            rowColumnLayout -nc 6 -w 260 controller_template;
                symbolButton -i ($cInstallToolsTri3D + "/Functions/Icons/ccButton02.png") -w 40 -h 40 -c cCubeCur;
                symbolButton -i ($cInstallToolsTri3D + "/Functions/Icons/ccButton08.png") -w 40 -h 40 -c cCircleCur;
                symbolButton -i ($cInstallToolsTri3D + "/Functions/Icons/ccButton48.png") -w 40 -h 40 -c cCicleCurHafl;
                symbolButton -i ($cInstallToolsTri3D + "/Functions/Icons/ccButton11.png") -w 40 -h 40 -c cHandCur;
                symbolButton -i ($cInstallToolsTri3D + "/Functions/Icons/ccButton12.png") -w 40 -h 40 -c cLegCur;
                symbolButton -i ($cInstallToolsTri3D + "/Functions/Icons/ccButton03.png") -w 40 -h 40 -c cTarget;
                symbolButton -i ($cInstallToolsTri3D + "/Functions/Icons/ccButton09.png") -w 40 -h 40 -c cLocator;
                symbolButton -i ($cInstallToolsTri3D + "/Functions/Icons/ccButton10.png") -w 40 -h 40 -c cCicleD;
                symbolButton -i ($cInstallToolsTri3D + "/Functions/Icons/ccButton19.png") -w 40 -h 40 -c cTargetCircle;
                symbolButton -i ($cInstallToolsTri3D + "/Functions/Icons/ccButton17.png") -w 40 -h 40 -c Plus;
                symbolButton -i ($cInstallToolsTri3D + "/Functions/Icons/ccButton23.png") -w 40 -h 40 -c cCirclePlus;
                symbolButton -i ($cInstallToolsTri3D + "/Functions/Icons/ccButton27.png") -w 40 -h 40 -c cRotate;
                // symbolButton -i ($cInstallToolsTri3D + "/Functions/Icons/ccButton28.png") -w 40 -h 40 ;
                symbolButton -i ($cInstallToolsTri3D + "/Functions/Icons/ccButton29.png") -w 40 -h 40 -c cArrow;
                symbolButton -i ($cInstallToolsTri3D + "/Functions/Icons/ccButton32.png") -w 40 -h 40 -c cColorRange;
                symbolButton -i ($cInstallToolsTri3D + "/Functions/Icons/ccButton35.png") -w 40 -h 40 -c cDirections;
                symbolButton -i ($cInstallToolsTri3D + "/Functions/Icons/ccButton38.png") -w 40 -h 40 -c cBody;
                symbolButton -i ($cInstallToolsTri3D + "/Functions/Icons/ccButton40.png") -w 40 -h 40 -c cLockCircle;
                symbolButton -i ($cInstallToolsTri3D + "/Functions/Icons/ccButton43.png") -w 40 -h 40 -c cLockSquare;
                symbolButton -i ($cInstallToolsTri3D + "/Functions/Icons/ccSquare.png") -w 40 -h 40 -c cSquare;
                symbolButton -i ($cInstallToolsTri3D + "/Functions/Icons/ccSlider.png") -w 40 -h 40 ;
                symbolButton -i ($cInstallToolsTri3D + "/Functions/Icons/ccFace.png") -w 40 -h 40 -c cFaceCtrl;
                symbolButton -i ($cInstallToolsTri3D + "/Functions/Icons/ccButton46.png") -w 40 -h 40 ;
                symbolButton -i ($cInstallToolsTri3D + "/Functions/Icons/ccButton47.png") -w 40 -h 40 ;
                symbolButton -i ($cInstallToolsTri3D + "/Functions/Icons/ccButton36.png") -w 40 -h 40 -c "dizzyCtrl";
            rowColumnLayout -p $sFrameCustomeCurve -w 260 -nc 6 curveFunctions;
                button -l "Parent Curve" -w 80 -c "combineCurve";
                text -l "";
                button -l "Curve ADV6" -w 80 -c "ControllerGalleryImport";
                text -l "";
                button -l "Curve Arc" -w 75 -c "CreateCurveArc;";
// model and shading cartoon
	// string $cMeS = `scrollLayout -p $cMainAllLayout "Model"`;
	// 	rowColumnLayout -nc 5 -p $cMeS ShadingVray_RL;
	// 		checkBox -l "Normal" -value 0 NormalShadingVray_RL;
	// 		text -l "" -w 10;
	// 		checkBox -l "Opacity Map" -value 0 TransmisShadingVray_RL;
	// 		text -l "" -w 10;
	// 		// checkBox -l "Assign" -value 1 AssignShadingVray_RL;
	// 		button-l "Vray" -w 70 -h 30 -c "ShadingVraymtl;";






string $cAutoRig = `scrollLayout -p $cMainAllLayout "Rigging"`;
		string $cLaticeRig = ` frameLayout -p $cAutoRig -l "Deform" -w 265 -mw 3 -cll true -cl true deform_Rig`;
				rowColumnLayout -p $cLaticeRig -nc 3 -w 260 laticeRig_text;
				text -l "<font color=\"yellow\">Nonlinear Rig : </font>" ;
				separator -w 140;
				button -l "?" -w 20 -h 20;
				rowColumnLayout -p $cLaticeRig -nc 3 latice_Rig;
					string $tfSelectMeshLatice = `textField -w 155 -pht "Select mesh or enter name" -editable true tf_selectMesh_laticeRig`;	
					text -l "";
					button -l "Select" -en true -w 80 -c "selectObjLaticeRig";
					string $bRadioCollectionLatice =`radioCollection rdb_latice_rig`;
						string $bMeshLatice =`radioButton -l "Deform"  -sl -hlc  0 1 0 -w 155 -onCommand $cChangeButtonBuild rb_mesh_laticeRig`;
						text -l "";
						string $bVertexLatice =`radioButton -l "Joint" -enable true -hlc 1 1 0 -w 80 -onCommand $cChangeButtonCreate rb_vertex_laticeRig`;
					rowColumnLayout -p $cLaticeRig -nc 5 latice_biuld_Rig;
					string $tfSdivisionsLaticeRig = `textField -w 80 -tx "" -pht "S_Divisions" tf_S_Divisons_latice_Rig`;
					text -l "";
					string $tfTdivisionsLaticeRig = `textField -w 80 -tx "" -pht "T_Divisions" tf_T_Divisons_latice_Rig`;
					text -l "";
					string $tfUdivisionsLaticeRig = `textField -w 80 -tx "" -pht "U_Divisions" tf_U_Divisons_latice_Rig`;
					button -l "Create Locator" -w 80 -c "createLocLaticeDistanceRig";
					text -l "";
					// button -l "Done Settup" -w 80 ;
					button -l "Build" -w 80  -c "BuildLaticeDistanceRig" buildMesh_button;
					// text -l "";
					// button -l "Delete" -w 80;
					// text -l "";text -l "";text -l "";text -l "";
					text -l "";
					button -l "Build" -w 80 -enable false  -c "cComfirmDialog" buildJoint_button;

	string $mainLayout = `columnLayout -p $cAutoRig -w 250 mainLayout`;
    // swt 
        string $cSetDrivenKey = `frameLayout -p $mainLayout -l "Connect freame extenssion" -w 260 -cll true -cl false set_driven_key_layout`;
        rowColumnLayout -p $cSetDrivenKey -nc 9 -w 250 data_type_set_driven_key;
            text -l "Type :" -w 50 -h 25;
            string $typeAttrField =  `textField -tx "long" -w 40 typeAttrField`;
            text -l "" -w 3;
            text -l "Min : " -w 35;
            string $minAttrField = `textField -tx "1" -w 36 min_value_attribute`;
            text -l "" -w 3;
            text -l "Max : " -w 35;
            string $maxAttrField = `textField -tx "20" -w 36 max_value_attribute`;
        rowColumnLayout -nc 2 -w 260 -p $cSetDrivenKey info_set_driven_key;
            button -l "Name :"  -w 50 -h 25 -c "addAttrNameSDK";
            string $name_attr_ex = `textField -pht "name_attribute" -tx "Color" -w 200 name_attr_set_driven_key`;
            text -l "Texture :"  -w 50 -h 25 ;
            string $name_text_ex = `textField -pht "name_text" -w 200 name_text_set_driven_key`;
        button -p $cSetDrivenKey -l "Add Attribute" -w 250 -c ConnectFrameEx;

    // create node auto #
        string $autoCreateNodeL = `frameLayout -p $mainLayout -l "Auto Connect" -w 260 -cll true -cl true autoCreateNodeL_layout`;
        rowColumnLayout -nc 2 -p $autoCreateNodeL -w 250 rowColumnLayoutAutoConnect;
            string $rdAutoCreateNode = `radioCollection rdAutoCreateNode`;
                string $rdMenuNode =`radioButton -l "Menu"  -sl -hlc  0 1 0 -w 110 -onCommand "textField -edit -editable false tfNameNode;optionMenu -edit -enable true mnNameNode;" rdMenuNode`;
                string $rdTextFieldNode =`radioButton -l "Text" -hlc  1 1 0 -w 120 -onCommand "optionMenu -edit -enable false mnNameNode;textField -edit -editable true tfNameNode;" rdTextFieldNode`;
            string $mnNameNode = `optionMenu -enable true -l "" -w 100 mnNameNode`;
                menuItem -l "floatMath";
                menuItem -l "multiplyDivide";
                menuItem -l "blendColors";
                menuItem -l "reverse";
                menuItem -l "condition";
            string $tfNameNode =`textField -editable false -pht "enter name" -w 140 tfNameNode`;
            string $clColumnCreateNode = `columnLayout -w 250 -p $autoCreateNodeL autoCreateNodeL_CL`;
            button -p $clColumnCreateNode -l "Create Node" -w 250 -c "autoCreateNode;" ;
        // connect auto #
            text -l "<font color=\"yellow\">-------------------------------------------------</font>" -w 250 -p $clColumnCreateNode ;
            rowColumnLayout -nc 2 -p $clColumnCreateNode nbSpaceAutoConnectAttr_la;
            text -l "Output : " -w 50;
            string $nameAttrOutput = `textField -pht "enter name output" -w 200 nameAttrOutput`;
            text -l "Input : " -w 50;
            string $nameAttrInput = `textField -pht "enter name output" -w 200 nameAttrInput`;
            string $nbSpaceAutoConnectAttr = `textField -p nbSpaceAutoConnectAttr_la -tx "1" -pht "space" -w 50 nbSpaceAutoConnectAttr`;
            button -l "Auto Connect" -w 200 -c "autoConnectAttr;";

		frameLayout -p $cAutoRig -l "Functions Rig" -w 265 -mw 3 -cll true functions_auto_rig;
			columnLayout -p functions_auto_rig -w 265 giudeOder;
			// transform edit
				text -l "<font color=\"white\">--- Transform Edit ---</font>" -w 250 -p giudeOder;
				text -p giudeOder -l "0-xyz , 1-yzx , 2-zxy , 3-xzy , 4-yxz , 5-zyx ";
				rowColumnLayout -p giudeOder -w 265 -nc 6 functionsRig;
					button -l "Rotate Oder" -w 70 -c "rotationOrder";
					separator -w 5;
					string $rotateOderValueTextField = `textField -w 25 -tx "4" rotate_oder_value_textField`;
					separator -w 10;
					text -l "Joint Label :";
					optionMenu -l "" -w 70;
						menuItem -l "   Head";
						menuItem -l "   Neck";
						menuItem -l "   Chest";
						menuItem -l "   Spine";
			// functions rig
				text -l "" -p giudeOder;
				text -l "<font color=\"white\"> ---------------- Functions Rig ------------------ <font>" -w 250 -p giudeOder;
				rowColumnLayout -p giudeOder -w 265 -nc 7 functionsButton_rig;
					button -l "Set default" -c "CreateQuickSelectSet;";
					text -l "";
					button -l "Anotations" -c "CreateAnnotateNode;";
					text -l "";
					button -l "Sample" -c "triFitResample;";
					text -l "";
					button -l "Check" -c "triModelCheckerUI;";
					text -l "";text -l "";text -l "";text -l "";text -l "";text -l "";text -l "";
					button -l "DtMush" -c "triHardenWeights;";
					text -l "";
					button -l "Ref Geo" -c "refGeoTest";
					text -l "";
					button -l "ADV 6 set" -c "ADV6SettupFull;";		
					text -l "";
					button -l "Ribon" -c "ADV6SettupFull;";									
					text -l "";text -l "";text -l "";text -l "";text -l "";text -l "";text -l "";
					button -l "Auto Vis" -c "SDKVisAuto;";									
			// build FK rig
				text -l "" -p giudeOder;
				text -l "<font color=\"white\"> -------------- FK Inbetween Rig ---------------- <font>" -w 250 -p giudeOder;
				string $tfnJnt = `textField -editable false -w 250 -p giudeOder tfnbJont`;
				rowColumnLayout -p giudeOder -w 265 -nc 5 buildFK_rig;
					string $nbIbwJoint = `textField -tx "0"  -w 40 -cc "buttonAddInbetWeenNotThing;"  tf_nbIbwJoint`;
					text -l "";
					string $buttonAddInbetWeen = `button -enable false -l "Add Indetween Joint" -w 135 -c "addInbetweenAttribute;" buttonAddInbetWeen`;
					text -l "";
					button -l "Build" -w 50 -c "buildFKinbetween;";
			// Create rig curve follow
				text -l "" -p giudeOder;
				text -l "<font color=\"white\"> ----------------- Curve Path Rig ----------------- <font>" -w 260 -p giudeOder;
				rowColumnLayout -nc 5 -w 260 -p giudeOder createPathRig;
				radioCollection rigPath;
					string $rpAuto =`radioButton -l "Auto" -hlc  1 1 0 -w 65 -onCommand "textField -edit -editable true nbCtrlCreatePathRig;textField -edit -editable true disCtrlCreatePathRig;" rpAuto`;
					text -l "" -w 5;
					string $nbCtrlCreatePathRig = `textField -editable false -tx "" -pht "4" -w 70 nbCtrlCreatePathRig`;
					text -l "";
					string $disCtrlCreatePathRig = `textField -editable false -tx "" -pht "Number" -w 70 disCtrlCreatePathRig`;
					string $rpCreate =`radioButton -l "Settup"  -sl -hlc  0 1 0 -w 65 -onCommand "textField -edit -editable false nbCtrlCreatePathRig;textField -edit -editable false disCtrlCreatePathRig;" rpCreate`;
					symbolButton -i "kinJoint.png" -w 30 -h 30 -c "setToolTo jointContext;" ;
					button -l "Build"  -c "creatPathRigTri3D;" ;
					text -l "";
					button -l "Bake"  -c "bakeOirentcreatPathRigTri3D;" buttonBakeAnimDelete;
					string $bakePathButtonpopup = `popupMenu -b 3  -p buttonBakeAnimDelete bakePathButtonpopup`;
					string $bakePathButton = `menuItem -l "Delete Bake" -c "deletaBakePath;" -p $bakePathButtonpopup`;
		// build Fit
			frameLayout -p functions_auto_rig -l "Fit" -w 260 -cll true -cl true -cc asFL -ec asFL fit_auto_rig_layout;
			rowColumnLayout -nc 8 autoRig_layout;
				string $cMenuSkeleton = `optionMenu -l "" -w 60 option_skeleton`;
					string $mnHumanSkeleton = `menuItem -l "Human" -p $cMenuSkeleton mnHumanSkeleton`;
					string $mnCatSkeleton = `menuItem -l "Cat" -p $cMenuSkeleton mnCatSkeleton`;
				text -l "";
				string $buttonImportJoint = `button -l "Import Joint" -w 80 -c "choseSkeletonRig" buttonJointImport`;
				// string $importBipedField = `textField -w 120 -editable false -tx "Import Biped" importBipedField`;
				text -l "";
				string $importCheckBox = `checkBox -l "" -value 0 -w 20 -editable false  importCheckBox`;
				string $deleteCheckBox = `button -l "Del" -w 30 -enable false -c "deleteImportJoint"  deleteCheckBox`;
				text -l "" -w 5;
				button -l "?" -w 20;
				string $donsettupRigField = `textField -w 80 -editable false -tx "Settup" doneSettupField`;
				text -l "";
				button -l "Done Settup" -w 80 -c "doneSettupSkeleton";
				text -l "";
				string $doneSettupCheckBox = `checkBox -l "" -value 0 -w 20 -editable false doneSettupCheckBox`;
				text -l "";
				text -l "" -w 5;
				button -l "?" -w 20;
				columnLayout -p fit_auto_rig_layout -w 250 button_layout_build;
				string $nameAutoRig = `textField -w 230 -pht "enter_name_rig" -tx "Tri3D_auto_rig" name_autorig`;
				button -l "Build" -w 230 -c "buildHuman";
				string $progressBarRig = `progressBar -maxValue 100 -w 230 progressBarRig`;

		string $cAboutLayout = `scrollLayout -p $cMainAllLayout About`;
			string $versionTools = `textField -p $cAboutLayout -tx $versionTri3DTools -editable false -w 250 info_frame_layout`;
			rowColumnLayout -w 265 -nc 5 info_tri3d_layout;
				symbolButton -i ($cInstallToolsTri3D + "/Functions/Logo/gumroad.png") -w 70 -h 70;text -l "" -w 20;
				symbolButton -i ($cInstallToolsTri3D + "/Functions/Logo/LogoUdemy.jpg") -w 70 -h 70;text -l "" -w 20;
				symbolButton -i ($cInstallToolsTri3D + "/Functions/Logo/updateicon.png") -w 70 -h 70;

				rowColumnLayout -p $cAboutLayout -nc 1 -w 265 text_assist_about;text -l "";
					text -l "Click to Update , check usually bro !!";
					button -l "Check Update Tools" -w 265 -h 40 -c $gumroadUpdate;
					button -l "Huong dan dung tools" -w 265 -h 40 -c $huongdan;
					button -l "Khoa hoc rigging " -w 265 -h 40 -c $khoahocrigging;
					text -l ""; 
					
				frameLayout -p $cAboutLayout -l "Huong dan va fix loi maya" -w 260 -cll true -cl false fixAndGuide_layout;
					rowColumnLayout -nc 1 -w 260 layout_fix_giude;
						button -l "Crash maya khi open ngskinToools or Library" -w 250 -c $huongdanCrashmMayangSkintools;
						button -l "Diet virus Maya" -w 250 -c "cComfirmDialog";
						button -l "Huong dan co ban va phim tat Maya" -w 250 -c "cComfirmDialog";
						columnLayout -p $cAboutLayout;
						text -l "";
						button -l "Donate " -w 265 -h 40 -c "bMe";
						text -l "" ;
						image -i ($cInstallToolsTri3D + "/Functions/Logo/vn.png");

				showWindow $cCreateTools;



// check auto rig //
	if (`objExists "SetJoint"`){
		string $importCheckBox = `checkBox -edit -value 1 importCheckBox`;
		button -edit -enable false buttonJointImport;
		button -edit -enable true  deleteCheckBox;
		frameLayout -edit -cl false -cc asFL -ec asFL fit_auto_rig_layout;
	}
	
}
// adv6 auto rig
	global proc ADV6SettupFull(){
		if(`objExists "ctrlBox"`){
			string $SDKIris[] = {"SDKIris_R_scaleX","SDKIris_R_scaleY","SDKIris_R_scaleZ","SDKIris_R_translateZ"
							,"SDKIris_L_scaleX","SDKIris_L_scaleY","SDKIris_L_scaleZ","SDKIris_L_translateZ"};
				if(`objExists "SDKIris_R_scaleX"`){for($obj in $SDKIris){
					keyframe -index 0 -absolute -valueChange 0.1 $obj ;
				}}
			string $faceBox[] = {"visibility","limits","ACtrlVis","BCtrlVis","CCtrlVis","EyeCtrlVis","AimCtrlVis"
									,"TeethCtrlVis","TongueCtrlVis","RegionsCtrlVis","UpMidLoCtrlVis","SquashCtrlVis","CustomCtrlVis"};
				for($obj in $faceBox){
					setAttr ("ctrlBox." + $obj) 1;
					setAttr -lock true -keyable false -channelBox false ("ctrlBox." + $obj);
				}
			addAttr -ln "blinkCenter" -proxy "upperLid_L.blinkCenter" ctrlEye_L;
			addAttr -ln "blinkCenter" -proxy "upperLid_R.blinkCenter" ctrlEye_R;
			if(`objExists "MainExtra1"`){
				rename "Main" "MainExtra1";
				rename "MainSystem|MainExtra1" "Main";
				setAttr "MainExtra1.jointVis" 0;	
			}
		}
		else{
			warning "Please build face before !!";
		}
	}
	
global proc bMe (){string $cInstallToolsTri3D = `trInstallToolsTri3D`;string $bMe = "donateMe";
	if (`window -exists $bMe`){
		deleteUI $bMe;}
		window -title "Donate for Tri 3D" -widthHeight 267 600 -sizeable false $bMe;
		columnLayout -adj true -w 267 -h 440 donateMe;
		text -l "Cam on cac ban da su dung tools Tri 3D cua minh\nthat vui vi no giup ich duoc cho cong viec cua \n moi nguoi. Tools cua minh van se duoc update, \nphat trien thuong xuyen de ra nhieu tinh nang \nhuu ich hon. \n \n Neu thay huu ich thi donate cho minh de\n minh co them dong luc phat trien tools nay, hehe.\n\n STK : 19034928042017 Techcombank\n\n Ma QR ngan hang :";
		image -i ($cInstallToolsTri3D + "/Functions/Logo/donate.jpg");
		showWindow $bMe;select -cl;text -l "Cam on cac ban rat nhieu !!";
		}

global proc cComfirmDialog (){
	confirmDialog -message "comming soon !";
	}
global proc trInstallToolsLocator (){}
global proc string trInstallToolsTri3D (){
	string $whatIs=`whatIs trInstallToolsLocator`;
	string $fullPath=`substring $whatIs 25 999`;
	string $buffer[];
	string $slash="/";
	if (`gmatch $whatIs "*\\\\*"`)$slash="\\";
		int $numTok=`tokenize $fullPath $slash $buffer`;
		int $numLetters=size($fullPath);
		int $numLettersLastFolder=size($buffer[$numTok-1]);
		string $scriptLocation=`substring $fullPath 1 ($numLetters-$numLettersLastFolder)`;
		return $scriptLocation;
}
global proc asFL (){
	string $framLayouts[]=`lsUI -type frameLayout`;
	for ($i=0;$i<size($framLayouts);$i++)
	if (`gmatch $framLayouts[$i] "as*FrameLayout"`)optionVar -iv $framLayouts[$i] `frameLayout -q -cl $framLayouts[$i]`;
}
global proc renameFrontName() {
	global string $cTextFieldFrontName;
	string $frontTextField = `textField -query -text frontName_textField`;
	string $objects[] = `ls -selection`;
	for ($i in $objects) {
		string $newNameF = ($frontTextField + $i);rename $i $newNameF;
	}
}
global proc renameBackName() {
	global string $cTextFieldBackName;
	string $backTextField = `textField -query -text backName_textField`;
	string $objects[] = `ls -selection`;
	for ($i in $objects) {string $newNameF = ($i + $backTextField);rename $i $newNameF;
	}
}
global proc deleteUnusedConstraints(){
	string $selectedObjects[] = `ls -sl`;
	for ($obj in $selectedObjects) {string $constraints[] = `listConnections -type "constraint" $obj`;
	if (size($constraints) > 0) {
		for ($constraint in $constraints) {
			if (`objExists $constraint`) {
				delete $constraint;
				}
			}
		}
	}
}
global proc groupAndFreezePivot() {
	string $selectedObjects[] = `ls -selection`;
	if (size($selectedObjects) == 0) {
	confirmDialog -title "Error" -message "Select Obj." -button "OK";
	} 
	else {
		string $groupName;for ($obj in $selectedObjects) {
		$groupName = $obj + "_grp";
		string $group = `group -n $groupName $obj`;
		float $cPivotPosition[] = `xform -q -rp -ws $selectedObjects`;
		select $group;
	xform -ws -rp ($cPivotPosition[0]) ($cPivotPosition[1]) ($cPivotPosition[2]) $groupName;
		}
	}
}
global proc runButtonAction() {
	int $selectedRadioButton = `radioButtonGrp -q -select radioButton_curve`;
	if ($selectedRadioButton == 1) {
		radioButton1Action();
	} 
	else {
		radioButton2Action();
	}
}

global proc importAtools(){
	python("from aTools.animTools.animBar import animBarUI;animBarUI.show()");
}

///////// ####################### 
///////// ####################### 
///////// ####################### 
///////// ####################### 

global proc ShadingVraymtl(){
	int $NormalShadingVray_RL = `checkBox -query -value NormalShadingVray_RL`; 
	int $TransmisShadingVray_RL = `checkBox -query -value TransmisShadingVray_RL`;
	// int $AssignShadingVray_RL = `checkBox -query -value AssignShadingVray_RL`;
	// checkbox vray mtl //
	string $select[] = `ls -sl`;

		string $VRayMtl = `shadingNode -n ($select[0] + "_mtl")  -asShader VRayMtl`;
		shadingNode -n ($select[0] + "_text")  -asTexture -isColorManaged file;
			setAttr ($select[0] + "_text" + ".ignoreColorSpaceFileRules") 1;
		shadingNode -n ($select[0] + "_PL")  -asUtility place2dTexture;

		connectAttr ($select[0] + "_PL" + ".coverage") ($select[0] + "_text" + ".coverage");
		connectAttr ($select[0] + "_text" + ".outColor") ($select[0] + "_mtl" + ".diffuseColor");

		sets -renderable true -noSurfaceShader true -empty -name ($select[0] + "_mtl" + "SG");
		defaultNavigation -connectToExisting -source ($select[0] + "_mtl") -destination ($select[0] + "_mtl" + "SG");
		if ($NormalShadingVray_RL == 1){
			shadingNode -n ($select[0] + "_Normal_text")  -asTexture -isColorManaged file;
			shadingNode -n ($select[0] + "_Normal_PL")  -asUtility place2dTexture;

			connectAttr ($select[0] + "_Normal_PL" + ".coverage") ($select[0] + "_Normal_text" + ".coverage");
			connectAttr ($select[0] + "_Normal_text" + ".outColor")($VRayMtl + ".bumpMap");
		}
			if ($TransmisShadingVray_RL == 1){
			shadingNode -n ($select[0] + "_Opa_text")  -asTexture -isColorManaged file;
			shadingNode -n ($select[0] + "_Opa_PL")  -asUtility place2dTexture;

			connectAttr ($select[0] + "_Opa_PL" + ".coverage") ($select[0] + "_Opa_text" + ".coverage");
			connectAttr ($select[0] + "_Opa_text" + ".outColor")($VRayMtl + ".opacityMap");
		}	



}


///////// ####################### 
///////// ####################### 
///////// ####################### 
///////// ####################### 

global proc dizzyCtrl(){
	global string $tfValueCurveScale;
	global string $bNormalRDB;global string $bValueRDB;
	global string $bGroupRDB;global string $tfValueCurveScale;
	global string $bGroupAndJnt;
	string $cSelectNormal = `radioButton -q -select rb_normal`;
	string $cValueRDB = `radioButton -q -select rb_value`;
	string $cSelectGroupRDB = `radioButton -q -select rb_group`;
	string $cSelectGroupAndJnt = `radioButton -q -select rb_joint`;
	float $scale_value = `textField -q -tx value_scale_customeCurve`;
	string $select[] = `ls -sl`;
	if($cSelectNormal){
		string $cDizzyCtrl = `curve -n "dizzy_Ctrl" -d 3 -p 0.04 0 0.17 -p -0.29 0 0.82 -p 0.45 0 1.57 -p 1.95 0 0.31 -p 0.06 0 -1.38 -p -1.46 0 -0.08 -p -1.45 0 1.28 -p -0.34 0 2.5 -p 2.38 0 1.95 -p 2.44 0 -1.1 -p -0.02 0 -2.31 -p -2.2 0 -1.28 -p -2.73 0 2.41 -p 1.11 0 4.07 -p 4.54 0 0.54 -p 1.18 0 -4.18 -p -3.84 0 -1.84 -p -3.64 0 3.18 -p 0.13 0 4.74 -p 2.12 0 3.98 -p 3.16 0 3.16 `;
	}
	for($obj in $select){
		string $nameCtrl = $obj + "_Ctrl";
		float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
		if($cValueRDB){
			string $cDizzyCtrl = `curve -n $nameCtrl -d 3 -p 0.04 0 0.17 -p -0.29 0 0.82 -p 0.45 0 1.57 -p 1.95 0 0.31 -p 0.06 0 -1.38 -p -1.46 0 -0.08 -p -1.45 0 1.28 -p -0.34 0 2.5 -p 2.38 0 1.95 -p 2.44 0 -1.1 -p -0.02 0 -2.31 -p -2.2 0 -1.28 -p -2.73 0 2.41 -p 1.11 0 4.07 -p 4.54 0 0.54 -p 1.18 0 -4.18 -p -3.84 0 -1.84 -p -3.64 0 3.18 -p 0.13 0 4.74 -p 2.12 0 3.98 -p 3.16 0 3.16 `;
			xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $cDizzyCtrl;
			scale $scale_value $scale_value $scale_value $cDizzyCtrl;
			makeIdentity -apply true -s 1 -n 0 -pn 1 $cDizzyCtrl;refresh;
		}
		if($cSelectGroupRDB){
			string $nameGroup = $obj + "_grp";
			string $group = `group -n $nameGroup -empty`;
			string $cDizzyCtrl = `curve -n $nameCtrl -d 3 -p 0.04 0 0.17 -p -0.29 0 0.82 -p 0.45 0 1.57 -p 1.95 0 0.31 -p 0.06 0 -1.38 -p -1.46 0 -0.08 -p -1.45 0 1.28 -p -0.34 0 2.5 -p 2.38 0 1.95 -p 2.44 0 -1.1 -p -0.02 0 -2.31 -p -2.2 0 -1.28 -p -2.73 0 2.41 -p 1.11 0 4.07 -p 4.54 0 0.54 -p 1.18 0 -4.18 -p -3.84 0 -1.84 -p -3.64 0 3.18 -p 0.13 0 4.74 -p 2.12 0 3.98 -p 3.16 0 3.16 `;
			parent $cDizzyCtrl $group;
			scale $scale_value $scale_value $scale_value $group;
			makeIdentity -apply true -s 1 -n 0 -pn 1 $group;
			matchTransform -pos -rot $group $obj;refresh;
		}
		if($cSelectGroupAndJnt){
			string $nameGroup = $obj + "_grp";
			string $group = `group -n $nameGroup -empty`;
			string $cDizzyCtrl = `curve -n $nameCtrl -d 3 -p 0.04 0 0.17 -p -0.29 0 0.82 -p 0.45 0 1.57 -p 1.95 0 0.31 -p 0.06 0 -1.38 -p -1.46 0 -0.08 -p -1.45 0 1.28 -p -0.34 0 2.5 -p 2.38 0 1.95 -p 2.44 0 -1.1 -p -0.02 0 -2.31 -p -2.2 0 -1.28 -p -2.73 0 2.41 -p 1.11 0 4.07 -p 4.54 0 0.54 -p 1.18 0 -4.18 -p -3.84 0 -1.84 -p -3.64 0 3.18 -p 0.13 0 4.74 -p 2.12 0 3.98 -p 3.16 0 3.16 `;
			string $joint = `joint -n ($obj + "_jnt")`;
			// parent $joint $cDizzyCtrl;
			parent $cDizzyCtrl $group;
			scale $scale_value $scale_value $scale_value $group;
			makeIdentity -apply true -s 1 -n 0 -pn 1 $group;
			matchTransform -pos -rot $group $obj;refresh;
		}
	}
}
global proc ctrlIn() {
	global string $cValueScaleTextField;
	string $select[] = `ls -selection`;
	float $scale_value = `textField -q -tx value_scale_text_field`;
	for ($obj in $select) {
	float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;string $nameCtrl = $obj + "_Ctrl";
	string $group = `group -em -n ($obj + "_Grp")`;
	xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;
	string $controller = `curve -n $nameCtrl -d 1 -p 0 1 0 -p 0 0.92 0.38 -p 0 0.71 0.71 -p 0 0.38 0.92 
																-p 0 0 1 -p 0 -0.38 0.92 -p 0 -0.71 0.71 -p 0 -0.92 0.38 -p 0 -1 0 
																-p 0 -0.92 -0.38 -p 0 -0.71 -0.71 -p 0 -0.38 -0.92 -p 0 0 -1 -p 0 0.38 -0.92 
																-p 0 0.71 -0.71 -p 0 0.92 -0.38 -p 0 1 0 -p 0.38 0.92 0 -p 0.71 0.71 0 -p 0.92 0.38 0 
																-p 1 0 0 -p 0.92 -0.38 0 -p 0.71 -0.71 0 -p 0.38 -0.92 0 -p 0 -1 0 -p -0.38 -0.92 0 
																-p -0.71 -0.71 0 -p -0.92 -0.38 0 -p -1 0 0 -p -0.92 0.38 0 -p -0.71 0.71 0 -p -0.38 0.92 0 
																-p 0 1 0 -p 0 0.92 -0.38 -p 0 0.71 -0.71 -p 0 0.38 -0.92 -p 0 0 -1 -p -0.38 0 -0.92 
																-p -0.71 0 -0.71 -p -0.92 0 -0.38 -p -1 0 0 -p -0.92 0 0.38 -p -0.71 0 0.71 -p -0.38 0 0.92 
																-p 0 0 1 -p 0.38 0 0.92 -p 0.71 0 0.71 -p 0.92 0 0.38 -p 1 0 0 -p 0.92 0 -0.38 -p 0.71 0 -0.71 
																-p 0.38 0 -0.92 -p 0 0 -1 `;
	xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $controller;
	parent $controller $group;
	setAttr ($group + ".scale") -type double3 (1 * $scale_value) (1 * $scale_value) (1 * $scale_value);
	parent $obj $controller;
	}
}    

global proc ctrljnt() {global string $cValueScaleTextField;string $selected_objects[] = `ls -selection`;
float $scale_value = `textField -q -tx value_scale_text_field`;
for ($obj in $selected_objects) {
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;string $group = `group -em -n ($obj + "_Grp")`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;
string $controller[] = `circle -nr 0 1 0 -r 2 -n ($obj + "_Ctrl")`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $controller[0];parent $controller[0] $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value) (1 * $scale_value) (1 * $scale_value);
string $joint = `joint -n ($obj + "_jnt")`;}} 
global proc ctrlSjnt() {
	global string $cValueScaleTextField;
	string $selected_objects[] = `ls -selection`;
	float $scale_value = `textField -q -tx value_scale_text_field`;
	for ($obj in $selected_objects) {
		float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
		string $group = `group -em -n ($obj + "_Grp")`;
		xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;
		string $controller[] = `circle -nr 0 1 0 -r 3 -n ($obj + "_Ctrl")`;
		xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $controller[0];
		string $controllerSecond[] = `circle -nr 0 1 0 -r 2 -n ($obj + "_Core")`;
		xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $controllerSecond[0];
		parent $controller[0] $group;parent $controllerSecond[0] $controller[0];
		setAttr ($group + ".scale") -type double3 (1 * $scale_value) (1 * $scale_value) (1 * $scale_value);
		string $joint = `joint -n ($obj + "_jnt")`;select -r $controllerSecond $controller;yellowColorCurve();select -cl;
	}
} 
global proc geoToCtrl(){
	string $select[] = `ls -selection`;
	for ($obj in $select) {
		$group = `group -em -n ($obj + "_Grp")`;
		$controller = `circle -nr 0 1 0 -r 3 -n ($obj + "_Ctrl")`;
		$controllerSecond = `circle -nr 0 1 0 -r 2 -n ($obj + "_Core")`;
		parent $controller $group;
		parent $controllerSecond $controller;
		matchTransform -pos -rot $group $obj;
		parent $obj $controllerSecond;
		select -r $controllerSecond $controller;
		yellowColorCurve();
		select -cl;
	}
}
global proc addJntToCurve(){
	string $selected[] = `ls -sl`;
	for ($obj in $selected){
		string $joint = `createNode joint -n ($obj + "_jnt")`;
		matchTransform -pos -rot $joint $obj;
		parent $joint $obj;
		}
}
global proc addJntToWS(){string $selected[] = `ls -sl`;for ($obj in $selected){
string $joint = `joint -n ($obj)`;parent -w $joint;}}
global proc addJntBindToWS(){
	string $selected[] = `ls -sl`;
	for ($obj in $selected){
	float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
	string $joint = `joint -n ($obj + "_jnt")`;
	xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $joint;
	skinCluster $joint $obj;
	parent -w $joint;
	}}
global proc cCicleD (){
global string $bNormalRDB;global string $bValueRDB;global string $bGroupRDB;global string $tfValueCurveScale;global string $bGroupAndJnt;
string $cSelectNormal = `radioButton -q -select rb_normal`;
string $cValueRDB = `radioButton -q -select rb_value`;
string $cSelectGroupRDB = `radioButton -q -select rb_group`;
string $cSelectGroupAndJnt = `radioButton -q -select rb_joint`;
if ($cSelectNormal){CicleD();}
if ($cValueRDB){CicleDValue();}
if ($cSelectGroupRDB){CicleDValueGrp();}   
if ($cSelectGroupAndJnt){CicleDValueGrpJnt();}}
global proc CicleD(){
string $circleDCtrl = `curve -n "CircleD" -d 1 -p 0 1 0 -p 0 0.92 0.38 -p 0 0.71 0.71 -p 0 0.38 0.92 
-p 0 0 1 -p 0 -0.38 0.92 -p 0 -0.71 0.71 -p 0 -0.92 0.38 -p 0 -1 0 
-p 0 -0.92 -0.38 -p 0 -0.71 -0.71 -p 0 -0.38 -0.92 -p 0 0 -1 -p 0 0.38 -0.92 
-p 0 0.71 -0.71 -p 0 0.92 -0.38 -p 0 1 0 -p 0.38 0.92 0 -p 0.71 0.71 0 -p 0.92 0.38 0 
-p 1 0 0 -p 0.92 -0.38 0 -p 0.71 -0.71 0 -p 0.38 -0.92 0 -p 0 -1 0 -p -0.38 -0.92 0 
-p -0.71 -0.71 0 -p -0.92 -0.38 0 -p -1 0 0 -p -0.92 0.38 0 -p -0.71 0.71 0 -p -0.38 0.92 0 
-p 0 1 0 -p 0 0.92 -0.38 -p 0 0.71 -0.71 -p 0 0.38 -0.92 -p 0 0 -1 -p -0.38 0 -0.92 
-p -0.71 0 -0.71 -p -0.92 0 -0.38 -p -1 0 0 -p -0.92 0 0.38 -p -0.71 0 0.71 -p -0.38 0 0.92 
-p 0 0 1 -p 0.38 0 0.92 -p 0.71 0 0.71 -p 0.92 0 0.38 -p 1 0 0 -p 0.92 0 -0.38 -p 0.71 0 -0.71 
-p 0.38 0 -0.92 -p 0 0 -1 `;
}
global proc CicleDValue(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
string $nameCtrl = $obj + "_Ctrl";
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $circleDCtrl = `curve -n $nameCtrl -d 1 -p 0 1 0 -p 0 0.92 0.38 -p 0 0.71 0.71 -p 0 0.38 0.92 
-p 0 0 1 -p 0 -0.38 0.92 -p 0 -0.71 0.71 -p 0 -0.92 0.38 -p 0 -1 0 
-p 0 -0.92 -0.38 -p 0 -0.71 -0.71 -p 0 -0.38 -0.92 -p 0 0 -1 -p 0 0.38 -0.92 
-p 0 0.71 -0.71 -p 0 0.92 -0.38 -p 0 1 0 -p 0.38 0.92 0 -p 0.71 0.71 0 -p 0.92 0.38 0 
-p 1 0 0 -p 0.92 -0.38 0 -p 0.71 -0.71 0 -p 0.38 -0.92 0 -p 0 -1 0 -p -0.38 -0.92 0 
-p -0.71 -0.71 0 -p -0.92 -0.38 0 -p -1 0 0 -p -0.92 0.38 0 -p -0.71 0.71 0 -p -0.38 0.92 0 
-p 0 1 0 -p 0 0.92 -0.38 -p 0 0.71 -0.71 -p 0 0.38 -0.92 -p 0 0 -1 -p -0.38 0 -0.92 
-p -0.71 0 -0.71 -p -0.92 0 -0.38 -p -1 0 0 -p -0.92 0 0.38 -p -0.71 0 0.71 -p -0.38 0 0.92 
-p 0 0 1 -p 0.38 0 0.92 -p 0.71 0 0.71 -p 0.92 0 0.38 -p 1 0 0 -p 0.92 0 -0.38 -p 0.71 0 -0.71 
-p 0.38 0 -0.92 -p 0 0 -1 `;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $circleDCtrl;
setAttr ($circleDCtrl + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $circleDCtrl;
}}
global proc CicleDValueGrp(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $nameGroup = $obj + "_grp";string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $circleDCtrl = `curve -n $nameCtrl -d 1 -p 0 1 0 -p 0 0.92 0.38 -p 0 0.71 0.71 -p 0 0.38 0.92 
-p 0 0 1 -p 0 -0.38 0.92 -p 0 -0.71 0.71 -p 0 -0.92 0.38 -p 0 -1 0 
-p 0 -0.92 -0.38 -p 0 -0.71 -0.71 -p 0 -0.38 -0.92 -p 0 0 -1 -p 0 0.38 -0.92 
-p 0 0.71 -0.71 -p 0 0.92 -0.38 -p 0 1 0 -p 0.38 0.92 0 -p 0.71 0.71 0 -p 0.92 0.38 0 
-p 1 0 0 -p 0.92 -0.38 0 -p 0.71 -0.71 0 -p 0.38 -0.92 0 -p 0 -1 0 -p -0.38 -0.92 0 
-p -0.71 -0.71 0 -p -0.92 -0.38 0 -p -1 0 0 -p -0.92 0.38 0 -p -0.71 0.71 0 -p -0.38 0.92 0 
-p 0 1 0 -p 0 0.92 -0.38 -p 0 0.71 -0.71 -p 0 0.38 -0.92 -p 0 0 -1 -p -0.38 0 -0.92 
-p -0.71 0 -0.71 -p -0.92 0 -0.38 -p -1 0 0 -p -0.92 0 0.38 -p -0.71 0 0.71 -p -0.38 0 0.92 
-p 0 0 1 -p 0.38 0 0.92 -p 0.71 0 0.71 -p 0.92 0 0.38 -p 1 0 0 -p 0.92 0 -0.38 -p 0.71 0 -0.71 -p 0.38 0 -0.92 -p 0 0 -1 `;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $circleDCtrl;
parent $circleDCtrl $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);makeIdentity -apply true -s 1 -n 0 -pn 1 $group;}}
global proc CicleDValueGrpJnt(){
	global string $tfValueCurveScale;
	string $selected[] = `ls -sl`;
	float $scale_value = `textField -q -tx value_scale_customeCurve`;
	for ($obj in $selected){
	float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
	string $nameGroup = $obj + "_grp";
	string $group = `group -n $nameGroup -empty`;
	xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
	string $circleDCtrl = `curve -n $nameCtrl -d 1 -p 0 1 0 -p 0 0.92 0.38 -p 0 0.71 0.71 -p 0 0.38 0.92 
		-p 0 0 1 -p 0 -0.38 0.92 -p 0 -0.71 0.71 -p 0 -0.92 0.38 -p 0 -1 0 
		-p 0 -0.92 -0.38 -p 0 -0.71 -0.71 -p 0 -0.38 -0.92 -p 0 0 -1 -p 0 0.38 -0.92 
		-p 0 0.71 -0.71 -p 0 0.92 -0.38 -p 0 1 0 -p 0.38 0.92 0 -p 0.71 0.71 0 -p 0.92 0.38 0 
		-p 1 0 0 -p 0.92 -0.38 0 -p 0.71 -0.71 0 -p 0.38 -0.92 0 -p 0 -1 0 -p -0.38 -0.92 0 
		-p -0.71 -0.71 0 -p -0.92 -0.38 0 -p -1 0 0 -p -0.92 0.38 0 -p -0.71 0.71 0 -p -0.38 0.92 0 
		-p 0 1 0 -p 0 0.92 -0.38 -p 0 0.71 -0.71 -p 0 0.38 -0.92 -p 0 0 -1 -p -0.38 0 -0.92 
		-p -0.71 0 -0.71 -p -0.92 0 -0.38 -p -1 0 0 -p -0.92 0 0.38 -p -0.71 0 0.71 -p -0.38 0 0.92 
		-p 0 0 1 -p 0.38 0 0.92 -p 0.71 0 0.71 -p 0.92 0 0.38 -p 1 0 0 -p 0.92 0 -0.38 -p 0.71 0 -0.71 -p 0.38 0 -0.92 -p 0 0 -1 `;
	xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $circleDCtrl;
	parent $circleDCtrl $group;
	setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
	makeIdentity -apply true -s 1 -n 0 -pn 1 $group;string $joint = `joint -n ($obj + "_jnt")`;
	}
}
global proc cCubeCur (){
global string $bNormalRDB;global string $bValueRDB;global string $bGroupRDB;global string $tfValueCurveScale;global string $bGroupAndJnt;
string $cSelectNormal = `radioButton -q -select rb_normal`;
string $cValueRDB = `radioButton -q -select rb_value`;
string $cSelectGroupRDB = `radioButton -q -select rb_group`;
string $cSelectGroupAndJnt = `radioButton -q -select rb_joint`;
if ($cSelectNormal){Cube();}
if ($cValueRDB){CubeValue();}
if ($cSelectGroupRDB){CubeValueGrp();}   
if ($cSelectGroupAndJnt){CubeValueGrpJnt();}}
global proc Cube(){
string $CubeCtrl = `curve -n "Cube" -d 1 -p 1 1 1 -p 1 1 -1 -p 1 -1 -1 -p 1 -1 1 -p -1 -1 1 -p -1 1 1 -p 1 1 1 
-p 1 -1 1 -p -1 -1 1 -p -1 -1 -1 -p -1 1 -1 -p 1 1 -1 -p 1 -1 -1 -p -1 -1 -1 -p -1 1 -1 -p -1 1 1`;}
global proc CubeValue(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
string $nameCtrl = $obj + "_Ctrl";float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $CubeCtrl = `curve -n $nameCtrl -d 1 -p 1 1 1 -p 1 1 -1 -p 1 -1 -1 -p 1 -1 1 -p -1 -1 1 -p -1 1 1 -p 1 1 1 
-p 1 -1 1 -p -1 -1 1 -p -1 -1 -1 -p -1 1 -1 -p 1 1 -1 -p 1 -1 -1 -p -1 -1 -1 -p -1 1 -1 -p -1 1 1`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $CubeCtrl;
setAttr ($CubeCtrl + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $CubeCtrl;}}
global proc CubeValueGrp(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $nameGroup = $obj + "_grp";string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $CubeCtrl = `curve -n $nameCtrl -d 1 -p 1 1 1 -p 1 1 -1 -p 1 -1 -1 -p 1 -1 1 -p -1 -1 1 -p -1 1 1 -p 1 1 1 
-p 1 -1 1 -p -1 -1 1 -p -1 -1 -1 -p -1 1 -1 -p 1 1 -1 -p 1 -1 -1 -p -1 -1 -1 -p -1 1 -1 -p -1 1 1`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $CubeCtrl;parent $CubeCtrl $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $group;}}
global proc CubeValueGrpJnt(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;string $nameGroup = $obj + "_grp";
string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $CubeCtrl = `curve -n $nameCtrl -d 1 -p 1 1 1 -p 1 1 -1 -p 1 -1 -1 -p 1 -1 1 -p -1 -1 1 -p -1 1 1 -p 1 1 1 
-p 1 -1 1 -p -1 -1 1 -p -1 -1 -1 -p -1 1 -1 -p 1 1 -1 -p 1 -1 -1 -p -1 -1 -1 -p -1 1 -1 -p -1 1 1`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $CubeCtrl;parent $CubeCtrl $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $group;string $joint = `joint -n ($obj + "_jnt")`;}}
global proc cCircleCur (){
global string $bNormalRDB;global string $bValueRDB;global string $bGroupRDB;global string $tfValueCurveScale;global string $bGroupAndJnt;
string $cSelectNormal = `radioButton -q -select rb_normal`;
string $cValueRDB = `radioButton -q -select rb_value`;
string $cSelectGroupRDB = `radioButton -q -select rb_group`;
string $cSelectGroupAndJnt = `radioButton -q -select rb_joint`;
if ($cSelectNormal){CircleCur();}
if ($cValueRDB){CircleCurValue();}
if ($cSelectGroupRDB){CircleCurValueGrp();}   
if ($cSelectGroupAndJnt){CircleCurValueGrpJnt();}}
global proc CircleCur(){
string $CircleCurCtrl[] = `circle -nr 0 1 0 -r 2 -n "Circle_Curve"`;}
global proc CircleCurValue(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
string $nameCtrl = $obj + "_Ctrl";float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $CircleCurCtrl[] = `circle -nr 0 1 0 -r $scale_value -n ($obj + "_Ctrl")`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $CircleCurCtrl;
makeIdentity -apply true -s 1 -n 0 -pn 1 $CircleCurCtrl;}}
global proc CircleCurValueGrp(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $nameGroup = $obj + "_grp";string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $CircleCurCtrl[] = `circle -nr 0 1 0 -r 1 -n ($obj + "_Ctrl")`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $CircleCurCtrl;parent $CircleCurCtrl[0] $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value) (1 * $scale_value) (1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $group;}}
global proc CircleCurValueGrpJnt(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;string $nameGroup = $obj + "_grp";
string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $CircleCurCtrl[] = `circle -nr 0 1 0 -r 1 -n ($obj + "_Ctrl")`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $CircleCurCtrl;
parent $CircleCurCtrl[0] $group;string $joint = `joint -n ($obj + "_jnt")`;
setAttr ($group + ".scale") -type double3 (1 * $scale_value) (1 * $scale_value) (1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $group;}}
global proc cCicleCurHafl (){
global string $bNormalRDB;global string $bValueRDB;global string $bGroupRDB;global string $tfValueCurveScale;global string $bGroupAndJnt;
string $cSelectNormal = `radioButton -q -select rb_normal`;
string $cValueRDB = `radioButton -q -select rb_value`;
string $cSelectGroupRDB = `radioButton -q -select rb_group`;
string $cSelectGroupAndJnt = `radioButton -q -select rb_joint`;
if ($cSelectNormal){CicleCurHafl();}
if ($cValueRDB){CicleCurHaflValue();}
if ($cSelectGroupRDB){CicleCurHaflValueGrp();}   
if ($cSelectGroupAndJnt){CicleCurHaflValueGrpJnt();}}
global proc CicleCurHafl(){
string $CicleCurHaflCtrl = `curve -n "CicleCurHafl" -d 3 -p -2 0 1 -p -2.01 0 0.68 -p -2 0 0 -p -0.97 0 -1.21 -p 0.97 0 -1.21 -p 2 0 0 -p 2.01 0 0.64 -p 2 0 1`;}
global proc CicleCurHaflValue(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
string $nameCtrl = $obj + "_Ctrl";float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $CicleCurHaflCtrl = `curve -n $nameCtrl -d 3 -p -2 0 1 -p -2.01 0 0.68 -p -2 0 0 -p -0.97 0 -1.21 -p 0.97 0 -1.21 -p 2 0 0 -p 2.01 0 0.64 -p 2 0 1`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $CicleCurHaflCtrl;
setAttr ($CicleCurHaflCtrl + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $CicleCurHaflCtrl;}}
global proc CicleCurHaflValueGrp(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $nameGroup = $obj + "_grp";string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $CicleCurHaflCtrl = `curve -n $nameCtrl -d 3 -p -2 0 1 -p -2.01 0 0.68 -p -2 0 0 -p -0.97 0 -1.21 -p 0.97 0 -1.21 -p 2 0 0 -p 2.01 0 0.64 -p 2 0 1`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $CicleCurHaflCtrl;parent $CicleCurHaflCtrl $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);makeIdentity -apply true -s 1 -n 0 -pn 1 $group;}}
global proc CicleCurHaflValueGrpJnt(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;string $nameGroup = $obj + "_grp";string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $CicleCurHaflCtrl = `curve -n $nameCtrl -d 3 -p -2 0 1 -p -2.01 0 0.68 -p -2 0 0 -p -0.97 0 -1.21 -p 0.97 0 -1.21 -p 2 0 0 -p 2.01 0 0.64 -p 2 0 1`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $CicleCurHaflCtrl;parent $CicleCurHaflCtrl $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $group;string $joint = `joint -n ($obj + "_jnt")`;}}
global proc cHandCur (){
global string $bNormalRDB;global string $bValueRDB;global string $bGroupRDB;global string $tfValueCurveScale;global string $bGroupAndJnt;
string $cSelectNormal = `radioButton -q -select rb_normal`;
string $cValueRDB = `radioButton -q -select rb_value`;
string $cSelectGroupRDB = `radioButton -q -select rb_group`;
string $cSelectGroupAndJnt = `radioButton -q -select rb_joint`;
if ($cSelectNormal){HandCur();}
if ($cValueRDB){HandCurValue();}
if ($cSelectGroupRDB){HandCurValueGrp();}   
if ($cSelectGroupAndJnt){HandCurValueGrpJnt();}}
global proc HandCur(){
string $HandCurCtrl = `curve -n "HandCur" -d 3 -p -0.03 0 -0.8 -p -0.03 0 -0.25 -p -0.03 0 0.48 -p 0.57 -0 1.48 -p 2.71 -0 2.66 
-p 3.25 -0 3.12 -p 4 -0 2.94 -p 4.09 -0 2.11 -p 3.22 -0 1.69 -p 2.65 -0 1.4 -p 3.68 -0 1.4 -p 7 -0 1.4 -p 7.14 -0 0.9 -p 7 -0 0.52 
-p 5.4 -0 0.52 -p 4.04 -0 0.52 -p 4.04 -0 0.39 -p 4.04 -0 0.22 -p 5.72 -0 0.22 -p 7.72 -0 0.22 -p 7.86 -0 -0.25 -p 7.72 -0 -0.71 
-p 5.72 -0 -0.71 -p 4.1 -0 -0.71 -p 4.1 -0 -0.84 -p 4.1 -0 -1 -p 6.04 -0 -1 -p 7.26 -0 -1 -p 7.46 -0 -1.46 -p 7.24 -0 -1.92 
-p 5.97 -0 -1.92 -p 3.92 -0 -1.92 -p 3.92 -0 -2.02 -p 3.92 -0 -2.12 -p 5.38 -0 -2.12 -p 6.25 -0 -2.12 -p 6.61 -0 -2.6 -p 6.31 -0 -3.12 
-p 5.14 -0 -3.12 -p 3.88 -0 -3.12 -p 2.57 -0 -3.12 -p 1.1 -0 -3.16 -p -0.03 0 -2.17 -p -0.03 0 -1.47 -p -0.03 0 -0.8`;}
global proc HandCurValue(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
string $nameCtrl = $obj + "_Ctrl";float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $HandCurCtrl = `curve -n $nameCtrl -d 3 -p -0.03 0 -0.8 -p -0.03 0 -0.25 -p -0.03 0 0.48 -p 0.57 -0 1.48 -p 2.71 -0 2.66 -p 3.25 -0 3.12 
-p 4 -0 2.94 -p 4.09 -0 2.11 -p 3.22 -0 1.69 -p 2.65 -0 1.4 -p 3.68 -0 1.4 -p 7 -0 1.4 -p 7.14 -0 0.9 -p 7 -0 0.52 -p 5.4 -0 0.52 -p 4.04 -0 0.52 
-p 4.04 -0 0.39 -p 4.04 -0 0.22 -p 5.72 -0 0.22 -p 7.72 -0 0.22 -p 7.86 -0 -0.25 -p 7.72 -0 -0.71 -p 5.72 -0 -0.71 -p 4.1 -0 -0.71 -p 4.1 -0 -0.84 
-p 4.1 -0 -1 -p 6.04 -0 -1 -p 7.26 -0 -1 -p 7.46 -0 -1.46 -p 7.24 -0 -1.92 -p 5.97 -0 -1.92 -p 3.92 -0 -1.92 -p 3.92 -0 -2.02 -p 3.92 -0 -2.12 
-p 5.38 -0 -2.12 -p 6.25 -0 -2.12 -p 6.61 -0 -2.6 -p 6.31 -0 -3.12 -p 5.14 -0 -3.12 -p 3.88 -0 -3.12 -p 2.57 -0 -3.12 -p 1.1 -0 -3.16 -p -0.03 0 -2.17 
-p -0.03 0 -1.47 -p -0.03 0 -0.8`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $HandCurCtrl;
setAttr ($HandCurCtrl + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $HandCurCtrl;}}
global proc HandCurValueGrp(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $nameGroup = $obj + "_grp";string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $HandCurCtrl = `curve -n $nameCtrl -d 3 -p -0.03 0 -0.8 -p -0.03 0 -0.25 -p -0.03 0 0.48 -p 0.57 -0 1.48 -p 2.71 -0 2.66 
-p 3.25 -0 3.12 -p 4 -0 2.94 -p 4.09 -0 2.11 -p 3.22 -0 1.69 -p 2.65 -0 1.4 -p 3.68 -0 1.4 -p 7 -0 1.4 -p 7.14 -0 0.9 -p 7 -0 0.52 
-p 5.4 -0 0.52 -p 4.04 -0 0.52 -p 4.04 -0 0.39 -p 4.04 -0 0.22 -p 5.72 -0 0.22 -p 7.72 -0 0.22 -p 7.86 -0 -0.25 -p 7.72 -0 -0.71 
-p 5.72 -0 -0.71 -p 4.1 -0 -0.71 -p 4.1 -0 -0.84 -p 4.1 -0 -1 -p 6.04 -0 -1 -p 7.26 -0 -1 -p 7.46 -0 -1.46 -p 7.24 -0 -1.92 -p 5.97 -0 -1.92 
-p 3.92 -0 -1.92 -p 3.92 -0 -2.02 -p 3.92 -0 -2.12 -p 5.38 -0 -2.12 -p 6.25 -0 -2.12 -p 6.61 -0 -2.6 -p 6.31 -0 -3.12 
-p 5.14 -0 -3.12 -p 3.88 -0 -3.12 -p 2.57 -0 -3.12 -p 1.1 -0 -3.16 -p -0.03 0 -2.17 -p -0.03 0 -1.47 -p -0.03 0 -0.8`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $HandCurCtrl;parent $HandCurCtrl $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);makeIdentity -apply true -s 1 -n 0 -pn 1 $group;}}
global proc HandCurValueGrpJnt(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;string $nameGroup = $obj + "_grp";string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $HandCurCtrl = `curve -n $nameCtrl -d 3 -p -0.03 0 -0.8 -p -0.03 0 -0.25 -p -0.03 0 0.48 -p 0.57 -0 1.48 -p 2.71 -0 2.66 
-p 3.25 -0 3.12 -p 4 -0 2.94 -p 4.09 -0 2.11 -p 3.22 -0 1.69 -p 2.65 -0 1.4 -p 3.68 -0 1.4 -p 7 -0 1.4 -p 7.14 -0 0.9 -p 7 -0 0.52 
-p 5.4 -0 0.52 -p 4.04 -0 0.52 -p 4.04 -0 0.39 -p 4.04 -0 0.22 -p 5.72 -0 0.22 -p 7.72 -0 0.22 -p 7.86 -0 -0.25 -p 7.72 -0 -0.71 
-p 5.72 -0 -0.71 -p 4.1 -0 -0.71 -p 4.1 -0 -0.84 -p 4.1 -0 -1 -p 6.04 -0 -1 -p 7.26 -0 -1 -p 7.46 -0 -1.46 -p 7.24 -0 -1.92 -p 5.97 -0 -1.92 
-p 3.92 -0 -1.92 -p 3.92 -0 -2.02 -p 3.92 -0 -2.12 -p 5.38 -0 -2.12 -p 6.25 -0 -2.12 -p 6.61 -0 -2.6 -p 6.31 -0 -3.12 -p 5.14 -0 -3.12 
-p 3.88 -0 -3.12 -p 2.57 -0 -3.12 -p 1.1 -0 -3.16 -p -0.03 0 -2.17 -p -0.03 0 -1.47 -p -0.03 0 -0.8`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $HandCurCtrl;parent $HandCurCtrl $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $group;string $joint = `joint -n ($obj + "_jnt")`;}}
global proc cLegCur (){
global string $bNormalRDB;global string $bValueRDB;global string $bGroupRDB;global string $tfValueCurveScale;global string $bGroupAndJnt;
string $cSelectNormal = `radioButton -q -select rb_normal`;
string $cValueRDB = `radioButton -q -select rb_value`;
string $cSelectGroupRDB = `radioButton -q -select rb_group`;
string $cSelectGroupAndJnt = `radioButton -q -select rb_joint`;
if ($cSelectNormal){LegCur();}
if ($cValueRDB){LegCurValue();}
if ($cSelectGroupRDB){LegCurValueGrp();}   
if ($cSelectGroupAndJnt){LegCurValueGrpJnt();}}
global proc LegCur(){
string $LegCurCtrl = `curve -n "LegCur" -d 3 -p 1.35 0 0.65 -p 0.03 0 -0.26 -p -1.48 -0.01 0.4 -p -1.4 0 2.42 -p 0.13 0 3.9 -p -1.27 0 6.03 
-p -1.52 0 7.95 -p -0.53 0 9.28 -p 0.74 0 9.76 -p 1.98 0 8.92 -p 2.46 0 7.95 -p 2.67 0 6.03 -p 2.43 0 3.9 -p 1.9 0 1.98 -p 1.35 0 0.65`;}
global proc LegCurValue(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
string $nameCtrl = $obj + "_Ctrl";float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $LegCurCtrl = `curve -n $nameCtrl -d 3 -p 1.35 0 0.65 -p 0.03 0 -0.26 -p -1.48 -0.01 0.4 -p -1.4 0 2.42 -p 0.13 0 3.9 -p -1.27 0 6.03 
-p -1.52 0 7.95 -p -0.53 0 9.28 -p 0.74 0 9.76 -p 1.98 0 8.92 -p 2.46 0 7.95 -p 2.67 0 6.03 -p 2.43 0 3.9 -p 1.9 0 1.98 -p 1.35 0 0.65`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $LegCurCtrl;
setAttr ($LegCurCtrl + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $LegCurCtrl;}}
global proc LegCurValueGrp(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $nameGroup = $obj + "_grp";string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $LegCurCtrl = `curve -n $nameCtrl -d 3 -p 1.35 0 0.65 -p 0.03 0 -0.26 -p -1.48 -0.01 0.4 -p -1.4 0 2.42 -p 0.13 0 3.9 -p -1.27 0 6.03 
-p -1.52 0 7.95 -p -0.53 0 9.28 -p 0.74 0 9.76 -p 1.98 0 8.92 -p 2.46 0 7.95 -p 2.67 0 6.03 -p 2.43 0 3.9 -p 1.9 0 1.98 -p 1.35 0 0.65`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $LegCurCtrl;parent $LegCurCtrl $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);makeIdentity -apply true -s 1 -n 0 -pn 1 $group;}}
global proc LegCurValueGrpJnt(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;string $nameGroup = $obj + "_grp";string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $LegCurCtrl = `curve -n $nameCtrl -d 3 -p 1.35 0 0.65 -p 0.03 0 -0.26 -p -1.48 -0.01 0.4 -p -1.4 0 2.42 -p 0.13 0 3.9 -p -1.27 0 6.03 
-p -1.52 0 7.95 -p -0.53 0 9.28 -p 0.74 0 9.76 -p 1.98 0 8.92 -p 2.46 0 7.95 -p 2.67 0 6.03 -p 2.43 0 3.9 -p 1.9 0 1.98 -p 1.35 0 0.65`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $LegCurCtrl;parent $LegCurCtrl $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $group;string $joint = `joint -n ($obj + "_jnt")`;}}
global proc cTarget (){
global string $bNormalRDB;global string $bValueRDB;global string $bGroupRDB;global string $tfValueCurveScale;global string $bGroupAndJnt;
string $cSelectNormal = `radioButton -q -select rb_normal`;
string $cValueRDB = `radioButton -q -select rb_value`;
string $cSelectGroupRDB = `radioButton -q -select rb_group`;
string $cSelectGroupAndJnt = `radioButton -q -select rb_joint`;
if ($cSelectNormal){Target();}
if ($cValueRDB){TargetValue();}
if ($cSelectGroupRDB){TargetValueGrp();}   
if ($cSelectGroupAndJnt){TargetValueGrpJnt();}}
global proc Target(){
string $TargetCtrl = `curve -n "Target" -d 1 -p -2 0 0 -p 1 0 1 -p 1 0 -1 -p -2 0 0 -p 1 1 0 -p 1 0 0 -p 1 -1 0 -p -2 0 0`;}
global proc TargetValue(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
string $nameCtrl = $obj + "_Ctrl";float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $TargetCtrl = `curve -n $nameCtrl -d 1 -p -2 0 0 -p 1 0 1 -p 1 0 -1 -p -2 0 0 -p 1 1 0 -p 1 0 0 -p 1 -1 0 -p -2 0 0`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $TargetCtrl;
setAttr ($TargetCtrl + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $TargetCtrl;}}
global proc TargetValueGrp(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $nameGroup = $obj + "_grp";string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $TargetCtrl = `curve -n $nameCtrl -d 1 -p -2 0 0 -p 1 0 1 -p 1 0 -1 -p -2 0 0 -p 1 1 0 -p 1 0 0 -p 1 -1 0 -p -2 0 0`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $TargetCtrl;parent $TargetCtrl $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);makeIdentity -apply true -s 1 -n 0 -pn 1 $group;}}
global proc TargetValueGrpJnt(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;string $nameGroup = $obj + "_grp";string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $TargetCtrl = `curve -n $nameCtrl -d 1 -p -2 0 0 -p 1 0 1 -p 1 0 -1 -p -2 0 0 -p 1 1 0 -p 1 0 0 -p 1 -1 0 -p -2 0 0`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $TargetCtrl;parent $TargetCtrl $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $group;string $joint = `joint -n ($obj + "_jnt")`;}}
global proc cLocator (){
global string $bNormalRDB;global string $bValueRDB;global string $bGroupRDB;global string $tfValueCurveScale;global string $bGroupAndJnt;
string $cSelectNormal = `radioButton -q -select rb_normal`;
string $cValueRDB = `radioButton -q -select rb_value`;
string $cSelectGroupRDB = `radioButton -q -select rb_group`;
string $cSelectGroupAndJnt = `radioButton -q -select rb_joint`;
if ($cSelectNormal){Locator();}
if ($cValueRDB){LocatorValue();}
if ($cSelectGroupRDB){LocatorValueGrp();}   
if ($cSelectGroupAndJnt){LocatorValueGrpJnt();}}
global proc Locator(){
string $LocatorCtrl = `curve -n "LocatorCtrl" -d 1 -p -2 0 0 -p 2 0 0 -p 0 0 0 -p 0 0 2 -p 0 0 -2 -p 0 0 0 -p 0 2 0 -p 0 -2 0`;}
global proc LocatorValue(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
string $nameCtrl = $obj + "_Ctrl";float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $LocatorCtrl = `curve -n $nameCtrl -d 1 -p -2 0 0 -p 2 0 0 -p 0 0 0 -p 0 0 2 -p 0 0 -2 -p 0 0 0 -p 0 2 0 -p 0 -2 0`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $LocatorCtrl;
setAttr ($LocatorCtrl + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $LocatorCtrl;}}
global proc LocatorValueGrp(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $nameGroup = $obj + "_grp";string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $LocatorCtrl = `curve -n $nameCtrl -d 1 -p -2 0 0 -p 2 0 0 -p 0 0 0 -p 0 0 2 -p 0 0 -2 -p 0 0 0 -p 0 2 0 -p 0 -2 0`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $LocatorCtrl;parent $LocatorCtrl $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);makeIdentity -apply true -s 1 -n 0 -pn 1 $group;}}
global proc LocatorValueGrpJnt(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;string $nameGroup = $obj + "_grp";string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $LocatorCtrl = `curve -n $nameCtrl -d 1 -p -2 0 0 -p 2 0 0 -p 0 0 0 -p 0 0 2 -p 0 0 -2 -p 0 0 0 -p 0 2 0 -p 0 -2 0`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $LocatorCtrl;parent $LocatorCtrl $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $group;string $joint = `joint -n ($obj + "_jnt")`;}}
global proc cTargetCircle (){
	global string $bNormalRDB;
	global string $bValueRDB;
	global string $bGroupRDB;
	global string $tfValueCurveScale;
	global string $bGroupAndJnt;
	string $cSelectNormal = `radioButton -q -select rb_normal`;
	string $cValueRDB = `radioButton -q -select rb_value`;
	string $cSelectGroupRDB = `radioButton -q -select rb_group`;
	string $cSelectGroupAndJnt = `radioButton -q -select rb_joint`;
	if ($cSelectNormal){TargetCircle();}
	if ($cValueRDB){TargetCircleValue();}
	if ($cSelectGroupRDB){TargetCircleValueGrp();}   
	if ($cSelectGroupAndJnt){TargetCircleValueGrpJnt();}}
global proc TargetCircle(){
string $TargetCircleCtrl = `curve -n "TargetCircle" -d 1 -p 0 5.6 0 -p 2 5.6 -0 -p 1.85 5.6 0.76 -p 1.41 5.6 1.41 -p 0.76 5.6 1.85 -p 0 5.6 2 
-p 0 5.6 0 -p 0 5.6 2 -p -0.76 5.6 1.85 -p -1.41 5.6 1.41 -p -1.85 5.6 0.76 -p -2 5.6 -0 -p 0 5.6 0 -p -2 5.6 -0 -p -1.85 5.6 -0.76 -p -1.41 5.6 -1.41 
-p -0.76 5.6 -1.85 -p 0 5.6 -2 -p 0 5.6 0 -p 0 5.6 -2 -p 0.76 5.6 -1.85 -p 1.41 5.6 -1.41 -p 1.85 5.6 -0.76 -p 2 5.6 -0 -p 0 5.6 0 -p 0 1.6 0 
-p 0 1.6 0.8 -p 0 -0 0 -p 0 1.6 -0.8 -p 0 1.6 0 -p -0.8 1.6 0 -p 0 -0 0 -p 0.8 1.6 0 -p 0 1.6 0.8 -p -0.8 1.6 0 -p 0 1.6 -0.8 -p 0.8 1.6 0 -p 0 1.6 0`;refresh;}
global proc TargetCircleValue(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
string $nameCtrl = $obj + "_Ctrl";float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $TargetCircleCtrl = `curve -n $nameCtrl -d 1 -p 0 5.6 0 -p 2 5.6 -0 -p 1.85 5.6 0.76 -p 1.41 5.6 1.41 -p 0.76 5.6 1.85 -p 0 5.6 2 
-p 0 5.6 0 -p 0 5.6 2 -p -0.76 5.6 1.85 -p -1.41 5.6 1.41 -p -1.85 5.6 0.76 -p -2 5.6 -0 -p 0 5.6 0 -p -2 5.6 -0 -p -1.85 5.6 -0.76 -p -1.41 5.6 -1.41 
-p -0.76 5.6 -1.85 -p 0 5.6 -2 -p 0 5.6 0 -p 0 5.6 -2 -p 0.76 5.6 -1.85 -p 1.41 5.6 -1.41 -p 1.85 5.6 -0.76 -p 2 5.6 -0 -p 0 5.6 0 -p 0 1.6 0 
-p 0 1.6 0.8 -p 0 -0 0 -p 0 1.6 -0.8 -p 0 1.6 0 -p -0.8 1.6 0 -p 0 -0 0 -p 0.8 1.6 0 -p 0 1.6 0.8 -p -0.8 1.6 0 -p 0 1.6 -0.8 -p 0.8 1.6 0 -p 0 1.6 0`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $TargetCircleCtrl;
setAttr ($TargetCircleCtrl + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $TargetCircleCtrl;refresh;}}
global proc TargetCircleValueGrp(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $nameGroup = $obj + "_grp";string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $TargetCircleCtrl = `curve -n $nameCtrl -d 1 -p 0 5.6 0 -p 2 5.6 -0 -p 1.85 5.6 0.76 -p 1.41 5.6 1.41 -p 0.76 5.6 1.85 -p 0 5.6 2 
-p 0 5.6 0 -p 0 5.6 2 -p -0.76 5.6 1.85 -p -1.41 5.6 1.41 -p -1.85 5.6 0.76 -p -2 5.6 -0 -p 0 5.6 0 -p -2 5.6 -0 -p -1.85 5.6 -0.76 -p -1.41 5.6 -1.41 
-p -0.76 5.6 -1.85 -p 0 5.6 -2 -p 0 5.6 0 -p 0 5.6 -2 -p 0.76 5.6 -1.85 -p 1.41 5.6 -1.41 -p 1.85 5.6 -0.76 -p 2 5.6 -0 -p 0 5.6 0 -p 0 1.6 0 
-p 0 1.6 0.8 -p 0 -0 0 -p 0 1.6 -0.8 -p 0 1.6 0 -p -0.8 1.6 0 -p 0 -0 0 -p 0.8 1.6 0 -p 0 1.6 0.8 -p -0.8 1.6 0 -p 0 1.6 -0.8 -p 0.8 1.6 0 -p 0 1.6 0`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $TargetCircleCtrl;parent $TargetCircleCtrl $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);makeIdentity -apply true -s 1 -n 0 -pn 1 $group;refresh;}}
global proc TargetCircleValueGrpJnt(){
	global string $tfValueCurveScale;string $selected[] = `ls -sl`;
	float $scale_value = `textField -q -tx value_scale_customeCurve`;
	for ($obj in $selected){
		float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
		string $nameGroup = $obj + "_grp";
		string $group = `group -n $nameGroup -empty`;
		xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
		string $TargetCircleCtrl = `curve -n $nameCtrl -d 1 -p 0 5.6 0 -p 2 5.6 -0 -p 1.85 5.6 0.76 -p 1.41 5.6 1.41 -p 0.76 5.6 1.85 -p 0 5.6 2 
			-p 0 5.6 0 -p 0 5.6 2 -p -0.76 5.6 1.85 -p -1.41 5.6 1.41 -p -1.85 5.6 0.76 -p -2 5.6 -0 -p 0 5.6 0 -p -2 5.6 -0 -p -1.85 5.6 -0.76 -p -1.41 5.6 -1.41 
			-p -0.76 5.6 -1.85 -p 0 5.6 -2 -p 0 5.6 0 -p 0 5.6 -2 -p 0.76 5.6 -1.85 -p 1.41 5.6 -1.41 -p 1.85 5.6 -0.76 -p 2 5.6 -0 -p 0 5.6 0 -p 0 1.6 0 
			-p 0 1.6 0.8 -p 0 -0 0 -p 0 1.6 -0.8 -p 0 1.6 0 -p -0.8 1.6 0 -p 0 -0 0 -p 0.8 1.6 0 -p 0 1.6 0.8 -p -0.8 1.6 0 -p 0 1.6 -0.8 -p 0.8 1.6 0 -p 0 1.6 0`;
		xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $TargetCircleCtrl;
		parent $TargetCircleCtrl $group;
		setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
		makeIdentity -apply true -s 1 -n 0 -pn 1 $group;
		string $joint = `joint -n ($obj + "_jnt")`;
		refresh;
		}}
global proc cPlus (){
global string $bNormalRDB;global string $bValueRDB;global string $bGroupRDB;global string $tfValueCurveScale;global string $bGroupAndJnt;
string $cSelectNormal = `radioButton -q -select rb_normal`;
string $cValueRDB = `radioButton -q -select rb_value`;
string $cSelectGroupRDB = `radioButton -q -select rb_group`;
string $cSelectGroupAndJnt = `radioButton -q -select rb_joint`;
if ($cSelectNormal){Plus();}
if ($cValueRDB){PlusValue();}
if ($cSelectGroupRDB){PlusValueGrp();}   
if ($cSelectGroupAndJnt){PlusValueGrpJnt();}}
global proc Plus(){
string $PlusCtrl = `curve -n "Plus" -d 1 -p -0.64 -2.56 0 -p -0.64 -0.64 0 -p -2.56 -0.64 0 -p -2.56 0.64 0 -p -0.64 0.64 0 
-p -0.64 2.56 0 -p 0.64 2.56 0 -p 0.64 0.64 0 -p 2.56 0.64 0 -p 2.56 -0.64 0 -p 0.64 -0.64 0 -p 0.64 -2.56 0 -p -0.64 -2.56 0`;}
global proc PlusValue(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
string $nameCtrl = $obj + "_Ctrl";float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $PlusCtrl = `curve -n $nameCtrl -d 1 -p -0.64 -2.56 0 -p -0.64 -0.64 0 -p -2.56 -0.64 0 -p -2.56 0.64 0 -p -0.64 0.64 0 
-p -0.64 2.56 0 -p 0.64 2.56 0 -p 0.64 0.64 0 -p 2.56 0.64 0 -p 2.56 -0.64 0 -p 0.64 -0.64 0 -p 0.64 -2.56 0 -p -0.64 -2.56 0`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $PlusCtrl;
setAttr ($PlusCtrl + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $PlusCtrl;}}
global proc PlusValueGrp(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $nameGroup = $obj + "_grp";string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $PlusCtrl = `curve -n $nameCtrl -d 1 -p -0.64 -2.56 0 -p -0.64 -0.64 0 -p -2.56 -0.64 0 -p -2.56 0.64 0 -p -0.64 0.64 0 
-p -0.64 2.56 0 -p 0.64 2.56 0 -p 0.64 0.64 0 -p 2.56 0.64 0 -p 2.56 -0.64 0 -p 0.64 -0.64 0 -p 0.64 -2.56 0 -p -0.64 -2.56 0`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $PlusCtrl;parent $PlusCtrl $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);makeIdentity -apply true -s 1 -n 0 -pn 1 $group;}}
global proc PlusValueGrpJnt(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;string $nameGroup = $obj + "_grp";string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $PlusCtrl = `curve -n $nameCtrl -d 1 -p -0.64 -2.56 0 -p -0.64 -0.64 0 -p -2.56 -0.64 0 -p -2.56 0.64 0 -p -0.64 0.64 0 
-p -0.64 2.56 0 -p 0.64 2.56 0 -p 0.64 0.64 0 -p 2.56 0.64 0 -p 2.56 -0.64 0 -p 0.64 -0.64 0 -p 0.64 -2.56 0 -p -0.64 -2.56 0`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $PlusCtrl;parent $PlusCtrl $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $group;string $joint = `joint -n ($obj + "_jnt")`;}}
global proc cCirclePlus (){
global string $bNormalRDB;global string $bValueRDB;global string $bGroupRDB;global string $tfValueCurveScale;global string $bGroupAndJnt;
string $cSelectNormal = `radioButton -q -select rb_normal`;
string $cValueRDB = `radioButton -q -select rb_value`;
string $cSelectGroupRDB = `radioButton -q -select rb_group`;
string $cSelectGroupAndJnt = `radioButton -q -select rb_joint`;
if ($cSelectNormal){CirclePlus();}
if ($cValueRDB){CirclePlusValue();}
if ($cSelectGroupRDB){CirclePlusValueGrp();}   
if ($cSelectGroupAndJnt){CirclePlusValueGrpJnt();}}
global proc CirclePlus(){
string $CirclePlusCtrl = `curve -n "CirclePlus" -d 1 -p 0 0 -2 -p 0.76 0 -1.85 -p 1.41 0 -1.41 -p 1.85 0 -0.76 -p 2 0 -0 
-p 1.85 0 0.76 -p 1.41 0 1.41 -p 0.76 0 1.85 -p 0 0 2 -p 0 0 0 -p 0 0 -2 -p -0.76 0 -1.85 -p -1.41 0 -1.41 -p -1.85 0 -0.76 
-p -2 0 -0 -p 0 0 0 -p 2 0 -0 -p 1.85 0 0.76 -p 1.41 0 1.41 -p 0.76 0 1.85 -p 0 0 2 -p -0.76 0 1.85 -p -1.41 0 1.41 -p -1.85 0 0.76 -p -2 0 -0`;}
global proc CirclePlusValue(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
string $nameCtrl = $obj + "_Ctrl";float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $CirclePlusCtrl = `curve -n $nameCtrl -d 1 -p 0 0 -2 -p 0.76 0 -1.85 -p 1.41 0 -1.41 -p 1.85 0 -0.76 -p 2 0 -0 
-p 1.85 0 0.76 -p 1.41 0 1.41 -p 0.76 0 1.85 -p 0 0 2 -p 0 0 0 -p 0 0 -2 -p -0.76 0 -1.85 -p -1.41 0 -1.41 -p -1.85 0 -0.76 
-p -2 0 -0 -p 0 0 0 -p 2 0 -0 -p 1.85 0 0.76 -p 1.41 0 1.41 -p 0.76 0 1.85 -p 0 0 2 -p -0.76 0 1.85 -p -1.41 0 1.41 -p -1.85 0 0.76 -p -2 0 -0`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $CirclePlusCtrl;
setAttr ($CirclePlusCtrl + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $CirclePlusCtrl;}}
global proc CirclePlusValueGrp(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $nameGroup = $obj + "_grp";string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $CirclePlusCtrl = `curve -n $nameCtrl -d 1 -p 0 0 -2 -p 0.76 0 -1.85 -p 1.41 0 -1.41 -p 1.85 0 -0.76 -p 2 0 -0 
-p 1.85 0 0.76 -p 1.41 0 1.41 -p 0.76 0 1.85 -p 0 0 2 -p 0 0 0 -p 0 0 -2 -p -0.76 0 -1.85 -p -1.41 0 -1.41 -p -1.85 0 -0.76 
-p -2 0 -0 -p 0 0 0 -p 2 0 -0 -p 1.85 0 0.76 -p 1.41 0 1.41 -p 0.76 0 1.85 -p 0 0 2 -p -0.76 0 1.85 -p -1.41 0 1.41 -p -1.85 0 0.76 -p -2 0 -0`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $CirclePlusCtrl;parent $CirclePlusCtrl $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);makeIdentity -apply true -s 1 -n 0 -pn 1 $group;}}
global proc CirclePlusValueGrpJnt(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;string $nameGroup = $obj + "_grp";string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $CirclePlusCtrl = `curve -n $nameCtrl -d 1 -p 0 0 -2 -p 0.76 0 -1.85 -p 1.41 0 -1.41 -p 1.85 0 -0.76 -p 2 0 -0 
-p 1.85 0 0.76 -p 1.41 0 1.41 -p 0.76 0 1.85 -p 0 0 2 -p 0 0 0 -p 0 0 -2 -p -0.76 0 -1.85 -p -1.41 0 -1.41 -p -1.85 0 -0.76 
-p -2 0 -0 -p 0 0 0 -p 2 0 -0 -p 1.85 0 0.76 -p 1.41 0 1.41 -p 0.76 0 1.85 -p 0 0 2 -p -0.76 0 1.85 -p -1.41 0 1.41 -p -1.85 0 0.76 -p -2 0 -0`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $CirclePlusCtrl;parent $CirclePlusCtrl $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $group;string $joint = `joint -n ($obj + "_jnt")`;}}
global proc cRotate (){
global string $bNormalRDB;global string $bValueRDB;global string $bGroupRDB;global string $tfValueCurveScale;global string $bGroupAndJnt;
string $cSelectNormal = `radioButton -q -select rb_normal`;
string $cValueRDB = `radioButton -q -select rb_value`;
string $cSelectGroupRDB = `radioButton -q -select rb_group`;
string $cSelectGroupAndJnt = `radioButton -q -select rb_joint`;
if ($cSelectNormal){Rotate();}
if ($cValueRDB){RotateValue();}
if ($cSelectGroupRDB){RotateValueGrp();}   
if ($cSelectGroupAndJnt){RotateValueGrpJnt();}}
global proc Rotate(){
string $RotateCtrl = `curve -n "Rotate" -d 1 -p 0 0 -2.4 -p 0 0 -3.2 -p 0.83 0 -3.09 -p 1.6 0 -2.77 -p 2.26 0 -2.26 -p 2.77 0 -1.6 -p 3.09 0 -0.83 
-p 3.2 0 0 -p 3.09 0 0.83 -p 2.77 0 1.6 -p 2.26 0 2.26 -p 1.6 0 2.77 -p 0.83 0 3.09 -p 0 0 3.2 -p -0.83 0 3.09 -p -1.6 0 2.77 -p -2.26 0 2.26 -p -2.77 0 1.6 
-p -3.09 0 0.83 -p -3.2 0 0 -p -4.05 0 0 -p -2.78 0 -2.53 -p -1.52 0 0 -p -2.4 0 0 -p -2.32 0 0.62 -p -2.08 0 1.2 -p -1.7 0 1.7 -p -1.2 0 2.08 -p -0.62 0 2.32 
-p 0 0 2.4 -p 0.62 0 2.32 -p 1.2 0 2.08 -p 1.7 0 1.7 -p 2.08 0 1.2 -p 2.32 0 0.62 -p 2.4 0 0 -p 2.32 0 -0.62 -p 2.08 0 -1.2 -p 1.7 0 -1.7 -p 1.2 0 -2.08 -p 0.62 0 -2.32 -p 0 0 -2.4`;}
global proc RotateValue(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
string $nameCtrl = $obj + "_Ctrl";float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $RotateCtrl = `curve -n $nameCtrl -d 1 -p 0 0 -2.4 -p 0 0 -3.2 -p 0.83 0 -3.09 -p 1.6 0 -2.77 -p 2.26 0 -2.26 -p 2.77 0 -1.6 -p 3.09 0 -0.83 
-p 3.2 0 0 -p 3.09 0 0.83 -p 2.77 0 1.6 -p 2.26 0 2.26 -p 1.6 0 2.77 -p 0.83 0 3.09 -p 0 0 3.2 -p -0.83 0 3.09 -p -1.6 0 2.77 -p -2.26 0 2.26 -p -2.77 0 1.6 
-p -3.09 0 0.83 -p -3.2 0 0 -p -4.05 0 0 -p -2.78 0 -2.53 -p -1.52 0 0 -p -2.4 0 0 -p -2.32 0 0.62 -p -2.08 0 1.2 -p -1.7 0 1.7 -p -1.2 0 2.08 -p -0.62 0 2.32 
-p 0 0 2.4 -p 0.62 0 2.32 -p 1.2 0 2.08 -p 1.7 0 1.7 -p 2.08 0 1.2 -p 2.32 0 0.62 -p 2.4 0 0 -p 2.32 0 -0.62 -p 2.08 0 -1.2 -p 1.7 0 -1.7 -p 1.2 0 -2.08 -p 0.62 0 -2.32 -p 0 0 -2.4`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $RotateCtrl;
setAttr ($RotateCtrl + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $RotateCtrl;}}
global proc RotateValueGrp(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $nameGroup = $obj + "_grp";string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $RotateCtrl = `curve -n $nameCtrl -d 1 -p 0 0 -2.4 -p 0 0 -3.2 -p 0.83 0 -3.09 -p 1.6 0 -2.77 -p 2.26 0 -2.26 -p 2.77 0 -1.6 -p 3.09 0 -0.83 
-p 3.2 0 0 -p 3.09 0 0.83 -p 2.77 0 1.6 -p 2.26 0 2.26 -p 1.6 0 2.77 -p 0.83 0 3.09 -p 0 0 3.2 -p -0.83 0 3.09 -p -1.6 0 2.77 -p -2.26 0 2.26 -p -2.77 0 1.6 
-p -3.09 0 0.83 -p -3.2 0 0 -p -4.05 0 0 -p -2.78 0 -2.53 -p -1.52 0 0 -p -2.4 0 0 -p -2.32 0 0.62 -p -2.08 0 1.2 -p -1.7 0 1.7 -p -1.2 0 2.08 -p -0.62 0 2.32 
-p 0 0 2.4 -p 0.62 0 2.32 -p 1.2 0 2.08 -p 1.7 0 1.7 -p 2.08 0 1.2 -p 2.32 0 0.62 -p 2.4 0 0 -p 2.32 0 -0.62 -p 2.08 0 -1.2 -p 1.7 0 -1.7 -p 1.2 0 -2.08 -p 0.62 0 -2.32 -p 0 0 -2.4`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $RotateCtrl;parent $RotateCtrl $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);makeIdentity -apply true -s 1 -n 0 -pn 1 $group;}}
global proc RotateValueGrpJnt(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;string $nameGroup = $obj + "_grp";string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $RotateCtrl = `curve -n $nameCtrl -d 1 -p 0 0 -2.4 -p 0 0 -3.2 -p 0.83 0 -3.09 -p 1.6 0 -2.77 -p 2.26 0 -2.26 -p 2.77 0 -1.6 -p 3.09 0 -0.83 
-p 3.2 0 0 -p 3.09 0 0.83 -p 2.77 0 1.6 -p 2.26 0 2.26 -p 1.6 0 2.77 -p 0.83 0 3.09 -p 0 0 3.2 -p -0.83 0 3.09 -p -1.6 0 2.77 -p -2.26 0 2.26 -p -2.77 0 1.6 
-p -3.09 0 0.83 -p -3.2 0 0 -p -4.05 0 0 -p -2.78 0 -2.53 -p -1.52 0 0 -p -2.4 0 0 -p -2.32 0 0.62 -p -2.08 0 1.2 -p -1.7 0 1.7 -p -1.2 0 2.08 -p -0.62 0 2.32 
-p 0 0 2.4 -p 0.62 0 2.32 -p 1.2 0 2.08 -p 1.7 0 1.7 -p 2.08 0 1.2 -p 2.32 0 0.62 -p 2.4 0 0 -p 2.32 0 -0.62 -p 2.08 0 -1.2 -p 1.7 0 -1.7 -p 1.2 0 -2.08 -p 0.62 0 -2.32 -p 0 0 -2.4`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $RotateCtrl;parent $RotateCtrl $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $group;string $joint = `joint -n ($obj + "_jnt")`;}}
global proc cArrow (){
global string $bNormalRDB;global string $bValueRDB;global string $bGroupRDB;global string $tfValueCurveScale;global string $bGroupAndJnt;
string $cSelectNormal = `radioButton -q -select rb_normal`;
string $cValueRDB = `radioButton -q -select rb_value`;
string $cSelectGroupRDB = `radioButton -q -select rb_group`;
string $cSelectGroupAndJnt = `radioButton -q -select rb_joint`;
if ($cSelectNormal){Arrow();}
if ($cValueRDB){ArrowValue();}
if ($cSelectGroupRDB){ArrowValueGrp();}   
if ($cSelectGroupAndJnt){ArrowValueGrpJnt();}}
global proc Arrow(){
string $ArrowCtrl = `curve -n "Arrow" -d 1 -p -2.09 -0 0 -p 2.09 -0 2.83 -p 1.59 -0 2.22 -p 1.22 -0 1.53 -p 0.99 -0 0.78 -p 0.91 -0 0 -p 0.99 0 -0.78 
-p 1.22 0 -1.53 -p 1.59 0 -2.22 -p 2.09 0 -2.83 -p -2.09 -0 0`;}
global proc ArrowValue(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
string $nameCtrl = $obj + "_Ctrl";float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $ArrowCtrl = `curve -n $nameCtrl -d 1 -p -2.09 -0 0 -p 2.09 -0 2.83 -p 1.59 -0 2.22 -p 1.22 -0 1.53 -p 0.99 -0 0.78 -p 0.91 -0 0 -p 0.99 0 -0.78 
-p 1.22 0 -1.53 -p 1.59 0 -2.22 -p 2.09 0 -2.83 -p -2.09 -0 0`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $ArrowCtrl;
setAttr ($ArrowCtrl + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $ArrowCtrl;}}
global proc ArrowValueGrp(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $nameGroup = $obj + "_grp";string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $ArrowCtrl = `curve -n $nameCtrl -d 1 -p -2.09 -0 0 -p 2.09 -0 2.83 -p 1.59 -0 2.22 -p 1.22 -0 1.53 -p 0.99 -0 0.78 -p 0.91 -0 0 -p 0.99 0 -0.78 
-p 1.22 0 -1.53 -p 1.59 0 -2.22 -p 2.09 0 -2.83 -p -2.09 -0 0`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $ArrowCtrl;parent $ArrowCtrl $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);makeIdentity -apply true -s 1 -n 0 -pn 1 $group;}}
global proc ArrowValueGrpJnt(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;string $nameGroup = $obj + "_grp";string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $ArrowCtrl = `curve -n $nameCtrl -d 1 -p -2.09 -0 0 -p 2.09 -0 2.83 -p 1.59 -0 2.22 -p 1.22 -0 1.53 -p 0.99 -0 0.78 -p 0.91 -0 0 -p 0.99 0 -0.78 
-p 1.22 0 -1.53 -p 1.59 0 -2.22 -p 2.09 0 -2.83 -p -2.09 -0 0`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $ArrowCtrl;parent $ArrowCtrl $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $group;string $joint = `joint -n ($obj + "_jnt")`;}}
global proc cColorRange (){
global string $bNormalRDB;global string $bValueRDB;global string $bGroupRDB;global string $tfValueCurveScale;global string $bGroupAndJnt;
string $cSelectNormal = `radioButton -q -select rb_normal`;
string $cValueRDB = `radioButton -q -select rb_value`;
string $cSelectGroupRDB = `radioButton -q -select rb_group`;
string $cSelectGroupAndJnt = `radioButton -q -select rb_joint`;
if ($cSelectNormal){ColorRange();}
if ($cValueRDB){ColorRangeValue();}
if ($cSelectGroupRDB){ColorRangeValueGrp();}   
if ($cSelectGroupAndJnt){ColorRangeValueGrpJnt();}}
global proc ColorRange(){
string $ColorRangeCtrl = `curve -n "ColorRange" -d 1 -p 3.69 -0 1.53 -p 2.83 -0 2.83 -p 1.41 -0 1.41 -p 1.85 -0 0.76 -p 3.69 -0 1.53 -p 4 0 -0 -p 2 0 -0 -p 1.85 -0 0.76 
-p 1.41 -0 1.41 -p 0.76 -0 1.85 -p 1.53 -0 3.69 -p 2.83 -0 2.83 -p 1.41 -0 1.41 -p 0.76 -0 1.85 -p 0 -0 2 -p 0 -0 4 -p 1.53 -0 3.69 -p 0.76 -0 1.85 -p 0 -0 2 
-p -0.76 -0 1.85 -p -1.53 -0 3.69 -p 0 -0 4 -p 0 -0 2 -p -0.76 -0 1.85 -p -1.41 -0 1.41 -p -2.83 -0 2.83 -p -1.53 -0 3.69 -p -0.76 -0 1.85 -p -1.41 -0 1.41 
-p -1.85 -0 0.76 -p -3.69 -0 1.53 -p -2.83 -0 2.83 -p -1.41 -0 1.41 -p -1.85 -0 0.76 -p -2 0 -0 -p -4 0 -0 -p -3.69 -0 1.53 -p -1.85 -0 0.76 -p -2 0 -0 -p -1.85 0 -0.76 
-p -3.69 0 -1.53 -p -4 0 -0 -p -2 0 -0 -p -1.85 0 -0.76 -p -1.41 0 -1.41 -p -2.83 0 -2.83 -p -3.69 0 -1.53 -p -1.85 0 -0.76 -p -1.41 0 -1.41 -p -0.76 0 -1.85 
-p -1.53 0 -3.69 -p -2.83 0 -2.83 -p -1.41 0 -1.41 -p -0.76 0 -1.85 -p -0 0 -2 -p -0 0 -4 -p -1.53 0 -3.69 -p -0.76 0 -1.85 -p -0 0 -2 -p 0.76 0 -1.85 -p 1.53 0 -3.69 
-p -0 0 -4 -p -0 0 -2 -p 0.76 0 -1.85 -p 1.41 0 -1.41 -p 2.83 0 -2.83 -p 1.53 0 -3.69 -p 0.76 0 -1.85 -p 1.41 0 -1.41 -p 1.85 0 -0.76 -p 3.69 0 -1.53 -p 2.83 0 -2.83 
-p 1.41 0 -1.41 -p 1.85 0 -0.76 -p 2 0 -0 -p 4 0 -0 -p 3.69 0 -1.53`;}
global proc ColorRangeValue(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
string $nameCtrl = $obj + "_Ctrl";float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $ColorRangeCtrl = `curve -n $nameCtrl -d 1 -p 3.69 -0 1.53 -p 2.83 -0 2.83 -p 1.41 -0 1.41 -p 1.85 -0 0.76 -p 3.69 -0 1.53 -p 4 0 -0 -p 2 0 -0 -p 1.85 -0 0.76 
-p 1.41 -0 1.41 -p 0.76 -0 1.85 -p 1.53 -0 3.69 -p 2.83 -0 2.83 -p 1.41 -0 1.41 -p 0.76 -0 1.85 -p 0 -0 2 -p 0 -0 4 -p 1.53 -0 3.69 -p 0.76 -0 1.85 -p 0 -0 2 
-p -0.76 -0 1.85 -p -1.53 -0 3.69 -p 0 -0 4 -p 0 -0 2 -p -0.76 -0 1.85 -p -1.41 -0 1.41 -p -2.83 -0 2.83 -p -1.53 -0 3.69 -p -0.76 -0 1.85 -p -1.41 -0 1.41 
-p -1.85 -0 0.76 -p -3.69 -0 1.53 -p -2.83 -0 2.83 -p -1.41 -0 1.41 -p -1.85 -0 0.76 -p -2 0 -0 -p -4 0 -0 -p -3.69 -0 1.53 -p -1.85 -0 0.76 -p -2 0 -0 -p -1.85 0 -0.76 
-p -3.69 0 -1.53 -p -4 0 -0 -p -2 0 -0 -p -1.85 0 -0.76 -p -1.41 0 -1.41 -p -2.83 0 -2.83 -p -3.69 0 -1.53 -p -1.85 0 -0.76 -p -1.41 0 -1.41 -p -0.76 0 -1.85 
-p -1.53 0 -3.69 -p -2.83 0 -2.83 -p -1.41 0 -1.41 -p -0.76 0 -1.85 -p -0 0 -2 -p -0 0 -4 -p -1.53 0 -3.69 -p -0.76 0 -1.85 -p -0 0 -2 -p 0.76 0 -1.85 -p 1.53 0 -3.69 
-p -0 0 -4 -p -0 0 -2 -p 0.76 0 -1.85 -p 1.41 0 -1.41 -p 2.83 0 -2.83 -p 1.53 0 -3.69 -p 0.76 0 -1.85 -p 1.41 0 -1.41 -p 1.85 0 -0.76 -p 3.69 0 -1.53 -p 2.83 0 -2.83 
-p 1.41 0 -1.41 -p 1.85 0 -0.76 -p 2 0 -0 -p 4 0 -0 -p 3.69 0 -1.53`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $ColorRangeCtrl;
setAttr ($ColorRangeCtrl + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $ColorRangeCtrl;}}
global proc ColorRangeValueGrp(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $nameGroup = $obj + "_grp";string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $ColorRangeCtrl = `curve -n $nameCtrl -d 1 -p 3.69 -0 1.53 -p 2.83 -0 2.83 -p 1.41 -0 1.41 -p 1.85 -0 0.76 -p 3.69 -0 1.53 -p 4 0 -0 -p 2 0 -0 -p 1.85 -0 0.76 
-p 1.41 -0 1.41 -p 0.76 -0 1.85 -p 1.53 -0 3.69 -p 2.83 -0 2.83 -p 1.41 -0 1.41 -p 0.76 -0 1.85 -p 0 -0 2 -p 0 -0 4 -p 1.53 -0 3.69 -p 0.76 -0 1.85 -p 0 -0 2 
-p -0.76 -0 1.85 -p -1.53 -0 3.69 -p 0 -0 4 -p 0 -0 2 -p -0.76 -0 1.85 -p -1.41 -0 1.41 -p -2.83 -0 2.83 -p -1.53 -0 3.69 -p -0.76 -0 1.85 -p -1.41 -0 1.41 
-p -1.85 -0 0.76 -p -3.69 -0 1.53 -p -2.83 -0 2.83 -p -1.41 -0 1.41 -p -1.85 -0 0.76 -p -2 0 -0 -p -4 0 -0 -p -3.69 -0 1.53 -p -1.85 -0 0.76 -p -2 0 -0 -p -1.85 0 -0.76 
-p -3.69 0 -1.53 -p -4 0 -0 -p -2 0 -0 -p -1.85 0 -0.76 -p -1.41 0 -1.41 -p -2.83 0 -2.83 -p -3.69 0 -1.53 -p -1.85 0 -0.76 -p -1.41 0 -1.41 -p -0.76 0 -1.85 
-p -1.53 0 -3.69 -p -2.83 0 -2.83 -p -1.41 0 -1.41 -p -0.76 0 -1.85 -p -0 0 -2 -p -0 0 -4 -p -1.53 0 -3.69 -p -0.76 0 -1.85 -p -0 0 -2 -p 0.76 0 -1.85 -p 1.53 0 -3.69 
-p -0 0 -4 -p -0 0 -2 -p 0.76 0 -1.85 -p 1.41 0 -1.41 -p 2.83 0 -2.83 -p 1.53 0 -3.69 -p 0.76 0 -1.85 -p 1.41 0 -1.41 -p 1.85 0 -0.76 -p 3.69 0 -1.53 -p 2.83 0 -2.83 
-p 1.41 0 -1.41 -p 1.85 0 -0.76 -p 2 0 -0 -p 4 0 -0 -p 3.69 0 -1.53`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $ColorRangeCtrl;parent $ColorRangeCtrl $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);makeIdentity -apply true -s 1 -n 0 -pn 1 $group;}}
global proc ColorRangeValueGrpJnt(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;string $nameGroup = $obj + "_grp";string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $ColorRangeCtrl = `curve -n $nameCtrl -d 1 -p 3.69 -0 1.53 -p 2.83 -0 2.83 -p 1.41 -0 1.41 -p 1.85 -0 0.76 -p 3.69 -0 1.53 -p 4 0 -0 -p 2 0 -0 -p 1.85 -0 0.76 
-p 1.41 -0 1.41 -p 0.76 -0 1.85 -p 1.53 -0 3.69 -p 2.83 -0 2.83 -p 1.41 -0 1.41 -p 0.76 -0 1.85 -p 0 -0 2 -p 0 -0 4 -p 1.53 -0 3.69 -p 0.76 -0 1.85 -p 0 -0 2 
-p -0.76 -0 1.85 -p -1.53 -0 3.69 -p 0 -0 4 -p 0 -0 2 -p -0.76 -0 1.85 -p -1.41 -0 1.41 -p -2.83 -0 2.83 -p -1.53 -0 3.69 -p -0.76 -0 1.85 -p -1.41 -0 1.41 
-p -1.85 -0 0.76 -p -3.69 -0 1.53 -p -2.83 -0 2.83 -p -1.41 -0 1.41 -p -1.85 -0 0.76 -p -2 0 -0 -p -4 0 -0 -p -3.69 -0 1.53 -p -1.85 -0 0.76 -p -2 0 -0 -p -1.85 0 -0.76 
-p -3.69 0 -1.53 -p -4 0 -0 -p -2 0 -0 -p -1.85 0 -0.76 -p -1.41 0 -1.41 -p -2.83 0 -2.83 -p -3.69 0 -1.53 -p -1.85 0 -0.76 -p -1.41 0 -1.41 -p -0.76 0 -1.85 
-p -1.53 0 -3.69 -p -2.83 0 -2.83 -p -1.41 0 -1.41 -p -0.76 0 -1.85 -p -0 0 -2 -p -0 0 -4 -p -1.53 0 -3.69 -p -0.76 0 -1.85 -p -0 0 -2 -p 0.76 0 -1.85 -p 1.53 0 -3.69 
-p -0 0 -4 -p -0 0 -2 -p 0.76 0 -1.85 -p 1.41 0 -1.41 -p 2.83 0 -2.83 -p 1.53 0 -3.69 -p 0.76 0 -1.85 -p 1.41 0 -1.41 -p 1.85 0 -0.76 -p 3.69 0 -1.53 -p 2.83 0 -2.83 
-p 1.41 0 -1.41 -p 1.85 0 -0.76 -p 2 0 -0 -p 4 0 -0 -p 3.69 0 -1.53`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $ColorRangeCtrl;parent $ColorRangeCtrl $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $group;string $joint = `joint -n ($obj + "_jnt")`;}}
global proc cDirections (){
global string $bNormalRDB;global string $bValueRDB;global string $bGroupRDB;global string $tfValueCurveScale;global string $bGroupAndJnt;
string $cSelectNormal = `radioButton -q -select rb_normal`;
string $cValueRDB = `radioButton -q -select rb_value`;
string $cSelectGroupRDB = `radioButton -q -select rb_group`;
string $cSelectGroupAndJnt = `radioButton -q -select rb_joint`;
if ($cSelectNormal){Directions();}
if ($cValueRDB){DirectionsValue();}
if ($cSelectGroupRDB){DirectionsValueGrp();}   
if ($cSelectGroupAndJnt){DirectionsValueGrpJnt();}}
global proc Directions(){
string $DirectionsCtrl = `curve -n "Directions" -d 1 -p 0 0 0 -p 0 2.4 -2.4 -p 0 2.4 -1.6 -p 0 4.8 -1.6 -p 0 4.8 1.6 -p 0 2.4 1.6 -p 0 2.4 2.4 -p 0 0 0`;}
global proc DirectionsValue(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
string $nameCtrl = $obj + "_Ctrl";float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $DirectionsCtrl = `curve -n $nameCtrl -d 1 -p 0 0 0 -p 0 2.4 -2.4 -p 0 2.4 -1.6 -p 0 4.8 -1.6 -p 0 4.8 1.6 -p 0 2.4 1.6 -p 0 2.4 2.4 -p 0 0 0`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $DirectionsCtrl;
setAttr ($DirectionsCtrl + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $DirectionsCtrl;}}
global proc DirectionsValueGrp(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $nameGroup = $obj + "_grp";string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $DirectionsCtrl = `curve -n $nameCtrl -d 1 -p 0 0 0 -p 0 2.4 -2.4 -p 0 2.4 -1.6 -p 0 4.8 -1.6 -p 0 4.8 1.6 -p 0 2.4 1.6 -p 0 2.4 2.4 -p 0 0 0`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $DirectionsCtrl;parent $DirectionsCtrl $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);makeIdentity -apply true -s 1 -n 0 -pn 1 $group;}}
global proc DirectionsValueGrpJnt(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;string $nameGroup = $obj + "_grp";string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $DirectionsCtrl = `curve -n $nameCtrl -d 1 -p 0 0 0 -p 0 2.4 -2.4 -p 0 2.4 -1.6 -p 0 4.8 -1.6 -p 0 4.8 1.6 -p 0 2.4 1.6 -p 0 2.4 2.4 -p 0 0 0`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $DirectionsCtrl;parent $DirectionsCtrl $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $group;string $joint = `joint -n ($obj + "_jnt")`;}}
global proc cBody (){
global string $bNormalRDB;global string $bValueRDB;global string $bGroupRDB;global string $tfValueCurveScale;global string $bGroupAndJnt;
string $cSelectNormal = `radioButton -q -select rb_normal`;
string $cValueRDB = `radioButton -q -select rb_value`;
string $cSelectGroupRDB = `radioButton -q -select rb_group`;
string $cSelectGroupAndJnt = `radioButton -q -select rb_joint`;
if ($cSelectNormal){Body();}
if ($cValueRDB){BodyValue();}
if ($cSelectGroupRDB){BodyValueGrp();}   
if ($cSelectGroupAndJnt){BodyValueGrpJnt();}}
global proc Body(){
string $BodyCtrl = `curve -n "Directions4" -d 1 -p -3.14 -0 0.62 -p -4 0 0.8 -p -4 0 1.6 -p -5.6 0 0 -p -4 0 -1.6 -p -4 0 -0.8 -p -3.14 0 -0.62 
-p -2.95 0 -1.22 -p -2.66 0 -1.78 -p -2.26 0 -2.26 -p -1.78 0 -2.66 -p -1.22 0 -2.95 -p -0.62 0 -3.14 -p -0.8 0 -4 -p -1.6 0 -4 -p 0 0 -5.6 
-p 1.6 0 -4 -p 0.8 0 -4 -p 0.62 0 -3.14 -p 1.22 0 -2.95 -p 1.78 0 -2.66 -p 2.26 0 -2.26 -p 2.66 0 -1.78 -p 2.95 0 -1.22 -p 3.14 0 -0.62 
-p 4 0 -0.8 -p 4 0 -1.6 -p 5.6 0 0 -p 4 0 1.6 -p 4 0 0.8 -p 3.14 -0 0.62 -p 2.95 -0 1.22 -p 2.66 -0 1.78 -p 2.26 -0 2.26 -p 1.78 -0 2.66 
-p 1.22 -0 2.95 -p 0.62 -0 3.14 -p 0.8 0 4 -p 1.6 0 4 -p 0 0 5.6 -p -1.6 0 4 -p -0.8 0 4 
-p -0.62 -0 3.14 -p -1.22 -0 2.95 -p -1.78 -0 2.66 -p -2.26 -0 2.26 -p -2.66 -0 1.78 -p -2.95 -0 1.22 -p -3.14 -0 0.62`;}
global proc BodyValue(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
string $nameCtrl = $obj + "_Ctrl";float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $BodyCtrl = `curve -n $nameCtrl -d 1 -p -3.14 -0 0.62 -p -4 0 0.8 -p -4 0 1.6 -p -5.6 0 0 -p -4 0 -1.6 -p -4 0 -0.8 -p -3.14 0 -0.62 
-p -2.95 0 -1.22 -p -2.66 0 -1.78 -p -2.26 0 -2.26 -p -1.78 0 -2.66 -p -1.22 0 -2.95 -p -0.62 0 -3.14 -p -0.8 0 -4 -p -1.6 0 -4 -p 0 0 -5.6 
-p 1.6 0 -4 -p 0.8 0 -4 -p 0.62 0 -3.14 -p 1.22 0 -2.95 -p 1.78 0 -2.66 -p 2.26 0 -2.26 -p 2.66 0 -1.78 -p 2.95 0 -1.22 -p 3.14 0 -0.62 
-p 4 0 -0.8 -p 4 0 -1.6 -p 5.6 0 0 -p 4 0 1.6 -p 4 0 0.8 -p 3.14 -0 0.62 -p 2.95 -0 1.22 -p 2.66 -0 1.78 -p 2.26 -0 2.26 -p 1.78 -0 2.66 
-p 1.22 -0 2.95 -p 0.62 -0 3.14 -p 0.8 0 4 -p 1.6 0 4 -p 0 0 5.6 -p -1.6 0 4 -p -0.8 0 4 
-p -0.62 -0 3.14 -p -1.22 -0 2.95 -p -1.78 -0 2.66 -p -2.26 -0 2.26 -p -2.66 -0 1.78 -p -2.95 -0 1.22 -p -3.14 -0 0.62`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $BodyCtrl;
setAttr ($BodyCtrl + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $BodyCtrl;}}
global proc BodyValueGrp(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $nameGroup = $obj + "_grp";string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $BodyCtrl = `curve -n $nameCtrl -d 1 -p -3.14 -0 0.62 -p -4 0 0.8 -p -4 0 1.6 -p -5.6 0 0 -p -4 0 -1.6 -p -4 0 -0.8 -p -3.14 0 -0.62 
-p -2.95 0 -1.22 -p -2.66 0 -1.78 -p -2.26 0 -2.26 -p -1.78 0 -2.66 -p -1.22 0 -2.95 -p -0.62 0 -3.14 -p -0.8 0 -4 -p -1.6 0 -4 -p 0 0 -5.6 
-p 1.6 0 -4 -p 0.8 0 -4 -p 0.62 0 -3.14 -p 1.22 0 -2.95 -p 1.78 0 -2.66 -p 2.26 0 -2.26 -p 2.66 0 -1.78 -p 2.95 0 -1.22 -p 3.14 0 -0.62 
-p 4 0 -0.8 -p 4 0 -1.6 -p 5.6 0 0 -p 4 0 1.6 -p 4 0 0.8 -p 3.14 -0 0.62 -p 2.95 -0 1.22 -p 2.66 -0 1.78 -p 2.26 -0 2.26 -p 1.78 -0 2.66 
-p 1.22 -0 2.95 -p 0.62 -0 3.14 -p 0.8 0 4 -p 1.6 0 4 -p 0 0 5.6 -p -1.6 0 4 -p -0.8 0 4 
-p -0.62 -0 3.14 -p -1.22 -0 2.95 -p -1.78 -0 2.66 -p -2.26 -0 2.26 -p -2.66 -0 1.78 -p -2.95 -0 1.22 -p -3.14 -0 0.62`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $BodyCtrl;parent $BodyCtrl $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);makeIdentity -apply true -s 1 -n 0 -pn 1 $group;}}
global proc BodyValueGrpJnt(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;string $nameGroup = $obj + "_grp";string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $BodyCtrl = `curve -n $nameCtrl -d 1 -p -3.14 -0 0.62 -p -4 0 0.8 -p -4 0 1.6 -p -5.6 0 0 -p -4 0 -1.6 -p -4 0 -0.8 -p -3.14 0 -0.62 
-p -2.95 0 -1.22 -p -2.66 0 -1.78 -p -2.26 0 -2.26 -p -1.78 0 -2.66 -p -1.22 0 -2.95 -p -0.62 0 -3.14 -p -0.8 0 -4 -p -1.6 0 -4 -p 0 0 -5.6 
-p 1.6 0 -4 -p 0.8 0 -4 -p 0.62 0 -3.14 -p 1.22 0 -2.95 -p 1.78 0 -2.66 -p 2.26 0 -2.26 -p 2.66 0 -1.78 -p 2.95 0 -1.22 -p 3.14 0 -0.62 
-p 4 0 -0.8 -p 4 0 -1.6 -p 5.6 0 0 -p 4 0 1.6 -p 4 0 0.8 -p 3.14 -0 0.62 -p 2.95 -0 1.22 -p 2.66 -0 1.78 -p 2.26 -0 2.26 -p 1.78 -0 2.66 
-p 1.22 -0 2.95 -p 0.62 -0 3.14 -p 0.8 0 4 -p 1.6 0 4 -p 0 0 5.6 -p -1.6 0 4 -p -0.8 0 4 
-p -0.62 -0 3.14 -p -1.22 -0 2.95 -p -1.78 -0 2.66 -p -2.26 -0 2.26 -p -2.66 -0 1.78 -p -2.95 -0 1.22 -p -3.14 -0 0.62`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $BodyCtrl;parent $BodyCtrl $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $group;string $joint = `joint -n ($obj + "_jnt")`;}}
global proc cLockCircle (){
global string $bNormalRDB;global string $bValueRDB;global string $bGroupRDB;global string $tfValueCurveScale;global string $bGroupAndJnt;
string $cSelectNormal = `radioButton -q -select rb_normal`;
string $cValueRDB = `radioButton -q -select rb_value`;
string $cSelectGroupRDB = `radioButton -q -select rb_group`;
string $cSelectGroupAndJnt = `radioButton -q -select rb_joint`;
if ($cSelectNormal){LockCircle();}
if ($cValueRDB){LockCircleValue();}
if ($cSelectGroupRDB){LockCircleValueGrp();}   
if ($cSelectGroupAndJnt){LockCircleValueGrpJnt();}}
global proc LockCircle(){
string $LockCircleCtrl = `curve -n "LockCircle" -d 1 -p 0 0 0 -p 0 5.6 0 -p 0.21 5.63 0 -p 0.4 5.71 0 -p 0.57 5.83 0 -p 0.69 6 0 -p 0.77 6.19 0 -p 0.8 6.4 0 
-p 0 6.4 0 -p 0 5.6 0 -p -0.21 5.63 0 -p -0.4 5.71 0 -p -0.57 5.83 0 -p -0.69 6 0 -p -0.77 6.19 0 -p -0.8 6.4 0 -p -0.77 6.61 0 -p -0.69 6.8 0 
-p -0.57 6.97 0 -p -0.4 7.09 0 -p -0.21 7.17 0 -p 0 7.2 0 -p 0.21 7.17 0 -p 0.4 7.09 0 -p 0.57 6.97 0 -p 0.69 6.8 0 -p 0.77 6.61 0 -p 0.8 6.4 0 
-p -0.8 6.4 0 -p 0 6.4 0 -p 0 7.2 0`;}
global proc LockCircleValue(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
string $nameCtrl = $obj + "_Ctrl";float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $LockCircleCtrl = `curve -n $nameCtrl -d 1 -p 0 0 0 -p 0 5.6 0 -p 0.21 5.63 0 -p 0.4 5.71 0 -p 0.57 5.83 0 -p 0.69 6 0 -p 0.77 6.19 0 -p 0.8 6.4 0 
-p 0 6.4 0 -p 0 5.6 0 -p -0.21 5.63 0 -p -0.4 5.71 0 -p -0.57 5.83 0 -p -0.69 6 0 -p -0.77 6.19 0 -p -0.8 6.4 0 -p -0.77 6.61 0 -p -0.69 6.8 0 
-p -0.57 6.97 0 -p -0.4 7.09 0 -p -0.21 7.17 0 -p 0 7.2 0 -p 0.21 7.17 0 -p 0.4 7.09 0 -p 0.57 6.97 0 -p 0.69 6.8 0 -p 0.77 6.61 0 -p 0.8 6.4 0 
-p -0.8 6.4 0 -p 0 6.4 0 -p 0 7.2 0`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $LockCircleCtrl;
setAttr ($LockCircleCtrl + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $LockCircleCtrl;}}
global proc LockCircleValueGrp(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $nameGroup = $obj + "_grp";string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $LockCircleCtrl = `curve -n $nameCtrl -d 1 -p 0 0 0 -p 0 5.6 0 -p 0.21 5.63 0 -p 0.4 5.71 0 -p 0.57 5.83 0 -p 0.69 6 0 -p 0.77 6.19 0 -p 0.8 6.4 0 
-p 0 6.4 0 -p 0 5.6 0 -p -0.21 5.63 0 -p -0.4 5.71 0 -p -0.57 5.83 0 -p -0.69 6 0 -p -0.77 6.19 0 -p -0.8 6.4 0 -p -0.77 6.61 0 -p -0.69 6.8 0 
-p -0.57 6.97 0 -p -0.4 7.09 0 -p -0.21 7.17 0 -p 0 7.2 0 -p 0.21 7.17 0 -p 0.4 7.09 0 -p 0.57 6.97 0 -p 0.69 6.8 0 -p 0.77 6.61 0 -p 0.8 6.4 0 
-p -0.8 6.4 0 -p 0 6.4 0 -p 0 7.2 0`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $LockCircleCtrl;parent $LockCircleCtrl $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);makeIdentity -apply true -s 1 -n 0 -pn 1 $group;}}
global proc LockCircleValueGrpJnt(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;string $nameGroup = $obj + "_grp";string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $LockCircleCtrl = `curve -n $nameCtrl -d 1 -p 0 0 0 -p 0 5.6 0 -p 0.21 5.63 0 -p 0.4 5.71 0 -p 0.57 5.83 0 -p 0.69 6 0 -p 0.77 6.19 0 -p 0.8 6.4 0 
-p 0 6.4 0 -p 0 5.6 0 -p -0.21 5.63 0 -p -0.4 5.71 0 -p -0.57 5.83 0 -p -0.69 6 0 -p -0.77 6.19 0 -p -0.8 6.4 0 -p -0.77 6.61 0 -p -0.69 6.8 0 
-p -0.57 6.97 0 -p -0.4 7.09 0 -p -0.21 7.17 0 -p 0 7.2 0 -p 0.21 7.17 0 -p 0.4 7.09 0 -p 0.57 6.97 0 -p 0.69 6.8 0 -p 0.77 6.61 0 -p 0.8 6.4 0 
-p -0.8 6.4 0 -p 0 6.4 0 -p 0 7.2 0`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $LockCircleCtrl;parent $LockCircleCtrl $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $group;string $joint = `joint -n ($obj + "_jnt")`;}}
global proc cLockSquare (){
	global string $bNormalRDB;
	global string $bValueRDB;
	global string $bGroupRDB;
	global string $tfValueCurveScale;
	global string $bGroupAndJnt;

	string $cSelectNormal = `radioButton -q -select rb_normal`;
	string $cValueRDB = `radioButton -q -select rb_value`;
	string $cSelectGroupRDB = `radioButton -q -select rb_group`;
	string $cSelectGroupAndJnt = `radioButton -q -select rb_joint`;

	if ($cSelectNormal){
		LockSquare();}
	if ($cValueRDB){
		LockSquareValue();}
	if ($cSelectGroupRDB){
		LockSquareValueGrp();}   
	if ($cSelectGroupAndJnt){
		LockSquareValueGrpJnt();}
		}

global proc LockSquare(){
string $LockSquareCtrl = `curve -n "LockSquare" -d 1 -p 0 0 0 -p -0 5.6 -0 -p -0.7 5.6 -0 -p -0.7 7 -0 -p 0.7 7 -0 -p 0.7 5.6 -0 -p -0 5.6 -0`;}
global proc LockSquareValue(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
string $nameCtrl = $obj + "_Ctrl";float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $LockSquareCtrl = `curve -n $nameCtrl -d 1 -p 0 0 0 -p -0 5.6 -0 -p -0.7 5.6 -0 -p -0.7 7 -0 -p 0.7 7 -0 -p 0.7 5.6 -0 -p -0 5.6 -0`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $LockSquareCtrl;
setAttr ($LockSquareCtrl + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $LockSquareCtrl;}}
global proc LockSquareValueGrp(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $nameGroup = $obj + "_grp";string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $LockSquareCtrl = `curve -n $nameCtrl -d 1 -p 0 0 0 -p -0 5.6 -0 -p -0.7 5.6 -0 -p -0.7 7 -0 -p 0.7 7 -0 -p 0.7 5.6 -0 -p -0 5.6 -0`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $LockSquareCtrl;parent $LockSquareCtrl $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);makeIdentity -apply true -s 1 -n 0 -pn 1 $group;}}
global proc LockSquareValueGrpJnt(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;string $nameGroup = $obj + "_grp";string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $LockSquareCtrl = `curve -n $nameCtrl -d 1 -p 0 0 0 -p -0 5.6 -0 -p -0.7 5.6 -0 -p -0.7 7 -0 -p 0.7 7 -0 -p 0.7 5.6 -0 -p -0 5.6 -0`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $LockSquareCtrl;parent $LockSquareCtrl $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $group;string $joint = `joint -n ($obj + "_jnt")`;}}
global proc cSquare (){
global string $bNormalRDB;global string $bValueRDB;global string $bGroupRDB;global string $tfValueCurveScale;global string $bGroupAndJnt;
string $cSelectNormal = `radioButton -q -select rb_normal`;
string $cValueRDB = `radioButton -q -select rb_value`;
string $cSelectGroupRDB = `radioButton -q -select rb_group`;
string $cSelectGroupAndJnt = `radioButton -q -select rb_joint`;
if ($cSelectNormal){Square();}
if ($cValueRDB){SquareValue();}
if ($cSelectGroupRDB){SquareValueGrp();}   
if ($cSelectGroupAndJnt){SquareValueGrpJnt();}}
global proc Square(){
string $SquareCtrl = `curve -n "Square" -d 1 -p 1 0 -1 -p -1 0 -1 -p -1 0 1 -p 1 0 1 -p 1 0 -1`;}
global proc SquareValue(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
string $nameCtrl = $obj + "_Ctrl";float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $SquareCtrl = `curve -n $nameCtrl -d 1 -p 1 0 -1 -p -1 0 -1 -p -1 0 1 -p 1 0 1 -p 1 0 -1`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $SquareCtrl;
setAttr ($SquareCtrl + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $SquareCtrl;}}
global proc SquareValueGrp(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;
string $nameGroup = $obj + "_grp";string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $SquareCtrl = `curve -n $nameCtrl -d 1 -p 1 0 -1 -p -1 0 -1 -p -1 0 1 -p 1 0 1 -p 1 0 -1`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $SquareCtrl;parent $SquareCtrl $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);makeIdentity -apply true -s 1 -n 0 -pn 1 $group;}}
global proc SquareValueGrpJnt(){
global string $tfValueCurveScale;string $selected[] = `ls -sl`;
float $scale_value = `textField -q -tx value_scale_customeCurve`;
for ($obj in $selected){
float $pivot_position[] = `xform -ws -q -rotatePivot $obj`;string $nameGroup = $obj + "_grp";string $group = `group -n $nameGroup -empty`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $group;string $nameCtrl = $obj + "_Ctrl";
string $SquareCtrl = `curve -n $nameCtrl -d 1 -p 1 0 -1 -p -1 0 -1 -p -1 0 1 -p 1 0 1 -p 1 0 -1`;
xform -ws -t ($pivot_position[0]) ($pivot_position[1]) ($pivot_position[2]) $SquareCtrl;parent $SquareCtrl $group;
setAttr ($group + ".scale") -type double3 (1 * $scale_value)(1 * $scale_value)(1 * $scale_value);
makeIdentity -apply true -s 1 -n 0 -pn 1 $group;string $joint = `joint -n ($obj + "_jnt")`;}}
global proc cFaceCtrl (){float $scale_value = 0.2;
string $groupScaleBox = `group -empty -n "ScaleGrp"`;string $groupMainFace = `group -empty -n "Main_Grp"`;
string $groupEyeR = `group -empty -n "EyeR_grp"`;string $groupEyeL = `group -empty -n "EyeL_grp"`;
string $groupBrowR = `group -empty -n "BrowR_grp"`;string $groupBrowL = `group -empty -n "BrowL_grp"`;
string $groupCheckR = `group -empty -n "CheckR_grp"`;string $groupCheckL = `group -empty -n "CheckL_grp"`;
string $groupMouth = `group -empty -n "Mouth_grp"`;
string $mainFaceCur = `curve -n "MainFace" -d 1 -p 0 0 -11 -p 6 0 -11 -p 6 0 12 -p -6 0 12 -p -6 0 -11 -p 0 0 -11`;
rename |MainFace|curveShape1 "MainFaceShapes" ;setAttr "MainFaceShapes.overrideEnabled" 1;setAttr "MainFaceShapes.overrideColor" 18;
string $browLineR = `curve -n "BrowLineR" -d 1 -p 2 0 -2 -p 2 0 2 -p -2 0 2 -p -2 0 -2 -p 2 0 -2`;rename |BrowLineR|curveShape1 "BrowLineRShapes" ;
string $browLineL = `curve -n "BrowLineL" -d 1 -p 2 0 -2 -p 2 0 2 -p -2 0 2 -p -2 0 -2 -p 2 0 -2`;rename |BrowLineL|curveShape1 "BrowLineLShapes" ;
string $eyeLineR = `curve -n "EyeLineR" -d 1 -p 2 0 -2 -p 2 0 2 -p -2 0 2 -p -2 0 -2 -p 2 0 -2`;rename |EyeLineR|curveShape1 "EyeLineRShapes" ;
string $eyeLineL = `curve -n "EyeLineL" -d 1 -p 2 0 -2 -p 2 0 2 -p -2 0 2 -p -2 0 -2 -p 2 0 -2`;rename |EyeLineL|curveShape1 "EyeLineLShapes" ;
string $checkLineR = `curve -n "CheckLineR" -d 1 -p 2 0 -2 -p 2 0 2 -p -2 0 2 -p -2 0 -2 -p 2 0 -2`;rename |CheckLineR|curveShape1 "CheckLineRShapes" ;
string $checkLineL = `curve -n "CheckLineL" -d 1 -p 2 0 -2 -p 2 0 2 -p -2 0 2 -p -2 0 -2 -p 2 0 -2`;rename |CheckLineL|curveShape1 "CheckLineLShapes" ;
string $functionsFace = `curve -n "FunctionsLineFace" -d 1 -p -5 0 -0.63 -p 5 0 -0.63 -p 5 0 0.63 -p -5 0 0.63 -p -5 0 -0.63`;rename |FunctionsLineFace|curveShape1 "FunctionsLineFaceShapes" ;
setAttr "FunctionsLineFaceShapes.overrideEnabled" 1;setAttr "FunctionsLineFaceShapes.overrideColor" 14;
string $mouthLine = `curve -n "MouthLine" -d 1 -p -4 0 -2.5 -p 4 0 -2.5 -p 4 0 2.5 -p -4 0 2.5 -p -4 0 -2.5`;rename |MouthLine|curveShape1 "MouthShapes" ;
string $browRCur = `curve -n "Brow_R" -d 1 -p 0 0 -1 -p -1 0 0 -p 0 0 1 -p 1 0 0 -p 0 0 -1`; 
rename |Brow_R|curveShape1 "Brow_RShapes" ;setAttr "Brow_RShapes.overrideEnabled" 1;setAttr "Brow_RShapes.overrideColor" 17;
string $browLCur = `curve -n "Brow_L" -d 1 -p 0 0 -1 -p -1 0 0 -p 0 0 1 -p 1 0 0 -p 0 0 -1`; 
rename |Brow_L|curveShape1 "Brow_LShapes" ;setAttr "Brow_LShapes.overrideEnabled" 1;setAttr "Brow_LShapes.overrideColor" 17;
string $eyeRCur = `curve -n "Eye_R" -d 1 -p 0 0 -1 -p -1 0 0 -p 0 0 1 -p 1 0 0 -p 0 0 -1`; 
rename |Eye_R|curveShape1 "Eye_RShapes" ;setAttr "Eye_RShapes.overrideEnabled" 1;setAttr "Eye_RShapes.overrideColor" 17;
string $eyeLCur = `curve -n "Eye_L" -d 1 -p 0 0 -1 -p -1 0 0 -p 0 0 1 -p 1 0 0 -p 0 0 -1`; 
rename |Eye_L|curveShape1 "Eye_LShapes" ;setAttr "Eye_LShapes.overrideEnabled" 1;setAttr "Eye_LShapes.overrideColor" 17;
string $checkRCur = `curve -n "Check_R" -d 1 -p 0 0 -1 -p -1 0 0 -p 0 0 1 -p 1 0 0 -p 0 0 -1`; 
rename |Check_R|curveShape1 "Check_RShapes" ;setAttr "Check_RShapes.overrideEnabled" 1;setAttr "Check_RShapes.overrideColor" 17;
string $checkLCur = `curve -n "Check_L" -d 1 -p 0 0 -1 -p -1 0 0 -p 0 0 1 -p 1 0 0 -p 0 0 -1`; 
rename |Check_L|curveShape1 "Check_LShapes" ;setAttr "Check_LShapes.overrideEnabled" 1;setAttr "Check_LShapes.overrideColor" 17;
string $mouthCur = `curve -n "Mouth" -d 1 -p 0 0 -1 -p -1 0 0 -p 0 0 1 -p 1 0 0 -p 0 0 -1`; 
rename |Mouth|curveShape1 "MouthCurShapes" ;setAttr "MouthCurShapes.overrideEnabled" 1;setAttr "MouthCurShapes.overrideColor" 17;
parent $browRCur $groupBrowR;parent $browLCur $groupBrowL;parent $eyeRCur $groupEyeR;parent $eyeLCur $groupEyeL;
parent $checkRCur $groupCheckR;parent $checkLCur $groupCheckL;parent $mouthCur $groupMouth;
parent $groupBrowR $browLineR;parent $groupBrowL $browLineL;parent $groupEyeR $eyeLineR;parent $groupEyeL $eyeLineL;
parent $groupCheckL $checkLineL;parent $groupCheckR $checkLineR;parent $groupMouth $mouthLine;parent $functionsFace $mainFaceCur;
parent $browLineR $mainFaceCur;parent $browLineL $mainFaceCur;parent $eyeLineR $mainFaceCur;parent $eyeLineL $mainFaceCur;
parent $checkLineL $mainFaceCur;parent $checkLineR $mainFaceCur;parent $mouthLine $mainFaceCur;parent $mainFaceCur $groupScaleBox;parent $groupScaleBox $groupMainFace;
setAttr "BrowLineR.translateX" -3 ;setAttr "BrowLineR.translateZ" -8 ;setAttr "BrowLineL.translateX" 3 ;setAttr "BrowLineL.translateZ" -8 ;
setAttr "EyeLineR.translateX" -3 ;setAttr "EyeLineR.translateZ" -3 ;setAttr "EyeLineL.translateX" 3 ;setAttr "EyeLineL.translateZ" -3 ; ;
setAttr "CheckLineL.translateX" 3 ;setAttr "CheckLineL.translateZ" 2 ;setAttr "CheckLineR.translateX" -3 ;setAttr "CheckLineR.translateZ" 2 ;
setAttr "MouthLine.translateZ" 9 ;setAttr "FunctionsLineFace.translateZ" 5.25 ;setAttr ($groupMainFace + ".rotateX") 90;setAttr "Mouth_grp.translateZ" -2.5; 
setAttr -lock true -keyable false -channelBox false "FunctionsLineFace.tx";setAttr -lock true -keyable false -channelBox false "FunctionsLineFace.ty";
setAttr -lock true -keyable false -channelBox false "FunctionsLineFace.tz";setAttr -lock true -keyable false -channelBox false "FunctionsLineFace.rx";
setAttr -lock true -keyable false -channelBox false "FunctionsLineFace.ry";setAttr -lock true -keyable false -channelBox false "FunctionsLineFace.rz";
setAttr -lock true -keyable false -channelBox false "FunctionsLineFace.sx";setAttr -lock true -keyable false -channelBox false "FunctionsLineFace.sy";
setAttr -lock true -keyable false -channelBox false "FunctionsLineFace.sz";setAttr -lock true -keyable false -channelBox false "FunctionsLineFace.visibility";
setAttr -lock true -keyable false -channelBox false "Mouth.ty";setAttr -lock true -keyable false -channelBox false "Check_R.ty";setAttr -lock true -keyable false -channelBox false "Eye_L.ty";setAttr -lock true -keyable false -channelBox false "Brow_L.ty";
setAttr -lock true -keyable false -channelBox false "Brow_R.ty";setAttr -lock true -keyable false -channelBox false "Eye_R.ty";setAttr -lock true -keyable false -channelBox false "Check_L.ty";setAttr -lock true -keyable false -channelBox false "Mouth.rx";
setAttr -lock true -keyable false -channelBox false "Check_R.rx";setAttr -lock true -keyable false -channelBox false "Eye_L.rx";setAttr -lock true -keyable false -channelBox false "Brow_L.rx";setAttr -lock true -keyable false -channelBox false "Brow_R.rx";
setAttr -lock true -keyable false -channelBox false "Eye_R.rx";setAttr -lock true -keyable false -channelBox false "Check_L.rx";setAttr -lock true -keyable false -channelBox false "Mouth.ry";setAttr -lock true -keyable false -channelBox false "Check_R.ry";
setAttr -lock true -keyable false -channelBox false "Eye_L.ry";setAttr -lock true -keyable false -channelBox false "Brow_L.ry";setAttr -lock true -keyable false -channelBox false "Brow_R.ry";setAttr -lock true -keyable false -channelBox false "Eye_R.ry";
setAttr -lock true -keyable false -channelBox false "Check_L.ry";setAttr -lock true -keyable false -channelBox false "Mouth.rz";setAttr -lock true -keyable false -channelBox false "Check_R.rz";setAttr -lock true -keyable false -channelBox false "Eye_L.rz";
setAttr -lock true -keyable false -channelBox false "Brow_L.rz";setAttr -lock true -keyable false -channelBox false "Brow_R.rz";setAttr -lock true -keyable false -channelBox false "Eye_R.rz";setAttr -lock true -keyable false -channelBox false "Check_L.rz";
setAttr -lock true -keyable false -channelBox false "Mouth.sx";setAttr -lock true -keyable false -channelBox false "Check_R.sx";setAttr -lock true -keyable false -channelBox false "Eye_L.sx";setAttr -lock true -keyable false -channelBox false "Brow_L.sx";
setAttr -lock true -keyable false -channelBox false "Brow_R.sx";setAttr -lock true -keyable false -channelBox false "Eye_R.sx";setAttr -lock true -keyable false -channelBox false "Check_L.sx";setAttr -lock true -keyable false -channelBox false "Mouth.sy";
setAttr -lock true -keyable false -channelBox false "Check_R.sy";setAttr -lock true -keyable false -channelBox false "Eye_L.sy";setAttr -lock true -keyable false -channelBox false "Brow_L.sy";setAttr -lock true -keyable false -channelBox false "Brow_R.sy";
setAttr -lock true -keyable false -channelBox false "Eye_R.sy";setAttr -lock true -keyable false -channelBox false "Check_L.sy";setAttr -lock true -keyable false -channelBox false "Mouth.sz";setAttr -lock true -keyable false -channelBox false "Check_R.sz";
setAttr -lock true -keyable false -channelBox false "Eye_L.sz";setAttr -lock true -keyable false -channelBox false "Brow_L.sz";setAttr -lock true -keyable false -channelBox false "Brow_R.sz";setAttr -lock true -keyable false -channelBox false "Eye_R.sz";
setAttr -lock true -keyable false -channelBox false "Check_L.sz";setAttr -lock true -keyable false -channelBox false "Mouth.v";setAttr -lock true -keyable false -channelBox false "Check_R.v";setAttr -lock true -keyable false -channelBox false "Eye_L.v";
setAttr -lock true -keyable false -channelBox false "Brow_L.v";setAttr -lock true -keyable false -channelBox false "Brow_R.v";setAttr -lock true -keyable false -channelBox false "Eye_R.v";setAttr -lock true -keyable false -channelBox false "Check_L.v";
setAttr "MouthShapes.template" 1;setAttr "CheckLineLShapes.template" 1;setAttr "CheckLineRShapes.template" 1;setAttr "EyeLineRShapes.template" 1;setAttr "EyeLineLShapes.template" 1;setAttr "BrowLineLShapes.template" 1;setAttr "BrowLineRShapes.template" 1;
setAttr ($groupScaleBox + ".scale") -type double3 (1*$scale_value)(1*$scale_value)(1*$scale_value);setAttr ($groupScaleBox + ".translateZ") -2.4;
transformLimits -tx -2 2 -etx 1 1 Brow_R;transformLimits -tz -2 2 -etz 1 1 Brow_R;transformLimits -tx -2 2 -etx 1 1 Brow_L;transformLimits -tz -2 2 -etz 1 1 Brow_L;
transformLimits -tx -2 2 -etx 1 1 Eye_R;transformLimits -tz -2 2 -etz 1 1 Eye_R;transformLimits -tx -2 2 -etx 1 1 Eye_L;transformLimits -tz -2 2 -etz 1 1 Eye_L;
transformLimits -tx -2 2 -etx 1 1 Check_L;transformLimits -tz -2 2 -etz 1 1 Check_L;transformLimits -tx -2 2 -etx 1 1 Check_R;transformLimits -tz -2 2 -etz 1 1 Check_R;
transformLimits -tx -4 4 -etx 1 1 Mouth;transformLimits -tz 0 5 -etz 1 1 Mouth;
setAttr -keyable false -channelBox true "MainFace.tx";setAttr -keyable false -channelBox true "MainFace.ty";setAttr -keyable false -channelBox true "MainFace.tz";setAttr -keyable false -channelBox true "MainFace.rx";
setAttr -keyable false -channelBox true "MainFace.ry";setAttr -keyable false -channelBox true "MainFace.rz";setAttr -keyable false -channelBox true "MainFace.sx";setAttr -keyable false -channelBox true "MainFace.sy";
setAttr -keyable false -channelBox true "MainFace.sz";setAttr -keyable false -channelBox true "MainFace.v";setAttr -keyable false -channelBox true "ScaleGrp.tx";setAttr -keyable false -channelBox true "ScaleGrp.ty";
setAttr -keyable false -channelBox true "ScaleGrp.tz";setAttr -keyable false -channelBox true "ScaleGrp.rx";setAttr -keyable false -channelBox true "ScaleGrp.ry";setAttr -keyable false -channelBox true "ScaleGrp.rz";
setAttr -keyable false -channelBox true "ScaleGrp.sx";setAttr -keyable false -channelBox true "ScaleGrp.sy";setAttr -keyable false -channelBox true "ScaleGrp.sz";setAttr -keyable false -channelBox true "ScaleGrp.v";
addAttr -ln "____________________________" -at "enum"  -en "Brow" -dv 0 -keyable true $functionsFace;setAttr -lock true ($functionsFace + ".____________________________") ;
addAttr -ln "Frowning" -at "float" -min 1 -max 10 -keyable true $functionsFace;addAttr -ln "Open_Eye" -at "float" -min 1 -max 10 -keyable true $functionsFace;
addAttr -ln "Angry" -at "float" -min 1 -max 10 -keyable true $functionsFace;addAttr -ln "___________________________" -at "enum"  -en "Eye" -dv 0 -keyable true $functionsFace;
setAttr -lock true ($functionsFace + ".___________________________") ;addAttr -ln "Color_Eye" -at "long" -min 1 -max 20 -keyable true $functionsFace;
addAttr -ln "__________________________" -at "enum"  -en "Mouth" -dv 0 -keyable true $functionsFace;setAttr -lock true ($functionsFace + ".__________________________") ;
addAttr -ln "Smile" -at "float" -min 1 -max 10 -keyable true $functionsFace;addAttr -ln "Sad" -at "float" -min 1 -max 10 -keyable true $functionsFace;
addAttr -ln "Open_Mouth" -at "float" -min 1 -max 10 -keyable true $functionsFace;addAttr -ln "_________________________" -at "enum"  -en "Mouth Shape" -dv 0 -keyable true $functionsFace;
setAttr -lock true ($functionsFace + "._________________________") ;addAttr -ln "Aaaaaa" -at "float" -min 1 -max 10 -keyable true $functionsFace;addAttr -ln "Oooooo" -at "float" -min 1 -max 10 -keyable true $functionsFace;
addAttr -ln "Iiiiii" -at "float" -min 1 -max 10 -keyable true $functionsFace;addAttr -ln "Eeeeee" -at "float" -min 1 -max 10 -keyable true $functionsFace;
addAttr -ln "Mmmmmm" -at "float" -min 1 -max 10 -keyable true $functionsFace;addAttr -ln "Zzzzzz" -at "float" -min 1 -max 10 -keyable true $functionsFace;
addAttr -ln "Blink" -at "float" -min 1 -max 10 -keyable true $eyeRCur;addAttr -ln "Pupil" -at "float" -min 1 -max 10 -keyable true $eyeRCur;
addAttr -ln "Iris" -at "float" -min 1 -max 10 -keyable true $eyeRCur;addAttr -ln "Blink" -at "float" -min 1 -max 10 -keyable true $eyeLCur;
addAttr -ln "Pupil" -at "float" -min 1 -max 10 -keyable true $eyeLCur;addAttr -ln "Iris" -at "float" -min 1 -max 10 -keyable true $eyeLCur;select -cl;}




// change Color curve #####
global proc reFillColorCurve (){string $cSelected[] = `ls -sl`;string $cShapes[];for($obj in $cSelected){string $cShapes[] = `listRelatives -shapes $obj`;for ($shape in $cShapes){setAttr ($shape + ".overrideEnabled") 0;}}}
global proc redColorCurve (){string $cSelected[] = `ls -sl`;string $cShapes[];for($obj in $cSelected){string $cShapes[] = `listRelatives -shapes $obj`;for ($shape in $cShapes){setAttr ($shape + ".overrideEnabled") 1;setAttr ($shape + ".overrideColor") 13;}}}
global proc yellowColorCurve (){string $cSelected[] = `ls -sl`;string $cShapes[];for($obj in $cSelected){string $cShapes[] = `listRelatives -shapes $obj`;for ($shape in $cShapes){setAttr ($shape + ".overrideEnabled") 1;setAttr ($shape + ".overrideColor") 17;}}}
global proc orangeColorCurve (){string $cSelected[] = `ls -sl`;string $cShapes[];for($obj in $cSelected){string $cShapes[] = `listRelatives -shapes $obj`;for ($shape in $cShapes){setAttr ($shape + ".overrideEnabled") 1;setAttr ($shape + ".overrideColor") 21;}}}
global proc pinkColorCurve (){string $cSelected[] = `ls -sl`;string $cShapes[];for($obj in $cSelected){string $cShapes[] = `listRelatives -shapes $obj`;for ($shape in $cShapes){setAttr ($shape + ".overrideEnabled") 1;setAttr ($shape + ".overrideColor") 20;}}}
global proc greenColorCurve (){string $cSelected[] = `ls -sl`;string $cShapes[];for($obj in $cSelected){string $cShapes[] = `listRelatives -shapes $obj`;for ($shape in $cShapes){setAttr ($shape + ".overrideEnabled") 1;setAttr ($shape + ".overrideColor") 14;}}}
global proc whiteColorCurve (){string $cSelected[] = `ls -sl`;string $cShapes[];for($obj in $cSelected){string $cShapes[] = `listRelatives -shapes $obj`;for ($shape in $cShapes){setAttr ($shape + ".overrideEnabled") 1;setAttr ($shape + ".overrideColor") 16;}}}
global proc purpleColorCurve (){string $cSelected[] = `ls -sl`;string $cShapes[];for($obj in $cSelected){string $cShapes[] = `listRelatives -shapes $obj`;for ($shape in $cShapes){setAttr ($shape + ".overrideEnabled") 1;setAttr ($shape + ".overrideColor") 9;}}}
global proc blueColorCurve (){string $cSelected[] = `ls -sl`;string $cShapes[];for($obj in $cSelected){string $cShapes[] = `listRelatives -shapes $obj`;for ($shape in $cShapes){setAttr ($shape + ".overrideEnabled") 1;setAttr ($shape + ".overrideColor") 18;}}}
global proc blueBlackColorCurve (){string $cSelected[] = `ls -sl`;string $cShapes[];for($obj in $cSelected){string $cShapes[] = `listRelatives -shapes $obj`;for ($shape in $cShapes){setAttr ($shape + ".overrideEnabled") 1;setAttr ($shape + ".overrideColor") 6;}}}


// constraint box tools #####
global proc constraintCheckbox() {
	int $translateCheckbox = `checkBox -query -value Translate_checkBox`; 
	int $rotateCheckbox = `checkBox -query -value Rotate_checkBox`;
	int $scaleCheckbox = `checkBox -query -value Scale_checkBox`;
	// checkbox constraint //
		if ($translateCheckbox) {
			constraintTranslate();
			}
		if ($rotateCheckbox) {
			constraintRotate();
			}
		if ($scaleCheckbox) {
			constraintScale();
			}
}
	global proc constraintTranslate() {
		parentConstraint -mo -skipRotate x -skipRotate y -skipRotate z -weight 1;
	}
	global proc constraintRotate() {
		parentConstraint -mo -skipTranslate x -skipTranslate y -skipTranslate z -weight 1;
	}
	global proc constraintScale() {
		scaleConstraint -offset 1 1 1 -weight 1;
	}
	global proc connectiontCheckbox() {
		int $translateCheckbox = `checkBox -query -value Translate_checkBox`;
		int $rotateCheckbox = `checkBox -query -value Rotate_checkBox`;
		int $scaleCheckbox = `checkBox -query -value Scale_checkBox`;
			if ($translateCheckbox) {
				connectTranslate();
			}
			if ($rotateCheckbox) {
				connectRotate();
			}
			if ($scaleCheckbox) {
				connectScale();
			}
	}
	global proc connectTranslate() {
		string $selected[] = `ls -sl`;
		connectAttr -f ($selected[0] + ".translate") ($selected[1] + ".translate");
	}
	global proc connectRotate() {
		string $selected[] = `ls -sl`;
		connectAttr -f ($selected[0] + ".rotate") ($selected[1] + ".rotate");
	}
	global proc connectScale() {
		string $selected[] = `ls -sl`;
		connectAttr -f ($selected[0] + ".scale") ($selected[1] + ".scale");
	}

//////////////////////////////////########### Function  #############////////////////////////////
//////////////////////////////////########### Function  #############////////////////////////////
//////////////////////////////////########### Function  #############////////////////////////////
//////////////////////////////////########### Function  #############////////////////////////////
// auto connect attr ######
    global proc autoConnectAttr(){
        global string $nameAttrOutput;
        global string $nameAttrInput;
        global string $nbSpaceAutoConnectAttr;

        string $nameAttrOutputQr = `textField -q -tx nameAttrOutput`;
        string $nameAttrInputQr = `textField -q -tx nameAttrInput`;
        float $nbSpaceAutoConnectAttrQr = `textField -q -tx nbSpaceAutoConnectAttr`;

        string $select[] = `ls -sl`;
        if(size($select) < 2){
            warning "Please select from 2 object or more !! ";
        }
        if(size($select) >= 2){
            if($nbSpaceAutoConnectAttrQr > 0){
                for ($i = 0; $i < size($select); $i += $nbSpaceAutoConnectAttrQr) {
                    if ($i+1 < size($select)) {
                        string $sourceNode = $select[$i];
                        string $destinationNode = $select[$i+1];
                        connectAttr -f ($sourceNode + "." + $nameAttrOutputQr) ($destinationNode + "." +$nameAttrInputQr);
                    }
                }
            }
            if($nbSpaceAutoConnectAttrQr == 0){
				string $firstObj = $select[0];
					for ($i = 1; $i < size($select); $i ++) {
						string $currentObj = $select[$i];
						connectAttr -f ($firstObj + "." + $nameAttrOutputQr) ($currentObj + "." +$nameAttrInputQr);
            	}
			}
        }
    }
// auto create node ######
    global proc autoCreateNode(){
        global string $rdMenuNode;
        global string $rdTextFieldNode;
        global string $mnNameNode;
        global string $tfNameNode;

        string $rdMenuNodeQr = `radioButton -q -select rdMenuNode`;
        string $rdTextFieldNodeQr = `radioButton -q -select rdTextFieldNode`;
        string $mnNameNodeQr = `optionMenu -q -value mnNameNode`;
        string $tfNameNodeQr = `textField -q -tx tfNameNode`;

        string $select[] = `ls -sl `;
        if(size($select) == 0){
            warning "Please Select Object !!!" ;
        }
        else{
            for ($obj in $select){
                if($rdMenuNodeQr){
                    shadingNode -asUtility -n ($obj + "_" + $mnNameNodeQr) $mnNameNodeQr;refresh;
                }
                if($rdTextFieldNodeQr){
                    shadingNode -asUtility -n ($obj + "_" + $tfNameNodeQr) $tfNameNodeQr;refresh;
                }
            }
        }
    }

// color ex ######
    global proc addAttrNameSDK (){
            global string $typeAttrField;
            global string $minAttrField;global string $maxAttrField;global string $name_attr;

            string $nameAttr = `textField -q -tx name_attr_set_driven_key`;
            string $dtType = `textField -q -tx typeAttrField`;
            float $minV = `textField -q -tx min_value_attribute`;
            float $maxV = `textField -q -tx max_value_attribute`;

            string $selected[] =`ls -sl`;
            for ($obj in $selected){
                addAttr -ln $nameAttr -at $dtType -min $minV -max $maxV -keyable true ;
            }
        }
    global proc ConnectFrameEx(){
        global string $name_attr_ex;
        global string $name_text_ex;
        global string $minAttrField;
        global string $maxAttrField;
        global string $typeAttrField;

        string $fileEXname = `textField -q -tx name_text_set_driven_key`;
        string $ctrlEXname = `textField -q -tx name_attr_set_driven_key`;
        string $typeEXname = `textField -q -tx typeAttrField`;

        float $nMin = `textField -q -tx min_value_attribute`;
        float $nMax = `textField -q -tx max_value_attribute`;

        string $select[] = `ls -sl`;

        if (size($select) == 1){
            if (`objExists $select[0]`){
                if (`attributeExists $ctrlEXname $select[0]`){
                    warning ($ctrlEXname + " dang ton tai kia ! Xoa cai attribute =>>> " + $ctrlEXname + " <<<= cua object dang select di ");}
                else{
                    float $attrEX = `getAttr ($fileEXname + ".useFrameExtension")`;
                    if ($attrEX != 1){
                        setAttr ($fileEXname + ".useFrameExtension") 1;
                    }
                    else{
                        addAttr -ln $ctrlEXname -at $typeEXname -min $nMin -max $nMax -keyable true ($select[0]);
                        connectAttr -f ($select[0] + "." + $ctrlEXname) ($fileEXname + ".frameExtension");
                    }
                }
            }
        }
        else{
            warning "Chon object di !!!";
        }

    }


// move tools dup #####
	global proc button1_select_obj() {
		global string $cSaveTextMove;
		string $selectedMesh[] = `ls -selection -type "transform"`;
		if (size($selectedMesh) > 0) {
			string $cSaveTextMo = `textField -edit -text $selectedMesh[0] save_name_obj_text_field`;
		} 
		else {
			string $cSaveTextMo = `textField -edit -text "" save_name_obj_text_field`;
		}
	}
	global proc button2_move_obj() {
		global string $cSaveTextMove;
		global string $cButtonMove;
		string $cNameObj =`textField -q -tx save_name_obj_text_field`;
		string $targetVertex[] = `ls -selection -flatten`;
		$duplicateMesh = `duplicate -n ($cNameObj + "_d") $cNameObj`;
		float $position[] = `pointPosition -w $targetVertex`;
		move -a $position[0] $position[1] $position[2] $duplicateMesh;
	}

// combine curve #######
	global proc combineCurve (){ 
		parent -r -s;}
	global proc rotationOrder (){
		global string $rotateOderValueTextField;
		float $value = `textField -q -tx rotate_oder_value_textField`;
		string $jointList[]= `listRelatives -type joint -ad`;
		for ($joint in $jointList){
			setAttr ($joint + ".rotateOrder") $value;
		}
	}

// latice rig #####
global proc selectObjLaticeRig (){
	global string $tfSelectMeshLatice;
	string $select[]=`ls -sl`;
	string $tfSelectMeshLaticeStr = `textField -edit -tx $select tf_selectMesh_laticeRig`;
}
global proc createLocLaticeDistanceRig (){
		global string $bMeshLatice;
		global string $bVertexLatice;
		string $bMeshLaticeStr = `radioButton -q -select rb_mesh_laticeRig`;
		string $bVertexLaticeStr = `radioButton -q -select rb_vertex_laticeRig`;
	if ($bMeshLaticeStr){createLocatorForMeshLaticeRig();}
	if ($bVertexLaticeStr){cComfirmDialog();}}
global proc BuildLaticeDistanceRig (){
		global string $bMeshLatice;
		global string $bVertexLatice;
		string $bMeshLaticeStr = `radioButton -q -select rb_mesh_laticeRig`;
		string $bVertexLaticeStr = `radioButton -q -select rb_vertex_laticeRig`;
	if ($bMeshLaticeStr){buildLaticeMeshST();}
	if ($bVertexLaticeStr){cComfirmDialog();}}
	global proc createLocatorForVertexLaticeRig (){
		string $sSelectVertext[] = `ls -sl -flatten`;
		if (size($sSelectVertext) == 0){ warning "Selected Vertex not yet !!!";}
		else{
			spaceLocator -n "LocDistanceLatice" -p 0 0 0 ;
			float $pPositionVertex[] = `pointPosition -w $sSelectVertext`;
			move  -a $pPositionVertex[0] $pPositionVertex[1] $pPositionVertex[2] "LocDistanceLatice";}}
global proc createLocatorForMeshLaticeRig(){
	spaceLocator -n "LocUpDistanceLatice" -p 0 0 0 ;
	spaceLocator -n "LocDownDistanceLatice" -p 0 0 0 ;
	global string $tfSelectMeshLatice;
	string $tfSelectMeshLaticeStr = `textField -q -tx tf_selectMesh_laticeRig`;
	select $tfSelectMeshLaticeStr;CreateLattice;
	rename "ffd1Lattice" "DistanceLattice";
	parent "LocUpDistanceLatice" "DistanceLattice";
	parent "LocDownDistanceLatice" "DistanceLattice";
setAttr "LocDownDistanceLatice.translateZ" 0;setAttr "LocDownDistanceLatice.translateX" 0;setAttr "LocUpDistanceLatice.translateX" 0;
setAttr "LocDownDistanceLatice.translateY" 0;setAttr "LocUpDistanceLatice.translateY" 0;setAttr "LocUpDistanceLatice.translateZ" 0;
parent -w "LocUpDistanceLatice" ;parent  -w "LocDownDistanceLatice";delete "DistanceLattice";setAttr "LocUpDistanceLatice.overrideEnabled" 1;
setAttr "LocUpDistanceLatice.overrideColor" 14;setAttr "LocDownDistanceLatice.overrideEnabled" 1;setAttr "LocDownDistanceLatice.overrideColor" 13;
string $nameLocD1 = $tfSelectMeshLaticeStr + "_DistanceLocUp";string $nameLocD2 = $tfSelectMeshLaticeStr + "_DistanceLocDown";
string $nameDistanceTools = $tfSelectMeshLaticeStr + "_DistanceTools";distanceDimension -sp 0 -1 0 -ep 0 1 0 ;
rename "locator1" $nameLocD1;rename "locator2" $nameLocD2;rename "distanceDimension1" $nameDistanceTools;		
parent $nameLocD1 "LocUpDistanceLatice";setAttr ($nameLocD1 + ".v") 0;parent $nameLocD2 "LocDownDistanceLatice";
setAttr ($nameLocD2 + ".v") 0;setAttr ($nameLocD1 + ".translateY") 0;setAttr ($nameLocD2 + ".translateY") 0;select "LocUpDistanceLatice";}
global proc buildLaticeMeshST (){global string $tfSdivisionsLaticeRig;global string $tfTdivisionsLaticeRig;
global string $tfUdivisionsLaticeRig;global string $tfSelectMeshLatice;
string $tfSelectMeshLaticeStr = `textField -q -tx tf_selectMesh_laticeRig`;float $tfSdivisionsLaticeRigStr = `textField -q -tx tf_S_Divisons_latice_Rig`;
float $tfTdivisionsLaticeRigStr = `textField -q -tx tf_T_Divisons_latice_Rig`;float $tfUdivisionsLaticeRigStr = `textField -q -tx tf_U_Divisons_latice_Rig`;
string $nameLatice = $tfSelectMeshLaticeStr + "_Latice";string $nameLaticeBase = $tfSelectMeshLaticeStr + "_LaticeBase";
string $nameSquash = $tfSelectMeshLaticeStr + "_Squash";string $nameBendFront = $tfSelectMeshLaticeStr + "_BendFront";
string $nameBendRight = $tfSelectMeshLaticeStr + "_BendRight";string $nameTwist = $tfSelectMeshLaticeStr + "_Twist";
string $nameShapeSquash = $tfSelectMeshLaticeStr + "_ShapeSquash";string $nameShapeBendFront = $tfSelectMeshLaticeStr + "_ShapeBendFront";
string $nameShapeBendRight = $tfSelectMeshLaticeStr + "_ShapeBendRight";string $nameShapeTwist = $tfSelectMeshLaticeStr + "_ShapeTwist";
select $tfSelectMeshLaticeStr;CreateLattice;setAttr "ffd1LatticeShape.uDivisions" $tfSdivisionsLaticeRigStr;
setAttr "ffd1LatticeShape.sDivisions" $tfTdivisionsLaticeRigStr;setAttr "ffd1LatticeShape.tDivisions" $tfUdivisionsLaticeRigStr;
rename "ffd1Lattice" $nameLatice;rename "ffd1Base" $nameLaticeBase;Bend;
setAttr "bend1.lowBound" 0;setAttr "bend1.highBound" 2;setAttr "bend1Handle.translateY" 0;select $nameLatice;Bend;
setAttr "bend2.lowBound" 0;setAttr "bend2.highBound" 2;setAttr "bend2Handle.rotateY" 90;setAttr "bend2Handle.translateY" 0;
select $nameLatice;Squash;setAttr "squash1.lowBound" 0;setAttr "squash1.highBound" 2;setAttr "squash1Handle.translateY" 0;
select $nameLatice;Twist;setAttr "twist1.lowBound" 0;setAttr "twist1.highBound" 2;setAttr "twist1Handle.translateY" 0;
rename "bend1Handle" $nameBendRight;rename "bend2Handle" $nameBendFront;rename "squash1Handle" $nameSquash;rename "twist1Handle" $nameTwist;
rename "bend1" $nameShapeBendRight;rename "bend2" $nameShapeBendFront;rename "squash1" $nameShapeSquash;rename "twist1" $nameShapeTwist;
string $nameCtrl = $tfSelectMeshLaticeStr + "_SquashStretch";string $nameGroupMain = $tfSelectMeshLaticeStr + "_Grp";
string $nameCtrlMain = $tfSelectMeshLaticeStr + "_Main";string $nameCtrlCore = $tfSelectMeshLaticeStr + "_Ctrl";string $nameGroupLatice = "";
string $grGroupDeform = `group -n ($tfSelectMeshLaticeStr + "_Deform_Latice_grp") -empty`;
string $circleDCtrl = `curve -n $nameCtrl -d 1 -p 0 1 0 -p 0 0.92 0.38 -p 0 0.71 0.71 -p 0 0.38 0.92 
-p 0 0 1 -p 0 -0.38 0.92 -p 0 -0.71 0.71 -p 0 -0.92 0.38 -p 0 -1 0 
-p 0 -0.92 -0.38 -p 0 -0.71 -0.71 -p 0 -0.38 -0.92 -p 0 0 -1 -p 0 0.38 -0.92 
-p 0 0.71 -0.71 -p 0 0.92 -0.38 -p 0 1 0 -p 0.38 0.92 0 -p 0.71 0.71 0 -p 0.92 0.38 0 
-p 1 0 0 -p 0.92 -0.38 0 -p 0.71 -0.71 0 -p 0.38 -0.92 0 -p 0 -1 0 -p -0.38 -0.92 0 
-p -0.71 -0.71 0 -p -0.92 -0.38 0 -p -1 0 0 -p -0.92 0.38 0 -p -0.71 0.71 0 -p -0.38 0.92 0 
-p 0 1 0 -p 0 0.92 -0.38 -p 0 0.71 -0.71 -p 0 0.38 -0.92 -p 0 0 -1 -p -0.38 0 -0.92 
-p -0.71 0 -0.71 -p -0.92 0 -0.38 -p -1 0 0 -p -0.92 0 0.38 -p -0.71 0 0.71 -p -0.38 0 0.92 
-p 0 0 1 -p 0.38 0 0.92 -p 0.71 0 0.71 -p 0.92 0 0.38 -p 1 0 0 -p 0.92 0 -0.38 -p 0.71 0 -0.71 
-p 0.38 0 -0.92 -p 0 0 -1 `;
rename "curveShape1" ($tfSelectMeshLaticeStr + "D_Deform_Latice_Shape");
addAttr -ln "___________________________" -at "enum" -en "Twist" -keyable true $circleDCtrl;
addAttr -ln "Twist" -at "float" -min 0 -max 10 -dv 10 -keyable true $circleDCtrl;
addAttr -ln "__________________________" -at "enum" -en "Bend" -keyable true $circleDCtrl;
addAttr -ln "CurvatureAhead" -at "float" -min 0 -max 10 -dv 10 -keyable true $circleDCtrl;
addAttr -ln "CurvatureSide" -at "float" -min 0 -max 10 -dv 10 -keyable true $circleDCtrl;
addAttr -ln "_________________________" -at "enum" -en "Squash" -keyable true $circleDCtrl;
addAttr -ln "Squash" -at "float" -min 0 -max 10 -dv 10 -keyable true $circleDCtrl;
setAttr -lock true ($circleDCtrl + ".___________________________");
setAttr ($nameCtrl +".overrideEnabled") 1;
setAttr ($nameCtrl +".overrideColor") 13;
scale 1 1 1 $circleDCtrl;
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 $circleDCtrl;
setAttr ($circleDCtrl + ".dispCV") 1;
setAttr -lock true -keyable false -channelBox false ($nameCtrl + ".sx");
setAttr -lock true -keyable false -channelBox false ($nameCtrl + ".sy");
setAttr -lock true -keyable false -channelBox false ($nameCtrl + ".sz");
setAttr -lock true -keyable false -channelBox false ($nameCtrl + ".v");
parent $circleDCtrl $grGroupDeform;
string $annotationName = $tfSelectMeshLaticeStr + "_Anna";
select $circleDCtrl;
string $annotationText = $tfSelectMeshLaticeStr + "_Controller";		
annotate -tx $annotationText $circleDCtrl;
rename "annotation1" $annotationName;
setAttr ($annotationName + ".template") 1;
group -em -n $nameGroupMain;
circle -nr 0 1 0 -r 3 -n $nameCtrlMain;
circle -nr 0 1 0 -r 2 -n $nameCtrlCore;
parent $nameCtrlCore $nameCtrlMain;
parent $nameCtrlMain $nameGroupMain;
scale 2 2 2 $nameGroupMain;
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 $nameGroupMain;
setAttr ($nameGroupMain +".overrideEnabled") 1;
setAttr ($nameGroupMain +".overrideColor") 17;
parent $grGroupDeform "LocUpDistanceLatice";
parent $nameGroupMain "LocDownDistanceLatice";
setAttr ($grGroupDeform + ".translateZ") 0;
setAttr ($grGroupDeform + ".translateX") 0;
setAttr ($nameGroupMain + ".translateX") 0;
setAttr ($grGroupDeform + ".translateY") 0;
setAttr ($nameGroupMain + ".translateY") 0;
setAttr ($nameGroupMain + ".translateZ") 0;
parent -w $nameGroupMain;parent -w $grGroupDeform;
string $grGroupLaticeHide = `group -n ($tfSelectMeshLaticeStr + "_LaticeHide_grp") -empty`;
string $grGroupDeformHide = `group -n ($tfSelectMeshLaticeStr + "_DeformHide_grp") -empty`;
parent $grGroupLaticeHide "LocDownDistanceLatice";
parent $grGroupDeformHide "LocDownDistanceLatice";
setAttr ($grGroupDeformHide + ".translateZ") 0;
setAttr ($grGroupDeformHide + ".translateX") 0;
setAttr ($grGroupLaticeHide + ".translateX") 0;
setAttr ($grGroupDeformHide + ".translateY") 0;
setAttr ($grGroupLaticeHide + ".translateY") 0;
setAttr ($grGroupLaticeHide + ".translateZ") 0;
parent -w $grGroupDeformHide;parent -w $grGroupLaticeHide;
setAttr ($grGroupDeformHide + ".translateY") 0;
parent $nameBendFront $grGroupDeformHide;
parent $nameBendRight $grGroupDeformHide;
parent $nameSquash $grGroupDeformHide;
parent $nameTwist $grGroupDeformHide;
parent $grGroupDeformHide $nameCtrlCore;
parent $nameLatice $grGroupLaticeHide;
parent $nameLaticeBase $nameGroupMain;
setAttr ($grGroupDeformHide + ".translateY") 0;
parent $grGroupDeform $nameCtrlCore;
parent $grGroupLaticeHide $nameCtrlCore;
string $namejoint1 = $tfSelectMeshLaticeStr + "_jntLatice";
string $namejoint2 = $tfSelectMeshLaticeStr + "_jntFunctions";
string $namejoint3 = $tfSelectMeshLaticeStr + "_jntHide";
string $namejoint4 = $tfSelectMeshLaticeStr + "_jntMissions";
string $joint1 = `joint -n $namejoint1`;
string $joint2 = `joint -n $namejoint2`;
string $joint3 = `joint -n $namejoint3`;
string $joint4 = `joint -n $namejoint4`;
setAttr -keyable false -channelBox true ($nameCtrl + ".v");
setAttr ($grGroupDeformHide + ".visibility") 0;
setAttr ($nameLaticeBase + ".visibility") 0;
setAttr ($grGroupLaticeHide + ".visibility") 0;
string $grGroupMissionsName = $tfSelectMeshLaticeStr + "mission_group";
string $grGroupDistanceName = $tfSelectMeshLaticeStr + "Distance_Tools_Grp";
string $grGroupDistance =`group -n $grGroupDistanceName -em`;
string $grGroupMissions =`group -n $grGroupMissionsName -em`;
addAttr -ln "____________________________" -at "enum" -en "Twist" -keyable true $grGroupMissions;
addAttr -ln "TwistEnvelope" -at "float" -min 0 -max 10 -keyable true $grGroupMissions;
addAttr -ln "TwistEndAngle" -at "float" -keyable true $grGroupMissions;
addAttr -ln "___________________________" -at "enum" -en "Bend" -keyable true $grGroupMissions;
addAttr -ln "CurvatureBenF" -at "float" -keyable true $grGroupMissions;
addAttr -ln "CurvatureBenR" -at "float" -keyable true $grGroupMissions;
addAttr -ln "__________________________" -at "enum" -en "Squash" -keyable true $grGroupMissions;
addAttr -ln "FactorSquashF" -at "float" -keyable true $grGroupMissions;
setAttr -lock true ($grGroupMissions + ".____________________________");
setAttr -lock true ($grGroupMissions + ".___________________________");
setAttr -lock true ($grGroupMissions + ".__________________________");
string $grGroupGeo =`group -n ($tfSelectMeshLaticeStr + "_Geo") -em`;
parent $grGroupMissions $nameGroupMain;parent $grGroupGeo $nameGroupMain;
setAttr -lock true -keyable false -channelBox false ($grGroupMissionsName + ".tx");
setAttr -lock true -keyable false -channelBox false ($grGroupMissionsName + ".ty");
setAttr -lock true -keyable false -channelBox false ($grGroupMissionsName + ".tz");
setAttr -lock true -keyable false -channelBox false ($grGroupMissionsName + ".rx");
setAttr -lock true -keyable false -channelBox false ($grGroupMissionsName + ".ry");
setAttr -lock true -keyable false -channelBox false ($grGroupMissionsName + ".rz");
setAttr -lock true -keyable false -channelBox false ($grGroupMissionsName + ".sx");
setAttr -lock true -keyable false -channelBox false ($grGroupMissionsName + ".sy");
setAttr -lock true -keyable false -channelBox false ($grGroupMissionsName + ".sz");
setAttr -lock true -keyable false -channelBox false ($grGroupMissionsName + ".v") 0;
parent "LocUpDistanceLatice" $grGroupMissions;parent "LocDownDistanceLatice" $grGroupMissions;
rename "LocUpDistanceLatice" ($tfSelectMeshLaticeStr + "_Loc_Up_Distance_Latice");
rename "LocDownDistanceLatice" ($tfSelectMeshLaticeStr + "_Loc_Down_Distance_Latice");
rename "ffd1" ($tfSelectMeshLaticeStr + "_ffd1_Latice");
// rename "tweak1" ($tfSelectMeshLaticeStr + "_tweak1_Latice");
string $driver_SquashStretchX = $nameCtrl + ".translateX";string $driver_SquashStretchZ = $nameCtrl + ".translateZ";
string $driver_SquashStretchY = $nameCtrl + ".translateY";string $driver_SquashStretchRtY = $nameCtrl + ".rotateY";
string $driver_SquashStretchTwistEn = $nameCtrl + ".Twist";string $driver_SquashStretchBendF = $nameCtrl + ".CurvatureAhead";
string $driver_SquashStretchBendR = $nameCtrl + ".CurvatureSide";string $driver_SquashStretchSquash = $nameCtrl + ".Squash";
string $driver_missionTwistEn = $grGroupMissionsName + ".TwistEnvelope";string $driver_missionTwistEA = $grGroupMissionsName + ".TwistEndAngle";
string $driver_missionCurvatureBenF = $grGroupMissionsName + ".CurvatureBenF";string $driver_missionCurvatureBenR = $grGroupMissionsName + ".CurvatureBenR";string $driver_missionFactorSquashF = $grGroupMissionsName + ".FactorSquashF";
string $driven_nameBendFront = $nameShapeBendFront + ".curvature";string $driven_nameBendRight = $nameShapeBendRight + ".curvature";
string $driven_nameSquash = $nameShapeSquash + ".factor";string $driven_nameTwist = $nameShapeTwist + ".endAngle";
string $driven_nameTwistEn = $nameShapeTwist +".envelope";string $driven_nameBendFrontEn = $nameShapeBendFront + ".envelope";
string $driven_nameBendRightEn = $nameShapeBendRight + ".envelope";string $driven_nameBendSquashEn = $nameShapeSquash + ".envelope";
// mission //// bend right //
setDrivenKeyframe -currentDriver $driver_missionCurvatureBenR -driverValue 0 -value 0 $driven_nameBendRight;
setDrivenKeyframe -currentDriver $driver_missionCurvatureBenR -driverValue 50 -value 180 $driven_nameBendRight;// bend front //
setDrivenKeyframe -currentDriver $driver_missionCurvatureBenF -driverValue 0 -value 0 $driven_nameBendFront;
setDrivenKeyframe -currentDriver $driver_missionCurvatureBenF -driverValue 50 -value -180 $driven_nameBendFront;// squash //
setDrivenKeyframe -currentDriver $driver_missionFactorSquashF -driverValue 0 -value 0 $driven_nameSquash;
setDrivenKeyframe -currentDriver $driver_missionFactorSquashF -driverValue 100 -value 10 $driven_nameSquash;// twist endAgle //
setDrivenKeyframe -currentDriver $driver_missionTwistEA -driverValue 0 -value 0 $driven_nameTwist;
setDrivenKeyframe -currentDriver $driver_missionTwistEA -driverValue 100 -value -300 $driven_nameTwist;// twist Envelope
setDrivenKeyframe -currentDriver $driver_missionTwistEn -driverValue 0 -value 0 $driven_nameTwistEn;
setDrivenKeyframe -currentDriver $driver_missionTwistEn -driverValue 10 -value 1 $driven_nameTwistEn;// bend front Envelope
setDrivenKeyframe -currentDriver $driver_SquashStretchBendF -driverValue 0 -value 0 $driven_nameBendFrontEn;
setDrivenKeyframe -currentDriver $driver_SquashStretchBendF -driverValue 10 -value 1 $driven_nameBendFrontEn;// bend right Envelope
setDrivenKeyframe -currentDriver $driver_SquashStretchBendR -driverValue 0 -value 0 $driven_nameBendRightEn;
setDrivenKeyframe -currentDriver $driver_SquashStretchBendR -driverValue 10 -value 1 $driven_nameBendRightEn;// squash Envelope
setDrivenKeyframe -currentDriver $driver_SquashStretchSquash -driverValue 0 -value 0 $driven_nameBendSquashEn;
setDrivenKeyframe -currentDriver $driver_SquashStretchSquash -driverValue 10 -value 1 $driven_nameBendSquashEn;// twist En
setDrivenKeyframe -currentDriver $driver_SquashStretchTwistEn -driverValue 0 -value 0 $driver_missionTwistEn;
setDrivenKeyframe -currentDriver $driver_SquashStretchTwistEn -driverValue 10 -value 10 $driver_missionTwistEn;// twist X 
setDrivenKeyframe -currentDriver $driver_SquashStretchRtY -driverValue 0 -value 0 $driver_missionTwistEA;
setDrivenKeyframe -currentDriver $driver_SquashStretchRtY -driverValue 10 -value 10 $driver_missionTwistEA;// bend ahead
setDrivenKeyframe -currentDriver $driver_SquashStretchZ -driverValue 0 -value 0 $driver_missionCurvatureBenF;
setDrivenKeyframe -currentDriver $driver_SquashStretchZ -driverValue 10 -value 10 $driver_missionCurvatureBenF;// bend side
setDrivenKeyframe -currentDriver $driver_SquashStretchX -driverValue 0 -value 0 $driver_missionCurvatureBenR;
setDrivenKeyframe -currentDriver $driver_SquashStretchX -driverValue 10 -value 10 $driver_missionCurvatureBenR;// squash
setDrivenKeyframe -currentDriver $driver_SquashStretchY -driverValue 0 -value 0 $driver_missionFactorSquashF;
setDrivenKeyframe -currentDriver $driver_SquashStretchY -driverValue 10 -value 10 $driver_missionFactorSquashF;// key //
selectKey -add $driven_nameBendFront $driven_nameBendRight $driven_nameSquash $driven_nameTwist $driver_missionCurvatureBenF $driver_missionTwistEA $driver_missionCurvatureBenR $driver_missionFactorSquashF;
keyTangent -inTangentType "spline" -outTangentType "spline";setInfinity -pri "cycleRelative";setInfinity -poi "cycleRelative";// parent joint //
parent $joint1 $nameLaticeBase;parent $joint2 $circleDCtrl;parent $joint3 $grGroupMissions;parent $joint4 $grGroupDeformHide;// parent distance //
global string $nameLocD1;global string $nameLocD2;global string $nameDistanceTools;
string $nameLocD1Str = $tfSelectMeshLaticeStr + "_DistanceLocUp";string $nameLocD2Str = $tfSelectMeshLaticeStr + "_DistanceLocDown";
string $nameDistanceToolsStr = $tfSelectMeshLaticeStr + "_DistanceTools";
parent $nameLocD1Str $grGroupDistance;parent $nameLocD2Str $grGroupDistance;parent $nameDistanceToolsStr $grGroupDistance;
parent $grGroupDistance $nameGroupMain;setAttr ($grGroupDistance + ".v") 0;
setAttr ($joint2 + ".v") 0;parent $annotationName $nameGroupMain;parentConstraint $namejoint4 $annotationName;select $circleDCtrl;}
global proc buildLaticeJointST (){
	// confirmDialog -title "Build joint Latice" -message "Comming soon !";
	global string $tfUdivisionsLaticeRig;
	global string $tfSelectMeshLatice;
	
	string $tfSelectMeshLaticeStr = `textField -q -tx tf_selectMesh_laticeRig`;
	float $tfUdivisionsLaticeRigStr = `textField -q -tx tf_U_Divisons_latice_Rig`;

}












// biuld joint
global proc buildStartLaticeJointST ()
{
	global string $tfUdivisionsLaticeRig;
	global string $tfSelectMeshLatice;
	
	string $tfSelectMeshLaticeStr = `textField -q -tx tf_selectMesh_laticeRig`;
	float $tfUdivisionsLaticeRigStr = `textField -q -tx tf_U_Divisons_latice_Rig`;
	
	global string $tfUdivisionsLaticeRig;
	global string $gSelect;
	setToolTo $gSelect;
	int $reachedStart,$labelNum;
	int $startJointLocks[],$endJointLocks[];
	float $radius;
	float $startJointFat=1;
	float $startJointFatFront=1;
	float $startJointFatWidth=1;
	float $endJointFat=1;
	float $endJointFatFront=1;
	float $endJointFatWidth=1;
	string $sel[]=`ls -sl`;
	string $tempString[],$joints[],$parentJoints[],$labels[];
	string $newJoint,$nearestJoint,$startJointParent,$checkJointName,$parent,$newJointName,$newJointBaseName;
	string $startJoint=`textFieldGrp -q -tx triFitResampleStartJointtextFieldGrp`;
	string $endJoint=`textFieldGrp -q -tx triFitResampleEndJointtextFieldGrp`;
	int $numJoints=`intFieldGrp -q -v1 triFitResampleNumJoints`;
	float $dist,$minDist;
	float $pos[],$posA[],$posB[],$labelPosX[],$labelPosY[],$labelPosZ[];

	$tempString=`ls -l $endJoint`;
	tokenize $tempString[0] "|" $parentJoints;

		for ($i=0;$i<size($parentJoints);$i++)
			{
			if ($parentJoints[$i]==$startJoint)
				$reachedStart=1;
			if ($reachedStart)
				$joints[size($joints)]=$parentJoints[$i];	
			if ($reachedStart && $parentJoints[$i]!=$startJoint && $parentJoints[$i]!=$endJoint)
				{
				$tempString[0]=`asLabel $parentJoints[$i]`;
				if ($tempString[0]!="")
					{
					$labels[$labelNum]=$tempString[0];
					$pos=`xform -q -ws -t $parentJoints[$i]`;
					$labelPosX[$labelNum]=$pos[0];
					$labelPosY[$labelNum]=$pos[1];
					$labelPosZ[$labelNum]=$pos[2];
					$labelNum++;
					}
				}
			}
	if (!`objExists $startJoint`)
		error ("start :\""+$startJoint+"\" does not exists");
	if (!`objExists $endJoint`)
		error ("end :\""+$endJoint+"\" does not exists");
	if ($numJoints<2)
		error "Can not ReSample to less than 2";
	if (!`stringArrayCount $startJoint $joints`)
		error ("end:\""+$endJoint+"\" is not a child of start:\""+$startJoint+"\"");
	if ($startJoint==$endJoint)
		error "Start and End can not be the same";

		select $startJoint $endJoint;
		$tempString=`ikHandle -sol ikSplineSolver -scv false -pcv false`;
		duplicate -n tempIKCurve $tempString[2];
		delete $tempString[0] $tempString[2];
		createNode -n tempPointOnCurveInfo pointOnCurveInfo;
		setAttr tempPointOnCurveInfo.turnOnPercentage 1;
		connectAttr -f tempIKCurveShape.worldSpace[0] tempPointOnCurveInfo.inputCurve;
		select tempIKCurve;refresh;

		$startJointLocks=`triUnLockAttrs $startJoint`;
		$endJointLocks=`triUnLockAttrs $endJoint`;

	if (`attributeExists fat $startJoint`) $startJointFat=`getAttr ($startJoint+".fat")`;
	if (`attributeExists fatFront $startJoint`) $startJointFatFront=`getAttr ($startJoint+".fatFront")`;
	if (`attributeExists fatWidth $startJoint`) $startJointFatWidth=`getAttr ($startJoint+".fatWidth")`;
	if (`attributeExists fat $endJoint`) $endJointFat=`getAttr ($endJoint+".fat")`;
	if (`attributeExists fatFront $endJoint`) $endJointFatFront=`getAttr ($endJoint+".fatFront")`;
	if (`attributeExists fatWidth $endJoint`) $endJointFatWidth=`getAttr ($endJoint+".fatWidth")`;

			$tempString=`listRelatives -p $startJoint`;
			$startJointParent=$tempString[0];
	if ($startJointParent!="")
		parent -w $startJoint;
	parent -w $endJoint;
	$radius=`getAttr ($startJoint+".radius")`;
	rename $endJoint tempRename;
		if (`objExists $joints[1]`) delete $joints[1];
		$parent=$startJoint;
		$newJointBaseName=$joints[0];
		if ($joints[0]=="Root")
			$newJointBaseName="Spine";
		for ($i=1;$i<$numJoints-1;$i++)
			{
			select -cl;
			$checkJointName=$newJointBaseName;
			for ($y=0;$y<99;$y++)
				{
				if ($y>0)
					$checkJointName=$newJointBaseName+$y;
				if (!`objExists $checkJointName`)
					if ($checkJointName!=$endJoint)
						break;
				}
			$newJointName=$checkJointName;
			$newJoint=`joint -n $newJointName -rad $radius`;
			setAttr tempPointOnCurveInfo.parameter ((1.0/($numJoints-1))*$i);
			$pos=`getAttr tempPointOnCurveInfo.position`;
			xform -ws -t $pos[0] $pos[1] $pos[2] $newJoint;
			parent $newJoint $parent;
			$parent=$newJoint;
			asEnsureFitJointAttrs $newJoint;
			setAttr ($newJoint+".fat") ($startJointFat+(($i/($numJoints-1.0))*($endJointFat-$startJointFat)));
			setAttr ($newJoint+".fatFront") ($startJointFatFront+(($i/($numJoints-1.0))*($endJointFatFront-$startJointFatFront)));
			setAttr ($newJoint+".fatWidth") ($startJointFatWidth+(($i/($numJoints-1.0))*($endJointFatWidth-$startJointFatWidth)));
			asFitModeUpdateJoints $newJoint 0;
			refresh;
			}
	rename tempRename $endJoint;
	parent $endJoint $parent;
	if ($startJointParent!="")
		parent $startJoint $startJointParent;

			//labels
			for ($i=0;$i<size($labels);$i++)
				{
				$posA[0]=$labelPosX[$i];
				$posA[1]=$labelPosY[$i];
				$posA[2]=$labelPosZ[$i];
				$tempString=`listRelatives -f -ad -type joint $startJoint`;
				$minDist=999;
				for ($y=0;$y<size($tempString);$y++)
					{
					$posB=`xform -q -ws -t $tempString[$y]`;
					$dist=`mag<<$posA[0]-$posB[0],$posA[1]-$posB[1],$posA[2]-$posB[2]>>`;
					if ($dist<$minDist)
						{
						$nearestJoint=$tempString[$y];
						$minDist=$dist;
						}
					}
				setAttr ($nearestJoint+".drawLabel") 1;
				setAttr ($nearestJoint+".type") 18;
				setAttr -type "string" ($nearestJoint+".otherType") $labels[$i];
				}

			triReLockAttrs $startJoint $startJointLocks;
			triReLockAttrs $endJoint $endJointLocks;

			asFitModeUpdateJoints $endJoint 0;
			delete tempIKCurve;
			if (`checkBox -q -ex asLockCenterJoints`)
				if (`checkBox -q -v asLockCenterJoints`)
					asFitModeLockCenterJoints;

			print ("// Joints Resampled\n");
			catchQuiet (`select $sel`);
			}



global proc triFitResample ()
{
if (`window -q -ex triFitResample`)
	deleteUI triFitResample;
window -t Resample -sizeable false triFitResample ;

int $numJoints=2;
string $allDescendents[],$tempString[];
string $selJoints[]=`ls -sl -type joint`;
string $startJoint=$endJoint="select joint";
if (size($selJoints)==1)
	{
	string $triFitJointIKInfo[]=`triFitJointIKInfo $selJoints[0]`;
	if ($triFitJointIKInfo[1]!="")
		$startJoint=$triFitJointIKInfo[1];
	if ($triFitJointIKInfo[3]!="")
		$endJoint=$triFitJointIKInfo[3];
	}
if (size($selJoints)==2)
	{
	$allDescendents=`listRelatives -ad $selJoints[0]`;
	if (`stringArrayCount $selJoints[1] $allDescendents`)
		{
		$startJoint=$selJoints[0];
		$endJoint=$selJoints[1];
		}
	$allDescendents=`listRelatives -ad $selJoints[1]`;
	if (`stringArrayCount $selJoints[0] $allDescendents`)
		{
		$startJoint=$selJoints[1];
		$endJoint=$selJoints[0];
		}
	}
//Find current $numJoints
if (`objExists $startJoint` && `objExists $endJoint` )
	{
	string $countJoint=$endJoint;
	for ($i=0;$i<99;$i++)
		{
		$tempString=`listRelatives -p $countJoint`;
		$countJoint=$tempString[0];
		if ($countJoint=="" || $countJoint==$startJoint)
			break;
		$numJoints++;
		}
	}

columnLayout -adj 1;
rowLayout -nc 2;
	textFieldGrp -cw2 30 70 -l "Start:" -ed 0 -tx  $startJoint triFitResampleStartJointtextFieldGrp;
	button -h 15 -l "select" -c "triFitResamplePick triFitResampleStartJointtextFieldGrp";
	setParent..;
rowLayout -nc 2;
	textFieldGrp -cw2 30 70 -l "End" -ed 0 -tx $endJoint triFitResampleEndJointtextFieldGrp;
	button -h 15 -l "select" -c "triFitResamplePick triFitResampleEndJointtextFieldGrp";
	setParent..;
intFieldGrp -v1 $numJoints -cw2 60 50 -l "Number" triFitResampleNumJoints;
button -l "Set" -c triFitResampleJoints;
showWindow triFitResample;
}

global proc triFitResampleJoints ()
{
global string $gSelect;
setToolTo $gSelect;
int $reachedStart,$labelNum;
int $startJointLocks[],$endJointLocks[];
float $radius;
float $startJointFat=1;
float $startJointFatFront=1;
float $startJointFatWidth=1;
float $endJointFat=1;
float $endJointFatFront=1;
float $endJointFatWidth=1;
string $sel[]=`ls -sl`;
string $tempString[],$joints[],$parentJoints[],$labels[];
string $newJoint,$nearestJoint,$startJointParent,$checkJointName,$parent,$newJointName,$newJointBaseName;
string $startJoint=`textFieldGrp -q -tx triFitResampleStartJointtextFieldGrp`;
string $endJoint=`textFieldGrp -q -tx triFitResampleEndJointtextFieldGrp`;
int $numJoints=`intFieldGrp -q -v1 triFitResampleNumJoints`;
float $dist,$minDist;
float $pos[],$posA[],$posB[],$labelPosX[],$labelPosY[],$labelPosZ[];

$tempString=`ls -l $endJoint`;
tokenize $tempString[0] "|" $parentJoints;
for ($i=0;$i<size($parentJoints);$i++)
	{
	if ($parentJoints[$i]==$startJoint)
		$reachedStart=1;
	if ($reachedStart)
		$joints[size($joints)]=$parentJoints[$i];	
	if ($reachedStart && $parentJoints[$i]!=$startJoint && $parentJoints[$i]!=$endJoint)
		{
		$tempString[0]=`asLabel $parentJoints[$i]`;
		if ($tempString[0]!="")
			{
			$labels[$labelNum]=$tempString[0];
			$pos=`xform -q -ws -t $parentJoints[$i]`;
			$labelPosX[$labelNum]=$pos[0];
			$labelPosY[$labelNum]=$pos[1];
			$labelPosZ[$labelNum]=$pos[2];
			$labelNum++;
			}
		}
	}
if (!`objExists $startJoint`)
	error ("start :\""+$startJoint+"\" does not exists");
if (!`objExists $endJoint`)
	error ("end :\""+$endJoint+"\" does not exists");
if ($numJoints<2)
	error "Can not ReSample to less than 2";
if (!`stringArrayCount $startJoint $joints`)
	error ("end:\""+$endJoint+"\" is not a child of start:\""+$startJoint+"\"");
if ($startJoint==$endJoint)
	error "Start and End can not be the same";

select $startJoint $endJoint;
$tempString=`ikHandle -sol ikSplineSolver -scv false -pcv false`;
duplicate -n tempIKCurve $tempString[2];
delete $tempString[0] $tempString[2];
createNode -n tempPointOnCurveInfo pointOnCurveInfo;
setAttr tempPointOnCurveInfo.turnOnPercentage 1;
connectAttr -f tempIKCurveShape.worldSpace[0] tempPointOnCurveInfo.inputCurve;
select tempIKCurve;refresh;

$startJointLocks=`triUnLockAttrs $startJoint`;
$endJointLocks=`triUnLockAttrs $endJoint`;

if (`attributeExists fat $startJoint`) $startJointFat=`getAttr ($startJoint+".fat")`;
if (`attributeExists fatFront $startJoint`) $startJointFatFront=`getAttr ($startJoint+".fatFront")`;
if (`attributeExists fatWidth $startJoint`) $startJointFatWidth=`getAttr ($startJoint+".fatWidth")`;
if (`attributeExists fat $endJoint`) $endJointFat=`getAttr ($endJoint+".fat")`;
if (`attributeExists fatFront $endJoint`) $endJointFatFront=`getAttr ($endJoint+".fatFront")`;
if (`attributeExists fatWidth $endJoint`) $endJointFatWidth=`getAttr ($endJoint+".fatWidth")`;

$tempString=`listRelatives -p $startJoint`;
$startJointParent=$tempString[0];
if ($startJointParent!="")
	parent -w $startJoint;
parent -w $endJoint;
$radius=`getAttr ($startJoint+".radius")`;
rename $endJoint tempRename;
if (`objExists $joints[1]`) delete $joints[1];
$parent=$startJoint;
$newJointBaseName=$joints[0];
if ($joints[0]=="Root")
	$newJointBaseName="Spine";
for ($i=1;$i<$numJoints-1;$i++)
	{
	select -cl;
	$checkJointName=$newJointBaseName;
	for ($y=0;$y<99;$y++)
		{
		if ($y>0)
			$checkJointName=$newJointBaseName+$y;
		if (!`objExists $checkJointName`)
			if ($checkJointName!=$endJoint)
				break;
		}
	$newJointName=$checkJointName;
	$newJoint=`joint -n $newJointName -rad $radius`;
	setAttr tempPointOnCurveInfo.parameter ((1.0/($numJoints-1))*$i);
	$pos=`getAttr tempPointOnCurveInfo.position`;
	xform -ws -t $pos[0] $pos[1] $pos[2] $newJoint;
	parent $newJoint $parent;
	$parent=$newJoint;
	asEnsureFitJointAttrs $newJoint;
	setAttr ($newJoint+".fat") ($startJointFat+(($i/($numJoints-1.0))*($endJointFat-$startJointFat)));
	setAttr ($newJoint+".fatFront") ($startJointFatFront+(($i/($numJoints-1.0))*($endJointFatFront-$startJointFatFront)));
	setAttr ($newJoint+".fatWidth") ($startJointFatWidth+(($i/($numJoints-1.0))*($endJointFatWidth-$startJointFatWidth)));
	asFitModeUpdateJoints $newJoint 0;
	refresh;
	}
rename tempRename $endJoint;
parent $endJoint $parent;
if ($startJointParent!="")
	parent $startJoint $startJointParent;

//labels
for ($i=0;$i<size($labels);$i++)
	{
	$posA[0]=$labelPosX[$i];
	$posA[1]=$labelPosY[$i];
	$posA[2]=$labelPosZ[$i];
	$tempString=`listRelatives -f -ad -type joint $startJoint`;
	$minDist=999;
	for ($y=0;$y<size($tempString);$y++)
		{
		$posB=`xform -q -ws -t $tempString[$y]`;
		$dist=`mag<<$posA[0]-$posB[0],$posA[1]-$posB[1],$posA[2]-$posB[2]>>`;
		if ($dist<$minDist)
			{
			$nearestJoint=$tempString[$y];
			$minDist=$dist;
			}
		}
	setAttr ($nearestJoint+".drawLabel") 1;
	setAttr ($nearestJoint+".type") 18;
	setAttr -type "string" ($nearestJoint+".otherType") $labels[$i];
	}

triReLockAttrs $startJoint $startJointLocks;
triReLockAttrs $endJoint $endJointLocks;

asFitModeUpdateJoints $endJoint 0;
delete tempIKCurve;
if (`checkBox -q -ex asLockCenterJoints`)
	if (`checkBox -q -v asLockCenterJoints`)
		asFitModeLockCenterJoints;

print ("// Joints Resampled\n");
catchQuiet (`select $sel`);
}
global proc int[] triUnLockAttrs (string $obj)
{
int $lockedAttrs[];
string $trs[]={"t","r","s"};
string $xyz[]={"x","y","z"};
for ($y=0;$y<size($trs);$y++)
	for ($z=0;$z<size($xyz);$z++)
		{
		$lockedAttrs[size($lockedAttrs)]=`getAttr -l ($obj+"."+$trs[$y]+$xyz[$z])`;
		setAttr -l 0 ($obj+"."+$trs[$y]+$xyz[$z]);
		}
return $lockedAttrs;
}

global proc triReLockAttrs (string $obj, int $lockedAttrs[])
{
int $attrNr=0;
string $trs[]={"t","r","s"};
string $xyz[]={"x","y","z"};
for ($y=0;$y<size($trs);$y++)
	for ($z=0;$z<size($xyz);$z++)
		{
		setAttr -l $lockedAttrs[$attrNr] ($obj+"."+$trs[$y]+$xyz[$z]);
		$attrNr++;
		}
}

global proc triFitResamplePick (string $textFieldGrp)
{
string $selJoints[]=`ls -sl -type joint`;
if (!size($selJoints))
	error "No joint selected";
textFieldGrp -e -tx $selJoints[0] $textFieldGrp;
}
global proc asEnsureFitJointAttrs (string $fitJoint)
{
float $fat;
string $priAxis="X";
string $secAxis="Y";
float $scale=`asGetScale`;
float $centerTolerance=0.01*$scale;
float $pos[];

if (`attributeExists primaryAxis FitSkeleton`)
	$priAxis=`getAttr -asString FitSkeleton.primaryAxis`;
if (`attributeExists secondaryAxis FitSkeleton`)
	$secAxis=`getAttr -asString FitSkeleton.secondaryAxis`;

if (!`attributeExists fat $fitJoint`)
	{
	float $dv=1;
	string $rlaChild=`asRlaChild $fitJoint`;
	if ($rlaChild!="")
		{
		$dv=`getAttr ($rlaChild+".translate"+$priAxis)`;
		$dv=`abs($dv)`/4.0;
		$pos=`xform -q -ws -t $fitJoint`;
		if ($pos[0]<$centerTolerance && $pos[0]>($centerTolerance*-1))
			$dv*=2;//larger in center
		}
	else
		{
		string $tempString[]=`listRelatives -p -type joint $fitJoint`;
		if ($tempString[0]!="" && `attributeExists fat $tempString[0]`)
			$dv=`getAttr ($tempString[0]+".fat")`;
		}
	addAttr -k 1 -min 0 -dv $dv -ln fat -at double $fitJoint;
	}
if (!`attributeExists fatFront $fitJoint`)
	{
	if (`attributeExists fat $fitJoint`)//delete and reMake fat as well, to keep all fat attrs next to eachother
		{
		$fat=`getAttr ($fitJoint+".fat")`;
		deleteAttr ($fitJoint+".fat");
		addAttr -k 1 -min 0 -dv $fat -ln fat -at double $fitJoint;
		}

	addAttr -k 1 -min 0 -dv 1 -ln fatFront -at double $fitJoint;
	}
if (!`attributeExists fatWidth $fitJoint`)
	addAttr -k 1 -min 0 -dv 1 -ln fatWidth -at double $fitJoint;
if (!`attributeExists fatFrontAbs $fitJoint`)
	addAttr -k 0 -ln fatFrontAbs -at double $fitJoint;
if (!`attributeExists fatWidthAbs $fitJoint`)
	addAttr -k 0 -ln fatWidthAbs -at double $fitJoint;

//v 5.813 upgrade
if (`attributeExists fatY $fitJoint`)
	{
	setAttr ($fitJoint+".fatFront") `getAttr ($fitJoint+".fatY")`;
	deleteAttr ($fitJoint+".fatY");
	}
if (`attributeExists fatZ $fitJoint`)
	{
	setAttr ($fitJoint+".fatWidth") `getAttr ($fitJoint+".fatZ")`;
	deleteAttr ($fitJoint+".fatZ");
	}
if (`attributeExists fatYAbs $fitJoint`) deleteAttr ($fitJoint+".fatFrontAbs");
if (`attributeExists fatZabs $fitJoint`) deleteAttr ($fitJoint+".fatZabs");

if (`objExists ($fitJoint+"Fat")`) delete ($fitJoint+"Fat");
createNode -n ($fitJoint+"Fat") multiplyDivide;
connectAttr -f ($fitJoint+".fat") ($fitJoint+"Fat.input1Y");
connectAttr -f ($fitJoint+".fat") ($fitJoint+"Fat.input1Z");
connectAttr -f ($fitJoint+".fatFront") ($fitJoint+"Fat.input2Y");
connectAttr -f ($fitJoint+".fatWidth") ($fitJoint+"Fat.input2Z");
connectAttr -f ($fitJoint+"Fat.outputY") ($fitJoint+".fatFrontAbs");
connectAttr -f ($fitJoint+"Fat.outputZ") ($fitJoint+".fatWidthAbs");
}
global proc float asGetScale ()
{
float $scale=1;
if (!`objExists FitSkeleton`)
	return $scale;
float $maxY;
float $pos[];
$tempString=`listRelatives -f -ad -type joint FitSkeleton`;
for ($i=0;$i<size($tempString);$i++)
	{
	$pos=`xform -q -ws -t $tempString[$i]`;
	if ($pos[1]>$maxY)
		$maxY=$pos[1];
	}
if ($maxY>0)
	$scale=$maxY/17.176163;
if ($scale<0.01)
	$scale=0.01;
return $scale;
}
global proc string asRlaChild (string $joint)
{
float $scale=1;
if (`objExists FitSkeleton`)
	$scale=`getAttr FitSkeleton.sx`;
float $centerTolerance=0.01*$scale;
string $children[]=`listRelatives -type joint -c $joint`;
string $rlaChild="";
float $pos[3]=`xform -q -ws -t $joint`;
int $center=0;
if ($pos[0]>-$centerTolerance && $pos[0]<$centerTolerance) $center=1;
for ($y=0;$y<size($children);$y++)
	{
	float $childPos[3]=`xform -q -ws -t $children[$y]`;
	int $childCenter=0;
	if ($childPos[0]>-$centerTolerance && $childPos[0]<$centerTolerance) $childCenter=1;
	if ($center && $childCenter) $rlaChild=$children[$y];
	if (!$center && !$childCenter) $rlaChild=$children[$y];
	//Use `first` child as $rlaChild
	if ($rlaChild!="")
	 break;
	}

//if (!$center && size($children)>1)
//	$rlaChild="";

//Preferred $rlaChild
if (`gmatch $joint "*Head*"`)
	for ($y=0;$y<size($children);$y++)
		if (`gmatch $children[$y] "*Head*"`)
			$rlaChild=$children[$y];
if (`gmatch $joint "*Ankle*"`)
	for ($y=0;$y<size($children);$y++)
		if (`gmatch $children[$y] "*Toes*"`)
			$rlaChild=$children[$y];
if (`gmatch $joint "*Toes*"`)
	for ($y=0;$y<size($children);$y++)
		if (`gmatch $children[$y] "*Toes*"`)
			$rlaChild=$children[$y];
if (`gmatch $joint "*Root*"`)
	for ($y=0;$y<size($children);$y++)
		if (`gmatch $children[$y] "*Spine*"`)
			$rlaChild=$children[$y];

return $rlaChild;
}
global proc asFitModeUpdateJoints (string $jointsString, int $recursive)
{
int $childNr,$newChildNr,$reachedKneeJoint,$flipOrient,$aimAxis,$aimUpAxis,$x,$y,$z,$xUp,$yUp,$zUp,$ikPlaneVectored;
int $useWorldOrient,$freeOrient,$worldOrientUp,$worldOrientForward,$center,$iKStartJointCenter,$worldmatch,$hipFlip,$symmetryJoint,$noFlip;
int $selfUpMult=1;
int $terAxisNr=2;
int $editPivotMode=`manipMoveContext -q -editPivotMode Move`;
float $scale=1;
float $maxT;
float $aimV[3],$upV[3],$upV2[3];
float $pos[],$pos2[],$rot[],$aimVector[];
if (`objExists FitSkeleton`)
	$scale=`getAttr FitSkeleton.sx`;
float $centerTolerance=0.01*$scale;
string $sel[]=`ls -sl`;
string $tempString[],$tempString2[],$tempString3[],$joints[],$jointAllDescendents[],$jointChildren[];
string $connectCmds[],$rlaParentChildren[],$rlaParentParentChildren[],$newRlaParentChildren[],$iKInfo[];
string $trs[]={"t","r","s"};
string $xyz[]={"x","y","z"};
string $generatedTransform1,$generatedTransform2,$IKParentJoint,$IKChildJoint,$upVecObj,$worldOrientUpAttrName;
string $rlaParent,$rlaParentLabel,$rlaChild,$rlaParentRlaChild,$label,$tempLabel,$joint,$aimAt,$worldUpType;
string $iK,$iKStartJoint,$iKMiddleJoint,$iKEndJoint,$iKSolver,$iKNumCtrls,$roo,$selfUpAxis;
string $priAxis="X";
string $secAxis="Y";
string $terAxis="Z";

if (`attributeExists primaryAxis FitSkeleton`)
	$priAxis=`getAttr -asString FitSkeleton.primaryAxis`;
if (`attributeExists secondaryAxis FitSkeleton`)
	$secAxis=`getAttr -asString FitSkeleton.secondaryAxis`;
if (`attributeExists worldmatch FitSkeleton`)
	$worldmatch=`getAttr FitSkeleton.worldmatch`;

if ($worldmatch && !$recursive)
	{//arrived here by FitMode, but apply recursive, since any children can get new orientation
	tokenize $jointsString "@" $joints;
	asFitModeUpdateJoints $joints[0] 1;
	return;
	}

if ($recursive)
	{
	$tempString=`listRelatives -ad -type joint $jointsString`;
	for ($i=size($tempString)-1;$i>-1;$i--)
		$jointsString+="@"+$tempString[$i];
	}
tokenize $jointsString "@" $joints;
for ($joint in $joints)
	{
	if (size(`ls -ap $joint`)!=1)
		continue;
	$symmetryJoint=0;
	if (`gmatch $joint "*_NonSymmetry"`)
		$symmetryJoint=1;
	$label=`asLabel $joint`;
	$rlaParent=`triRlaParent $joint`;
	$rlaParent=`asUniqueName $rlaParent`;
	$rlaParentLabel=`asLabel $rlaParent`;
	string $rlaChild=`asRlaChild $joint`;
	$rlaChild=`asUniqueName $rlaChild`;
	$jointChildren=`listRelatives -c -type joint $joint`;

	int $childNr=0;
	clear $rlaParentChildren;
	if ($rlaParent!="")
		{
		$rlaParentRlaChild=`asRlaChild $rlaParent`;
		$rlaParentChildren=`listRelatives -type joint -c $rlaParent`;
		if (size($rlaParentChildren)>1)
			for ($i=0;$i<size($rlaParentChildren);$i++)
				{
				if ($joint==$rlaParentChildren[$i])
					$childNr=$i;
				}
		}
	if (!`objExists $rlaParent`)
		continue;
	$freeOrient=0;
	if (`attributeExists freeOrient $rlaParent`)
		$freeOrient=`getAttr ($rlaParent+".freeOrient")`;
	if (`asRlaChild $rlaParent`!=$joint)//removed: && $rlaParent!="Cup" seems obsolete
		continue;
	if (`gmatch $rlaParent "Cup[0-9]*"` || $rlaParent=="Cup_NonSymmetry")//`other` cups (hand has been duplicated)
		continue;

	$worldOrientUp=$worldOrientForward=-1;
	$worldOrientUpAttrName="worldOrientUp";
	if (`attributeExists worldOrientForward $rlaParent`)
		$worldOrientForward=`getAttr ($rlaParent+".worldOrientForward")`;
	//the old worldOrient-way < 5.792
	if (`attributeExists worldOrient $rlaParent`)
		{
		$worldOrientUp=`getAttr ($rlaParent+".worldOrient")`;
		$worldOrientUpAttrName="worldOrient";
		}
	//the new worldOrient-way > 5.792
	if (`attributeExists worldOrientUp $rlaParent`)
		$worldOrientUp=`getAttr ($rlaParent+".worldOrientUp")`;
	$useWorldOrient=0;
	if ($worldOrientUp!=-1)
		$useWorldOrient=1;

	//update worldOrients if World-match
	if ($worldmatch && $useWorldOrient)
		$worldOrientUp=1;

	//update worldOrients if SwappingAxis, guestimate what will match with the new axis options
	if (`objExists SwappingAxisInfo` && $useWorldOrient)
		{
		if (($worldOrientUp==`getAttr SwappingAxisInfo.previousPrimaryAxis`) || (($worldOrientUp-3)==`getAttr SwappingAxisInfo.previousPrimaryAxis`))
			{
			$worldOrientUp=`getAttr SwappingAxisInfo.primaryAxis`;
			if ($worldOrientUp<3)
				setAttr ($rlaParent+"."+$worldOrientUpAttrName) ($worldOrientUp+3);//always setting to `down`
			else
				setAttr ($rlaParent+"."+$worldOrientUpAttrName) $worldOrientUp;
			}
		//and guestimate `free-forward`
		$tempString=`listRelatives -c -type joint $rlaParent`;
		if (($worldOrientForward==-1 || $worldOrientForward==6) && size($tempString))
			{//assuming correct `forward` of Parent, so aligning with that
			parent -w $tempString;
			setAttr ($rlaParent+".r") -type float3 0 0 0;
			setAttr ($rlaParent+".jointOrient") -type float3 0 0 0;
			parent $tempString $rlaParent;
			}
		}

	if (`attributeExists worldOrientForward $rlaParent` && $worldOrientForward!=6)
		if ($worldOrientForward==$worldOrientUp || $worldOrientForward==($worldOrientUp+3) || $worldOrientForward==($worldOrientUp-3))
			{
			print ("// detected invalid WorldOrient options on object:\""+$rlaParent+"\", same axis defined as \"Forward\" and \"Up\", changing the value now.\n");
			if ($worldOrientUp==5)
				setAttr ($rlaParent+".worldOrientForward") 0;
			else
				setAttr ($rlaParent+".worldOrientForward") ($worldOrientUp+1);
			}

	$flipOrient=0;
	$tempString=`ls -l $rlaParent`;
	tokenize $tempString[0] "|" $tempString;
	for ($i=0;$i<size($tempString);$i++)
		if (`attributeExists flipOrient $tempString[$i]`)
			if (`getAttr ($tempString[$i]+".flipOrient")`)
				$flipOrient=!$flipOrient;

	if (`attributeExists noFlip $rlaParent`)
		$noFlip=`getAttr ($rlaParent+".noFlip")`;

	string $rlaParentParent=`triRlaParent $rlaParent`;
//	clear $otherJointsInIK;
	$jointAllDescendents=`listRelatives -allDescendents -type joint $joint`;
	$jointAllDescendents[size($jointAllDescendents)]=$joint;
	string $parentOtherChildren[]=`listRelatives -c $rlaParent`;
	$parentOtherChildren=`stringArrayRemove {$joint} $parentOtherChildren`;

	$iKInfo=`triFitJointIKInfo $rlaParent`;
	$iK=$iKInfo[0];
	$iKStartJoint=$iKInfo[1];
	$iKMiddleJoint=$iKInfo[2];
	$iKEndJoint=$iKInfo[3];
	$iKSolver=$iKInfo[4];
	$iKNumCtrls=$iKInfo[5];

	// $iKEndJoint should be first joint found in a IK, so Orient $iKStartJoint first, as it sets the upVector
	if ($iKStartJoint!="" && $iKEndJoint!="" && $joint==$iKEndJoint && !$recursive)
		{
		$tempString[0]=`asRlaChild $iKStartJoint`;
		if ($tempString[0]!="" && $tempString[0]!=$joint)//avoids stuck loop if SplineIk is only 1 bone
			asFitModeUpdateJoints $tempString[0] 0;
		}

	int $lockTX=`getAttr -l ($joint+".tx")`;int $lockTY=`getAttr -l ($joint+".ty")`;int $lockTZ=`getAttr -l ($joint+".tz")`;
	int $lockRX=`getAttr -l ($joint+".rx")`;int $lockRY=`getAttr -l ($joint+".ry")`;int $lockRZ=`getAttr -l ($joint+".rz")`;
	int $lockPTX=`getAttr -l ($rlaParent+".tx")`;int $lockPTY=`getAttr -l ($rlaParent+".ty")`;int $lockPTZ=`getAttr -l ($rlaParent+".tz")`;
	int $lockPRX=`getAttr -l ($rlaParent+".rx")`;int $lockPRY=`getAttr -l ($rlaParent+".ry")`;int $lockPRZ=`getAttr -l ($rlaParent+".rz")`;
	setAttr -l 0 ($joint+".tx");setAttr -l 0 ($joint+".ty");setAttr -l 0 ($joint+".tz");
	setAttr -l 0 ($joint+".rx");setAttr -l 0 ($joint+".ry");setAttr -l 0 ($joint+".rz");
	setAttr -l 0 ($rlaParent+".tx");setAttr -l 0 ($rlaParent+".ty");setAttr -l 0 ($rlaParent+".tz");
	setAttr -l 0 ($rlaParent+".rx");setAttr -l 0 ($rlaParent+".ry");setAttr -l 0 ($rlaParent+".rz");

	if (size($parentOtherChildren))
		{
		createNode -n otherChildrenPlaceHolder -p $rlaParent transform;
		parent -w otherChildrenPlaceHolder;
		}
	for ($i=0;$i<size($parentOtherChildren);$i++)
		{
		$tempString=`parent $parentOtherChildren[$i] otherChildrenPlaceHolder`;
		$parentOtherChildren[$i]=$tempString[0];
		}
		
	$tempString=`parent -w $joint`;
	$joint=$tempString[0];
	$tempString=`listRelatives -p $joint`;
	if (size($tempString))
		$generatedTransform1=$tempString[0];

	//remove any `rotateAxis`
	setAttr ($rlaParent+".rotateAxis") -type float3 0 0 0;

	//disconnect connections
	clear $connectCmds;
	for ($y=0;$y<size($trs);$y++)
		for ($z=0;$z<size($xyz);$z++)
			{
			$tempString=`listConnections -s 1 -d 0 -p 1 ($rlaParent+"."+$trs[$y]+$xyz[$z])`;
			if ($tempString[0]!="")
				{
				$connectCmds[size($connectCmds)]="connectAttr -f "+$tempString[0]+" "+$rlaParent+"."+$trs[$y]+$xyz[$z]+";";
				disconnectAttr $tempString[0] ($rlaParent+"."+$trs[$y]+$xyz[$z]);
				}
			}

	$center=0;
	$pos=`xform -q -ws -t $rlaParent`;
	if ($pos[0]>-$centerTolerance && $pos[0]<$centerTolerance) $center=1;

	//Snap Center-joints to scene-center
	$iKStartJointCenter=0;
	if (`objExists $iKStartJoint`)
		{
		$pos2=`xform -q -ws -t $iKStartJoint`;
		if ($pos2[0]>-$centerTolerance && $pos2[0]<$centerTolerance) $iKStartJointCenter=1;
		if ($iKStartJointCenter && !$center)
			{
			$pos[0]=0;
			xform -ws -t $pos[0] $pos[1] $pos[2] $rlaParent;
			$center=1;
			}
		}

	if ($worldmatch)
		{
		createNode -n tempTransform1 -p $rlaParent transform;
		parent -w tempTransform1;
		setAttr tempTransform1.r -type float3 0 0 0;
		createNode -n tempTransform2 -p $joint transform;
		parent tempTransform2 tempTransform1;
		$pos2=`getAttr tempTransform2.t`;
		$maxT=0;
		if (abs($pos2[0])>$maxT) {$priAxis="X";$maxT=abs($pos2[0]);}
		if (abs($pos2[1])>$maxT) {$priAxis="Y";$maxT=abs($pos2[1]);}
		if (abs($pos2[2])>$maxT) {$priAxis="Z";$maxT=abs($pos2[2]);}
		if (`getAttr ("tempTransform2.translate"+$priAxis)`<0)
			$priAxis="-"+$priAxis;
		if ($useWorldOrient)//worldOrient with worldmatch, override, (assuming Ankle situation)
			$priAxis="-Y";
		delete tempTransform1;
		$secAxis="Z";
		if ($priAxis=="Z") $secAxis="-Y";
		if ($priAxis=="-Z") $secAxis="Y";
		if (!`attributeExists primaryAxis $rlaParent`)   addAttr -ln primaryAxis -at "enum" -en "X:Y:Z:-X:-Y:-Z:" $rlaParent;
		if (!`attributeExists secondaryAxis $rlaParent`) addAttr -ln secondaryAxis -at "enum" -en "X:Y:Z:-X:-Y:-Z:" $rlaParent;
		setAttr ($rlaParent+".primaryAxis") `asAxisToAxisEnumValue $priAxis`;
		setAttr ($rlaParent+".secondaryAxis") `asAxisToAxisEnumValue $secAxis`;
		if (!size($jointChildren))
			{
			if (!`attributeExists primaryAxis $joint`)   addAttr -ln primaryAxis   -at "enum" -en "X:Y:Z:-X:-Y:-Z:" $joint;
			if (!`attributeExists secondaryAxis $joint`) addAttr -ln secondaryAxis -at "enum" -en "X:Y:Z:-X:-Y:-Z:" $joint;
			setAttr ($joint+".primaryAxis") `asAxisToAxisEnumValue $priAxis`;
			setAttr ($joint+".secondaryAxis") `asAxisToAxisEnumValue $secAxis`;
			}
		}

	$terAxis=`triGetTerAxis $priAxis $secAxis`;
	$selfUpAxis=$secAxis;
	$selfUpMult=1;
	if (`objExists SwappingAxisInfo`)
		$selfUpAxis=`getAttr -asString SwappingAxisInfo.previousSecondaryAxis`;
	if (`gmatch $terAxis "*X"`) $terAxisNr=0;
	if (`gmatch $terAxis "*Y"`) $terAxisNr=1;
	if (`gmatch $terAxis "*Z"`) $terAxisNr=2;
	if (`gmatch $selfUpAxis "-*"`) {$selfUpAxis=`asAbsAxis $selfUpAxis`;$selfUpMult=-1;}

	$aimV=`asAxisToVector $priAxis`;
	$upV=`asAxisToVector $secAxis`;
	$upV2=`asAxisToVector $terAxis`;

	if ($flipOrient)
		{
		$upV[0]=$upV[0]*-1;$upV[1]=$upV[1]*-1;$upV[2]=$upV[2]*-1;
		$upV2[0]=$upV2[0]*-1;$upV2[1]=$upV2[1]*-1;$upV2[2]=$upV2[2]*-1;
		}

	if ($symmetryJoint && !$noFlip)
		{
		$aimV[0]=$aimV[0]*-1;$aimV[1]=$aimV[1]*-1;$aimV[2]=$aimV[2]*-1;
		}

	$ikPlaneVectored=0;
	$hipFlip=1;
	if (!$useWorldOrient && !$freeOrient)
		{
		if ($iKStartJoint!="" && $iKEndJoint!="" && $iKSolver=="ikRPsolver" && $rlaParent!=$iKEndJoint && !`gmatch $label "*Toes*"`) // IK
			{//`Ik-plane-vectored`
			$ikPlaneVectored=1;
			//in some cases aimConstraint computes flipped (if parent-joint.jo==90,0,90), so unparent before aim
			$tempString=`listRelatives -p $rlaParent`;
			$rlaParentParent=$tempString[0];
			$rlaParentParentChildren=`listRelatives -c -type transform $rlaParentParent`;
			parent -w $rlaParent;
			if ($rlaParent==$iKStartJoint)
				{
				$upVecObj=$iKEndJoint;//IKStartJoint upVectors to IK-plane
				$tempLabel=`asLabel $iKStartJoint`;
				if (`gmatch $tempLabel "*Hip*"`) {$upV[0]=$upV[0]*-1;$upV[1]=$upV[1]*-1;$upV[2]=$upV[2]*-1;$hipFlip=-1;}

	//			$tempString=`aimConstraint -aimVector 1 0 0 -upVector $upV[0] $upV[1] $upV[2] -worldUpType "object" -worldUpObject $upVecObj $joint $rlaParent`;
				$tempString=`aimConstraint -aimVector $aimV[0] $aimV[1] $aimV[2] -upVector $upV[0] $upV[1] $upV[2] -worldUpType "object" -worldUpObject $upVecObj $joint $rlaParent`;
				//Arms/Legs with excatly 0 rotation, will get PreferredAngles set to rotZ
				if (`objExists tempTransform`) delete tempTransform;
				createNode -n tempTransform -p $joint transform;
				parent tempTransform $rlaParent;
				$rot=`getAttr tempTransform.r`;
				delete tempTransform;
				
				if ($rot[$terAxisNr]<0.001 && $rot[$terAxisNr]>-0.001 && `objExists $iKMiddleJoint` && !`objExists SwappingAxisInfo`)
					{
					print ("// Detected zero rotation of :"+$joint+".rotation"+$terAxis+", moving middle-ik-joint slightly, to to have default rotation in \""+$terAxis+"\" axis\n");
					move -ws -r 0 0 ($pos[1]/-100.0) ($iKMiddleJoint+".rotatePivot");
					}
				}
			else
				{
				$upVecObj=$iKStartJoint;
	//			$tempString=`aimConstraint -aimVector 1 0 0 -upVector $upV[0] $upV[1] $upV[2] -worldUpType "objectrotation" -worldUpObject $upVecObj -worldUpVector $upV[0] $upV[1] $upV[2] $joint $rlaParent`;
				$tempString=`aimConstraint -aimVector $aimV[0] $aimV[1] $aimV[2] -upVector $upV2[0] $upV2[1] $upV2[2] -worldUpType "objectrotation" -worldUpObject $upVecObj -worldUpVector $upV2[0] $upV2[1] $upV2[2] $joint $rlaParent`;
				}

			delete $tempString[0];
			parent $rlaParent $rlaParentParent;
			//and preserve childOrder
			if (size($rlaParentParentChildren)>1)
				{
				if ($rlaParent==$rlaParentParentChildren[0]) reorder -front $rlaParent;
				else reorder -back $rlaParent;
				}
			if (`objExists tempTransform`) delete tempTransform;
			}
		else
			{//`Self-up-vectored`
			//setting to just local forward is not reliable if switching axis, changing away from `Self-up-vectored`
			//actually maybe changing back is possible...
			if ($center)
				{
				$tempString=`aimConstraint -aimVector $aimV[0] $aimV[1] $aimV[2] -upVector $upV2[0] $upV2[1] $upV2[2] -worldUpType "vector" -worldUpVector 1 0 0 $joint $rlaParent`;
				delete $tempString[0];
				}
			else
				{

	//print ("Orienting:"+$rlaParent+"\n"); 
				$upVecObj=`createNode -p $rlaParent transform`;
				if ($flipOrient) setAttr ($upVecObj+".translate"+$selfUpAxis) (-3*$selfUpMult);
				else setAttr ($upVecObj+".translate"+$selfUpAxis) (3*$selfUpMult);
				parent -w $upVecObj;
				$tempString=`listRelatives -p $upVecObj`;
				if (size($tempString)) $generatedTransform2=$tempString[0];
//				if ($worldmatch)
//					$tempString=`aimConstraint -aimVector $aimV[0] $aimV[1] $aimV[2] -upVector 0 1 0 -worldUpType "scene" -worldUpVector 0 1 0 $joint $rlaParent`;
//				else
					$tempString=`aimConstraint -aimVector $aimV[0] $aimV[1] $aimV[2] -upVector $upV[0] $upV[1] $upV[2] -worldUpType "object" -worldUpObject $upVecObj $joint $rlaParent`;
				delete $upVecObj $tempString[0];
				}
			}

		//Special case, LegAim
		if (`gmatch $rlaParentLabel "LegAim*"`)
			{
			$upVecObj=$joint;
			$tempString=`aimConstraint -aimVector $aimV[0] $aimV[1] $aimV[2] -upVector $upV2[0] $upV2[1] $upV2[2] -worldUpType "objectrotation" -worldUpVector $upV2[0] $upV2[1] $upV2[2] -worldUpObject $upVecObj $joint $rlaParent`;
			delete $tempString[0];
			}
		//Special case, Cup
		if ($rlaParent=="Cup" && `objExists RingFinger1` && `objExists MiddleFinger1`)
			{
			$upVecObj=`triRlaParent $rlaParent`;
			$tempString=`aimConstraint -aimVector $aimV[0] $aimV[1] $aimV[2] -upVector $upV[0] $upV[1] $upV[2] -worldUpType "object" -worldUpObject $upVecObj RingFinger1 MiddleFinger1 $rlaParent`;
			delete $tempString[0];
			}
		//Special case, Eyes
		if (`gmatch $rlaParent "Eye*"`)
			{
				$tempString=`aimConstraint -aimVector $aimV[0] $aimV[1] $aimV[2] -upVector ($upV[0]*-1) ($upV[1]*-1) ($upV[2]*-1) -worldUpVector 0 1 0 $joint $rlaParent`;
			delete $tempString[0];
			}
		//Special case, Root with no centered child
		if ($rlaParent=="Root" && !$center)
			{
			setAttr -type float3 ($rlaParent+".rotate") 0 0 0;
			setAttr -type float3 ($rlaParent+".jointOrient") 90 0 90;
			}
		//Special case, AimAt
		if (`attributeExists aimAt $rlaParent`)
			{
			$aimAt=`getAttr -asString($rlaParent+".aimAt")`;
			$aimAxis=`getAttr ($rlaParent+".aimAxis")`;
			$aimUpAxis=`getAttr ($rlaParent+".aimUpAxis")`;

			if ($aimAxis==0) {$x=1;$y=0;$z=0;}
			if ($aimAxis==1) {$x=0;$y=1;$z=0;}
			if ($aimAxis==2) {$x=0;$y=0;$z=1;}
			if ($aimUpAxis==0) {$xUp=1;$yUp=0;$zUp=0;}
			if ($aimUpAxis==1) {$xUp=0;$yUp=1;$zUp=0;}
			if ($aimUpAxis==2) {$xUp=0;$yUp=0;$zUp=1;}
			if (`gmatch $priAxis "-*"`) {$x*=-1;$y*=-1;$z*=-1;}

			$tempString=`listRelatives -c $joint`;
			if (!size($tempString))
				parent $joint $rlaParent;
			if (`objExists $aimAt`)
				delete `aimConstraint -offset 0 0 0 -aimVector $x $y $z -upVector $xUp $yUp $zUp -worldUpType "objectrotation" -worldUpVector 0 1 0 -worldUpObject $aimAt $aimAt $rlaParent`;
			if (!size($tempString))
				parent -w $joint;
			}
		}

	if ($useWorldOrient)
		{
		$upVecObj=`createNode -n tempUpVector -p $joint transform`;
		parent -w $upVecObj;
		move -r -ws 0 1 0 $upVecObj;

		if ($worldOrientUp==0) $aimVector={-1,0,0};
		if ($worldOrientUp==1) $aimVector={0,-1,0};
		if ($worldOrientUp==2) $aimVector={0,0,-1};
		if ($worldOrientUp==3) $aimVector={1,0,0};
		if ($worldOrientUp==4) $aimVector={0,1,0};
		if ($worldOrientUp==5) $aimVector={0,0,1};

		if ($worldOrientForward==0) $aimUpV={1,0,0};
		if ($worldOrientForward==1) $aimUpV={0,1,0};
		if ($worldOrientForward==2) $aimUpV={0,0,1};
		if ($worldOrientForward==3) $aimUpV={-1,0,0};
		if ($worldOrientForward==4) $aimUpV={0,-1,0};
		if ($worldOrientForward==4) $aimUpV={0,0,-1};

		createNode -n tempAimAt -p $rlaParent transform;
		parent -w tempAimAt;
		move -r -ws 0 -1 0 tempAimAt;

		if ($worldOrientForward==-1 || $worldOrientForward==6)//forward==free
			$tempString=`aimConstraint -aimVector $aimVector[0] $aimVector[1] $aimVector[2] -upVector $upV[0] $upV[1] $upV[2] -worldUpType "object" -worldUpObject $upVecObj tempAimAt $rlaParent`;
		else //new way > v5.792
			$tempString=`aimConstraint -aimVector $aimVector[0] $aimVector[1] $aimVector[2] -upVector $aimUpV[0] $aimUpV[1] $aimUpV[2] -worldUpType "vector" -worldUpVector 0 0 1 tempAimAt $rlaParent`;
		delete $tempString[0] $upVecObj tempAimAt;
		}

	//FitGeometry aim
	$upVecObj=$rlaParent;
	if (`objExists ($rlaParent+"Aim_aimConstraint1")`)
		delete ($rlaParent+"Aim_aimConstraint1");
	if (`objExists ($rlaParent+"Aim")`)
		{
		if ($ikPlaneVectored)
			{
			if ($rlaParent==$iKStartJoint)
				aimConstraint -aimVector 1 0 0 -upVector 0 (1*$hipFlip) 0 -worldUpType "object" -worldUpObject $iKEndJoint $joint ($rlaParent+"Aim");
			else
				aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation" -worldUpObject ($iKStartJoint+"Aim")
				-worldUpVector 0 1 0 $joint ($rlaParent+"Aim");
			}
		else
			aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation" -worldUpObject $upVecObj
				-worldUpVector $upV[0] $upV[1] $upV[2] $joint ($rlaParent+"Aim");
		}

	makeIdentity -a 1 -t 0 -r 1 -s 0 $rlaParent;

	if (size($parentOtherChildren))
		{
		parent $parentOtherChildren $rlaParent;
		delete otherChildrenPlaceHolder;
		}

	parent $joint $rlaParent;
	//restore sibiling order
	if (size($rlaParentChildren)>1)
		{
		$newRlaParentChildren=`listRelatives -type joint -c $rlaParent`;
		for ($i=0;$i<size($newRlaParentChildren);$i++)
			{
			if ($joint==$newRlaParentChildren[$i])
				$newChildNr=$i;
			}
		if ($newChildNr!=$childNr)
			reorder -relative ($childNr-$newChildNr) $joint;
		}
	if (`objExists $generatedTransform1`) delete $generatedTransform1;
	if (`objExists $generatedTransform2`) delete $generatedTransform2;

	//restore connections
	for ($i=0;$i<size($connectCmds);$i++)
		if (catchQuiet (`eval ($connectCmds[$i])`)) 
			warning ("Failed: "+$connectCmds[$i]+"\n");

	//zero out endJoints
	if (!size($jointChildren) && !`attributeExists control $joint`)
		{
		setAttr ($joint+".jo") -type float3 0 0 0;
		setAttr ($joint+".r") -type float3 0 0 0;
		}

	//update skeleton scale
	if (`objExists ($rlaParent+"Bone")` && `objExists ($rlaParent+"Distance")`)
		{
		float $lenght=`getAttr ($rlaParent+"Distance.distance")`*(1.0/$scale);
		setAttr ($rlaParent+"Bone.sx") $lenght;
		}

	setAttr -l $lockTX ($joint+".tx");setAttr -l $lockTY ($joint+".ty");setAttr -l $lockTZ ($joint+".tz");
	setAttr -l $lockRX ($joint+".rx");setAttr -l $lockRY ($joint+".ry");setAttr -l $lockRZ ($joint+".rz");
	setAttr -l $lockPTX ($rlaParent+".tx");setAttr -l $lockPTY ($rlaParent+".ty");setAttr -l $lockPTZ ($rlaParent+".tz");
	setAttr -l $lockPRX ($rlaParent+".rx");setAttr -l $lockPRY ($rlaParent+".ry");setAttr -l $lockPRZ ($rlaParent+".rz");
	}

if (`objExists SwappingAxisInfo`)
	delete SwappingAxisInfo;

catchQuiet (`select $sel`);
//Restore `insert-mode`, as newer version of Maya will drop this when:createNode
if ($editPivotMode)
	if (!`manipMoveContext -q -editPivotMode Move`)
		EnterEditMode;
}
global proc string asLabel (string $obj)
{
string $label;
if (size(`ls -ap $obj`)>1)
	error ("More than one object matches name: "+$obj+"\n");
if (!`objExists $obj`)
	return "AA";
if (!`attributeExists "type" $obj`)
	return "BB";
int $labelNum=`getAttr ($obj+".type")`;
if (!`getAttr ($obj+".drawLabel")`)
	return "";

$label=`asLabelCodeLookup $labelNum 0`;
if ($labelNum==18)
	{
	$label=`getAttr ($obj+".otherType")`;
	}

return $label;
}
global proc string triRlaParent (string $joint)
{
string $tempString[]=`listRelatives -p -type joint $joint`;
string $rlaParent=$tempString[0];
return $rlaParent;
}
global proc string asUniqueName (string $obj)
{
int $numConnections;
string $newName=$obj;
string $newSDKname,$renameSuffix;
string $tempString[]=`ls $obj`;
string $tempString2[],$tempString3[],$tempString4[],$tempString5[],$tempString6[];

if (size($tempString)>1)
	for ($i=1;$i<99;$i++)
		if (!`objExists ($obj+$i)`)
			{
			$renameSuffix=$i;
			$newName=$obj+$renameSuffix;
			rename $tempString[0] $newName;
			//also duplicate associated DrivingSystems
			if (!`objExists FitSkeleton`)
				continue;
			$tempString2=`listConnections -s 1 -d 0 -type animCurve FitSkeleton`;
			for ($y=0;$y<size($tempString2);$y++)
				{
				if (!`gmatch $tempString2[$y] ("*"+$obj+"*")`)
					continue;
				$newSDKname=`substitute $obj $tempString2[$y] $newName`;
				if (`objExists $newSDKname`)
					error ("Tried to duplicate DrivingSystem \""+$tempString2[$y]+"\", and name it \""+$newSDKname+"\", but the name is taken");
				duplicate -n $newSDKname $tempString2[$y];
// duplication includes this connection
//				connectAttr -na ($newSDKname+".") FitSkeleton.drivingSystem;
				$tempString3=`listConnections -s 1 -d 0 -p 1 $tempString2[$y]`;
				tokenize $tempString3[0] "." $tempString4;
				tokenize $tempString4[1] "[" $tempString4;
				tokenize $tempString4[0] "_" $tempString4;
				$newFitSkeletonAttr=$tempString4[0]+"_"+$tempString4[1]+$renameSuffix+"_"+$tempString4[2];
//$tempString7=`listAttr -ud $newSDKname`;
//print ("duplicate -n "+$newSDKname+" "+$tempString2[$y]+" : "+$tempString7[1]+"\n");
				if (!`attributeExists $newFitSkeletonAttr FitSkeleton`)
					addAttr -k 0 -ln $newFitSkeletonAttr -at bool -dv true -multi FitSkeleton;
				$tempString5=`listConnections -s 1 -d 0 -p 1 -c 1 $tempString2[$y]`;
				tokenize $tempString5[0] "." $tempString6;
				$numConnections=`getAttr -s ("FitSkeleton."+$newFitSkeletonAttr)`;
				connectAttr ("FitSkeleton."+$newFitSkeletonAttr+"["+$numConnections+"]") ($newSDKname+"."+$tempString6[1]);
				select $newSDKname $tempString2[$y];
				}
			break;
			}
return $newName;
}
global proc string[] triFitJointIKInfo (string $joint)
{
int $IKNumCtrls=2;
string $ik,$IKParentJoint,$IKMiddleJoint,$IKChildJoint,$IKSolver,$IKParentJointLabel;
string $triFitJointIKInfo[],$tempString[];
$tempString=`ls -l $joint`;
tokenize $tempString[0] "|" $tempString;
for ($i=size($tempString)-1;$i>-1;$i--)
	{
	$label=`asLabel $tempString[$i]`;
	if ($i<size($tempString)-1)
		if (`gmatch $label "*Hand*"` || `gmatch $label "*Chest*"`)// || `gmatch $label "*Foot*"` //removed, allowing for Qtoes joints `under` foot
			break;
	if (`gmatch $label "*Shoulder*"` || `gmatch $label "*Hip*"` || `gmatch $label "*Root*"` || `gmatch $label "0*"`)
		{
		$IKParentJoint=$tempString[$i];
		$IKParentJointLabel=$label;
		break;
		}
	}

string $jointAllDescendents[]=`listRelatives -allDescendents -type joint $joint`;
string $anotherSpineIkJoints[];
$jointAllDescendents[size($jointAllDescendents)]=$joint;
for ($i=size($jointAllDescendents)-1;$i>-1;$i--)
	{
	$label=`asLabel $jointAllDescendents[$i]`;
	int $validLabelHit=0;
	if (`gmatch $label "*Hand*"` && `gmatch $IKParentJointLabel "*Shoulder*"`)
		$validLabelHit=1;
	if (`gmatch $label "*Foot*"` && `gmatch $IKParentJointLabel "*Hip*"`)
		$validLabelHit=1;
	if (`gmatch $label "*Toes*"` && `gmatch $IKParentJointLabel "*Hip*"`)
		$validLabelHit=1;
	if (`gmatch $label "*Chest*"` && `gmatch $IKParentJointLabel "*Root*"`)
		$validLabelHit=1;
	if ($validLabelHit)
		{
		$IKChildJoint=$jointAllDescendents[$i];
		break;
		}
	if (`gmatch $label "0*"` && $jointAllDescendents[$i]!=$joint)//track $anotherSpineIkJoints, so $IKChildJoint is not from another SplineIK
		{
		$tempString=`listRelatives -allDescendents -type joint $jointAllDescendents[$i]`;
		$anotherSpineIkJoints=`stringArrayCatenate $anotherSpineIkJoints $tempString`;
		}
	if (`gmatch $label "*[1-9]*"` && `gmatch $IKParentJointLabel "*0*"` && !`stringArrayCount $jointAllDescendents[$i] $anotherSpineIkJoints`)
		$IKChildJoint=$jointAllDescendents[$i];
	}

if ($IKParentJoint!= "" && $IKChildJoint!="")
	{
	//Find $IKMiddleJoint
	$tempString=`ls -l $IKChildJoint`;
	tokenize $tempString[0] "|" $tempString;
	int $numIkJoints=0;
	for ($i=size($tempString)-1;$i>-1;$i--)
		{
		$numIkJoints++;
		if ($tempString[$i]==$IKParentJoint)
		break;
		}
	int $middleNr=$numIkJoints/2;
	$IKMiddleJoint=$tempString[size($tempString)-1-$middleNr];
	//Find $IKNumCtrls
	$tempString=`ls -l $IKChildJoint`;
	tokenize $tempString[0] "|" $tempString;
	for ($i=size($tempString)-2;$i>-1;$i--)
		{
		if ($tempString[$i]==$IKParentJoint)
		break;
		$label=`asLabel $tempString[$i]`;
		if (`gmatch $label "*Mid*"` || `gmatch $label "[0-9]*"`)
			$IKNumCtrls++;
		}

	$IKSolver="ikRPsolver";
	$label=`asLabel $IKParentJoint`;
	if (`gmatch $label "*Shoulder*"`)
		$ik="Arm"+`substitute "Shoulder" $label ""`;
	if (`gmatch $label "*Hip*"`)
		$ik="Leg"+`substitute "Hip" $label ""`;
	if (`gmatch $label "*Root*"`)
		{
		$ik="Spine"+`substitute "Root" $label ""`;
		$IKSolver="ikSplineSolver";
		}
	if (`gmatch $label "*0*"` && !`gmatch $label "*[0-9]0*"`)
		{
		$ik="Spline"+`substitute "[0-9]*" $label ""`;
		$IKSolver="ikSplineSolver";
		}

	$triFitJointIKInfo[0]=$ik;
	$triFitJointIKInfo[1]=$IKParentJoint;
	$triFitJointIKInfo[2]=$IKMiddleJoint;	
	$triFitJointIKInfo[3]=$IKChildJoint;	
	$triFitJointIKInfo[4]=$IKSolver;
	$triFitJointIKInfo[5]=$IKNumCtrls;
	}

return $triFitJointIKInfo;
}
global proc string triGetTerAxis (string $priAxis, string $secAxis)
{
int $flip;
string $terAxis;
string $absPriAxis=`asAbsAxis $priAxis`;
string $absSecAxis=`asAbsAxis $secAxis`;

if ($absPriAxis=="X" && $absSecAxis=="Y") {$terAxis="Z";}
if ($absPriAxis=="X" && $absSecAxis=="Z") {$terAxis="Y";$flip=!$flip;}
if ($absPriAxis=="Y" && $absSecAxis=="X") {$terAxis="Z";$flip=!$flip;}
if ($absPriAxis=="Y" && $absSecAxis=="Z") {$terAxis="X";}
if ($absPriAxis=="Z" && $absSecAxis=="X") {$terAxis="Y";}
if ($absPriAxis=="Z" && $absSecAxis=="Y") {$terAxis="X";$flip=!$flip;}

if (`gmatch $priAxis "-*"`) $flip=!$flip;
if (`gmatch $secAxis "-*"`) $flip=!$flip;
if ($flip) $terAxis="-"+$terAxis;

return $terAxis;
}
global proc string asAbsAxis (string $axis)
{
string $absAxis=$axis;
if (`gmatch $axis "-*"`)
	$absAxis=`substitute "-" $axis ""`;
return $absAxis;
}
global proc float[] asAxisToVector (string $axis)
{
float $vector[3];

if ($axis=="X") $vector={1,0,0};
if ($axis=="Y") $vector={0,1,0};
if ($axis=="Z") $vector={0,0,1};
if ($axis=="-X") $vector={-1,0,0};
if ($axis=="-Y") $vector={0,-1,0};
if ($axis=="-Z") $vector={0,0,-1};

return $vector;
}
// resample copy right adv6 -- thanks //
// model check symetry copy right adv6 -- thanks //
global proc asFaceModelCheck ()
{
string $geometry=`textField -q -tx asFaceFaceTextField`;

if (!`objExists $geometry`)
	error "No geometry choosen for \"Face\"";

select $geometry;
triModelChecker;
}

global proc triModelCheckerUI ()
{
if (`window -q -ex triModelChecker`)
	deleteUI triModelChecker;
window -t "Model Checker (ADV6)" -w 60 triModelChecker;
columnLayout;
	separator -st none -h 10;
	text -l "Check for default Transformation values,";
	text -l "and Model Symmetry.";
	separator -st none -h 5;
	text -l "Select the model, then:";
	separator -st none -h 10;
	button -w 50 -l "Check" -c triModelChecker;
showWindow;
}

global proc triModelChecker ()
{
global string $gMainProgressBar;
int $numVtxs,$mirrortVtx,$i,$gameEngine;
int $asSkipModelSymmetryCheck=`objExists asSkipModelSymmetryCheck`;
int $tempInt[];
float $mag;
float $posA[],$posB[],$tempFloat[];
string $sel[]=`ls -sl`;
string $m,$warningM,$objectType;
string $okMessage="Continue Anyway";
string $historyNodes[],$tempString[],$checkTransforms[];

if ($asSkipModelSymmetryCheck)
	delete asSkipModelSymmetryCheck;

if (!size($sel))
	error "Nothing Selected";

$tempString=`listRelatives -c -type mesh`;
if (!`size($tempString)`)
	error "Selected object is not a Mesh, Select the your model instead.";

$warningM="This will likely cause errors if you proceed.\n\n"
				 +"It is recommended that you use the \"Model Clean (ADV6)\" tool,\n"
				 +"before rigging.\n";

if (`checkBox -q -ex asFaceGameEngineCheckBox`)
	$gameEngine=`checkBox -q -v asFaceGameEngineCheckBox`;

//find parent Transforms
$tempString=`ls -l $sel[0]`;
tokenize $tempString[0] "|" $checkTransforms;
for ($i=0;$i<size($checkTransforms);$i++)
	{
	select $checkTransforms[$i];
	refresh;
	$m="";
	$tempFloat=`getAttr ($checkTransforms[$i]+".t")`;
	if ($tempFloat[0]!=0) $m+="TranslateX = "+$tempFloat[0]+", should be 0\n";
	if ($tempFloat[1]!=0) $m+="TranslateY = "+$tempFloat[1]+", should be 0\n";
	if ($tempFloat[2]!=0) $m+="TranslateZ = "+$tempFloat[2]+", should be 0\n";
	$tempFloat=`getAttr ($checkTransforms[$i]+".r")`;
	if ($tempFloat[0]!=0) $m+="RotateX = "+$tempFloat[0]+", should be 0\n";
	if ($tempFloat[1]!=0) $m+="RotateY = "+$tempFloat[1]+", should be 0\n";
	if ($tempFloat[2]!=0) $m+="RotateZ = "+$tempFloat[2]+", should be 0\n";
	$tempFloat=`getAttr ($checkTransforms[$i]+".s")`;
	if ($tempFloat[0]!=1) $m+="Sx = "+$tempFloat[0]+", should be 1\n";
	if ($tempFloat[1]!=1) $m+="ScaleY = "+$tempFloat[1]+", should be 1\n";
	if ($tempFloat[2]!=1) $m+="ScaleZ = "+$tempFloat[2]+", should be 1\n";
	$tempFloat=`getAttr ($checkTransforms[$i]+".rp")`;
	if ($tempFloat[0]!=0) $m+="RotatePivotX = "+$tempFloat[0]+", should be 0\n";
	if ($tempFloat[1]!=0) $m+="RotatePivotY = "+$tempFloat[1]+", should be 0\n";
	if ($tempFloat[2]!=0) $m+="RotatePivotZ = "+$tempFloat[2]+", should be 0\n";
	$tempFloat=`getAttr ($checkTransforms[$i]+".sp")`;
	if ($tempFloat[0]!=0) $m+="ScalePivotX = "+$tempFloat[0]+", should be 0\n";
	if ($tempFloat[1]!=0) $m+="ScalePivotY = "+$tempFloat[1]+", should be 0\n";
	if ($tempFloat[2]!=0) $m+="ScalePivotZ = "+$tempFloat[2]+", should be 0\n";

	if ($m!="")
		$m="Object: \""+$checkTransforms[$i]+"\"\n\n"+$m+"\nThe above transform values are Non-Default values.\n"+$warningM;
	if ($m!="")
		{
		$dialog=`confirmDialog -t "Confirm (ADV6)" -m $m -b $okMessage -b "Cancel" -db "Cancel" -ds "Cancel"`;
		if ($dialog!=$okMessage)
			error "Operation cancelled. It is recommended that you fix the Non-Default transform values.";
		}
	}

//contruction-history check
$historyNodes=`listHistory -pdo 1 -il 2 $sel[0]`;
$m="";
for ($i=0;$i<size($historyNodes);$i++)
	{
	$objectType=`objectType $historyNodes[$i]`;
	if ($objectType!="skinCluster" && $objectType!="blendShape" && $objectType!="tweak" && $objectType!="deltaMush")
		$m+=$historyNodes[$i]+"\n";
	if ($objectType=="deltaMush" && $gameEngine)
		$m+="DeltaMush not supported in GameEngine.\n"+$historyNodes[$i]+"\n";
	}
if ($m!="")
	{
	$m+="\nThe above HistoryNodes were found.\n"+$warningM;
	$dialog=`confirmDialog -t "Confirm" -m $m -b $okMessage -b "Cancel" -db "Cancel" -ds "Cancel"`;
	if ($dialog!=$okMessage)
		error "Operation cancelled. It is recommended that you remove the HistoryNodes.";
	}

//Symmetry check
if (!$asSkipModelSymmetryCheck)
	{
	if (`objExists closestSampler`) delete closestSampler;
	createNode -n closestSampler closestPointOnMesh;
	connectAttr -f ($sel[0]+".outMesh") closestSampler.inMesh;
	$tempInt=`polyEvaluate -v $sel[0]`;
	$numVtxs=$tempInt[0];
	select -cl;
	progressBar -e -st "Checking symmetry" -bp -ii 1 -min 0 -max $numVtxs $gMainProgressBar;
	for ($i=0;$i<$numVtxs;$i++)
		{
		if (`progressBar -q -ic $gMainProgressBar`)
			{progressBar -e -ep $gMainProgressBar;break;}
		progressBar -e -s 1 $gMainProgressBar;
		$posA=`xform -q -ws -t ($sel[0]+".vtx["+$i+"]")`;
		if ($posA[0]>0.001)
			continue;
		setAttr closestSampler.inPosition ($posA[0]*-1) $posA[1] $posA[2];
		$mirrortVtx=`getAttr closestSampler.closestVertexIndex`;
		$posB=`xform -q -ws -t ($sel[0]+".vtx["+$mirrortVtx+"]")`;
		$mag=`mag <<($posA[0]-($posB[0]*-1)),($posA[1]-$posB[1]),($posA[2]-$posB[2])>>`;
		if ($mag>0.001)
			select -add ($sel[0]+".vtx["+$i+"]") ($sel[0]+".vtx["+$mirrortVtx+"]");
		}
	progressBar -e -ep $gMainProgressBar;
	delete closestSampler;
	refresh;
	if (size(`ls -sl`))
		{
		$dialog=`confirmDialog -t "Confirm" -m "Selected verticies are not symmetrical" -b $okMessage -b "Cancel" -db "Cancel" -ds "Cancel"`;
		if ($dialog!=$okMessage)
			error "Operation cancelled. It is recommended that you make the model symmetrical.";
		}
	else
		print "// Model is symmetrical.\n";
	}
}
// detail mush adv6 -- thanks //
global proc triHardenWeights ()
{
global string $gMainProgressBar;
string $sel[]=`ls -sl`;
int $hasSkinCluster;
string $maxTransform;
string $tempString[],$history[],$joints[],$transforms[];
float $values[];
string $skinCluster;
for ($i=0;$i<size($sel);$i++)
	{
	$tempString=`listRelatives -s -ni $sel[$i]`;
	if (size($tempString)<1)
		continue;

	$hasSkinCluster=0;
	$history=`listHistory -pdo 1 $sel[$i]`;
	for ($y=0;$y<size($history);$y++)
		if (`nodeType $history[$y]` == "skinCluster")
			{
			$hasSkinCluster=1;
			$skinCluster=$history[$y];
			}
	if (!$hasSkinCluster)
		error ("Object:\""+$sel[$i]+"\" has not skinCluster");		
	$joints=`listConnections ($skinCluster+".matrix")`;
	for ($y=0;$y<size($joints);$y++)
		setAttr ($joints[$y]+".lockInfluenceWeights") 0;

	int $numVtxs[]=`polyEvaluate -v $sel[$i]`;
	progressBar -e -st "Hardening Vtx weight" -bp -ii 1 -min 0 -max $numVtxs[0] $gMainProgressBar;
	for ($y=0;$y<$numVtxs[0];$y++)
		{
		if (`progressBar -q -ic $gMainProgressBar`)
			{progressBar -e -ep $gMainProgressBar;error "Interrupted";}
		progressBar -e -s 1 $gMainProgressBar;
		$transforms=`skinPercent -ignoreBelow 0.001 -q -t $skinCluster ($sel[$i]+".vtx["+$y+"]")`;
		$values=`skinPercent -ignoreBelow 0.001 -q -v $skinCluster ($sel[$i]+".vtx["+$y+"]")`;
		float $maxValue=0;
		for ($z=0;$z<size($transforms);$z++)
			{
			if ($values[$z]>$maxValue)
				{
				$maxValue=$values[$z];
				$maxTransform=$transforms[$z];
				}
			}
		skinPercent -tv $maxTransform 1 $skinCluster ($sel[$i]+".vtx["+$y+"]");
		}
	progressBar -e -ep $gMainProgressBar;
	}
}

global proc triApplyDeltaMush ()
{
string $tempString[];
string $confirmResult,$systemCmd;

deltaMush -smoothingIterations 10 -smoothingStep 0.5 -pinBorderVertices 1 -envelope 1;
triConnectDeltaMushScale;

print "// DeltaMush applied\n";
}

global proc triConnectDeltaMushScale () 
{
if (!`objExists Main`)
	return;
string $deltaMushNodes[]=`ls -type deltaMush`;

for ($i=0;$i<size($deltaMushNodes);$i++)
	{
	if (`isConnected MainScaleMultiplyDivide.outputX ($deltaMushNodes[$i]+".sx")`)
		continue;
	connectAttr MainScaleMultiplyDivide.outputX ($deltaMushNodes[$i]+".sx");
	connectAttr MainScaleMultiplyDivide.outputY ($deltaMushNodes[$i]+".sy");
	connectAttr MainScaleMultiplyDivide.outputZ ($deltaMushNodes[$i]+".sz");
	}
}
/// import curve adv 6 //
global proc ControllerGalleryImport ()
{
// float $charHeight=`getCharHeight`;
string $controllerGalleryFile=`trInstallToolsTri3D` + "/Functions/Settup/controller.ma";

if (!`file -q -ex $controllerGalleryFile`)
	error ("Not found:"+$controllerGalleryFile);
if (`objExists deleteThis`)
	delete deleteThis;
file -i $controllerGalleryFile;}



// ### auto Rig ### //
global proc choseSkeletonRig (){
	global string $mnHumanSkeleton;
	global string $mnCatSkeleton;
	global string $cMenuSkeleton;
	global string $importCheckBox;
	string $cInstallToolsTri3D = `trInstallToolsTri3D`;
		string $skeHuman= ($cInstallToolsTri3D + "/Functions/System/Human.ma");
		string $skeCat= ($cInstallToolsTri3D + "/Functions/System/Cat.ma");
	string $selectedItem = `optionMenu -query -value option_skeleton`; 
	// string $choseHuman = `menuItem -q -select mnCatSkeleton`;
	// string $choseCat = `menuItem -q -enable true mnCatSkeleton`;
	if ($selectedItem == "Human"){ 
		file -i $skeHuman;
		global string $importCheckBox;
		checkBox -edit -value 1 importCheckBox;
		button -edit -enable false buttonJointImport;
		button -edit -enable true  deleteCheckBox;

	}
	if ($selectedItem == "Cat"){
		file -i $skeCat;
		global string $importCheckBox;
		checkBox -edit -value 1 importCheckBox;
		button -edit -enable false buttonJointImport;
		button -edit -enable true  deleteCheckBox;
	}
}
global proc refGeoTest(){
	string $cInstallToolsTri3D = `trInstallToolsTri3D`;
	string $GeoTest= ($cInstallToolsTri3D + "/Functions/System/BodyTest.ma");
	file -r $GeoTest;

}

global proc deleteImportJoint(){
	global string $buttonImportJoint;
	global string $importCheckBox;
	delete "Root";
	button -edit -enable true buttonJointImport;
	checkBox -edit -value 0 importCheckBox;
	button -edit -enable false  deleteCheckBox;


}

// global proc importHumanSkeleton ()
// {
// // float $charHeight=`getCharHeight`;
// string $controllerGalleryFile=`trInstallToolsTri3D` + "/Functions/System/Human.ma";

// if (!`file -q -ex $controllerGalleryFile`)
// 	error ("Not found:"+$controllerGalleryFile);
// if (`objExists deleteThis`)
// 	delete deleteThis;
// file -i $controllerGalleryFile;}

global proc doneSettupSkeleton(){
	mirrorJoint -mirrorYZ -mirrorBehavior -searchReplace "R_" "L_" R_Scapula;
	mirrorJoint -mirrorYZ -mirrorBehavior -searchReplace "R_" "L_" R_Hip;
	select -cl;

}
global proc buildHuman(){
	global string $nameAutoRig;
	global string $cTextFieldFrontName;
	global string $versionTools;
	global string $progressBarTools;
	progressBar -edit -hlc 1 0 0  -step -100 progressBarRig;

		// curve controller
			string $CubeCtrl = `curve -n "CubeCtrl" -d 1 -p -0.43 2.59 2.59 -p -0.43 2.59 -2.59 -p 0.43 2.59 -2.59 -p 0.43 2.59 2.59 -p -0.43 2.59 2.59 -p -0.43 -2.59 2.59 -p -0.43 -2.59 -2.59 -p -0.43 2.59 -2.59 -p 0.43 2.59 -2.59 -p 0.43 -2.59 -2.59 -p -0.43 -2.59 -2.59 -p 0.43 -2.59 -2.59 -p 0.43 -2.59 2.59 -p -0.43 -2.59 2.59 -p 0.43 -2.59 2.59 -p 0.43 2.59 2.59 -p 0.43 2.59 -2.59 -p 0.43 -2.59 -2.59`;
			string $HandCtrl = `curve -n "HandCtrl" -d 3 -p 0 1 0.26 -p 0 1 0.42 -p 0 1 1.16 -p 0 0.69 2.34 -p 0 -0.69 2.34 -p 0 -1 1.16 -p 0 -1 0.44 -p 0 -1 0.26`;
			string $IKFKCtrl = `curve -n "IKFKSWCtrl" -d 1 -p 0 0 0 -p 0 0 -1.14 -p -0.38 0 -1.14 -p -0.38 0 -1.89 -p 0.38 0 -1.89 -p 0.38 0 -1.14 -p 0 0 -1.14`;
			string $LocatorCtrl = `curve -n "LocatorCtrl" -d 1 -p -1.03 0 0 -p 1.03 0 0 -p 0 0 0 -p 0 0 1.03 -p 0 0 -1.03 -p 0 0 0 -p 0 1.03 0 -p 0 -1.03 0`;
			string $CirclePlusBodyCtrl = `curve -n "CirclePlusBodyCtrl" -d 1 -p 0 0 -2 -p 0 0.76 -1.85 -p 0 1.41 -1.41 -p 0 1.85 -0.76 -p 0 2 0 -p 0 1.85 0.76 -p 0 1.41 1.41 -p 0 0.76 1.85 -p 0 0 2 -p 0 0 0 -p 0 0 -2 -p 0 -0.76 -1.85 -p 0 -1.41 -1.41 -p 0 -1.85 -0.76 -p 0 -2 0 -p 0 0 0 -p 0 2 0 -p 0 1.85 0.76 -p 0 1.41 1.41 -p 0 0.76 1.85 -p 0 0 2 -p 0 -0.76 1.85 -p 0 -1.41 1.41 -p 0 -1.85 0.76 -p 0 -2 0`;
			string $CirclePlusHandCtrl = `curve -n "CirclePlusHandCtrl" -d 1 -p 0 0 -2 -p 0.76 0 -1.85 -p 1.41 0 -1.41 -p 1.85 0 -0.76 -p 2 0 0 -p 1.85 0 0.76 -p 1.41 0 1.41 -p 0.76 0 1.85 -p 0 0 2 -p 0 0 0 -p 0 0 -2 -p -0.76 0 -1.85 -p -1.41 0 -1.41 -p -1.85 0 -0.76 -p -2 0 0 -p 0 0 0 -p 2 0 0 -p 1.85 0 0.76 -p 1.41 0 1.41 -p 0.76 0 1.85 -p 0 0 2 -p -0.76 0 1.85 -p -1.41 0 1.41 -p -1.85 0 0.76 -p -2 0 0`;
			string $BodyCtrl = `curve -n "Body_Ctrl" -d 1 -p -3.14 -0 0.62 -p -4 0 0.8 -p -4 0 1.6 -p -5.6 0 0 -p -4 0 -1.6 -p -4 0 -0.8 -p -3.14 0 -0.62 -p -2.95 0 -1.22 -p -2.66 0 -1.78 -p -2.26 0 -2.26 -p -1.78 0 -2.66 -p -1.22 0 -2.95 -p -0.62 0 -3.14 -p -0.8 0 -4 -p -1.6 0 -4 -p 0 0 -5.6 -p 1.6 0 -4 -p 0.8 0 -4 -p 0.62 0 -3.14 -p 1.22 0 -2.95 -p 1.78 0 -2.66 -p 2.26 0 -2.26 -p 2.66 0 -1.78 -p 2.95 0 -1.22 -p 3.14 0 -0.62 -p 4 0 -0.8 -p 4 0 -1.6 -p 5.6 0 0 -p 4 0 1.6 -p 4 0 0.8 -p 3.14 -0 0.62 -p 2.95 -0 1.22 -p 2.66 -0 1.78 -p 2.26 -0 2.26 -p 1.78 -0 2.66 -p 1.22 -0 2.95 -p 0.62 -0 3.14 -p 0.8 0 4 -p 1.6 0 4 -p 0 0 5.6 -p -1.6 0 4 -p -0.8 0 4 -p -0.62 -0 3.14 -p -1.22 -0 2.95 -p -1.78 -0 2.66 -p -2.26 -0 2.26 -p -2.66 -0 1.78 -p -2.95 -0 1.22 -p -3.14 -0 0.62`;
			// string $LocatorCtrl = `curve -n "LocatorCtrl" -d 1 -p -0.87 0 0 -p 0.87 0 0 -p 0 0 0 -p 0 0 0.87 -p 0 0 -0.87 -p 0 0 0 -p 0 0.87 0 -p 0 -0.87 0`;
	refresh;
				// color curve
					setAttr ($CubeCtrl + "|curveShape1.overrideEnabled") 1;
					setAttr ($CubeCtrl + "|curveShape1.overrideColor") 13;
					setAttr ($HandCtrl + "|curveShape2.overrideEnabled") 1;
					setAttr ($HandCtrl + "|curveShape2.overrideColor") 17;
					setAttr ($IKFKCtrl + "|curveShape3.overrideEnabled") 1;
					setAttr ($IKFKCtrl + "|curveShape3.overrideColor") 20;
					setAttr ($LocatorCtrl + "|curveShape4.overrideEnabled") 1;
					setAttr ($LocatorCtrl + "|curveShape4.overrideColor") 31;
					setAttr ($CirclePlusBodyCtrl + "|curveShape5.overrideEnabled") 1;
					setAttr ($CirclePlusBodyCtrl + "|curveShape5.overrideColor") 18;
					setAttr ($CirclePlusHandCtrl + "|curveShape6.overrideEnabled") 1;
					setAttr ($CirclePlusHandCtrl + "|curveShape6.overrideColor") 18;
					setAttr ($BodyCtrl + "|curveShape7.overrideEnabled") 1;
					setAttr ($BodyCtrl + "|curveShape7.overrideColor") 14;
	refresh;
	
	// name rig
		string $nameRig = `textField -q -tx name_autorig`;
		group -n $nameRig -empty;
		string $mainCtrl = "Main_ctrl";
	refresh;
	// setup group 
		string $Neck_grp[] = {"Neck_grp", "Neck_ctrl", "Head_m_grp", "Head_ctrl"};
		string $Hand_grp[] = {"Hand_grp_L","Hand_grp_R"};
		string $M_Joint[] = {"M_Root","M_Spine1","M_Chest"};
		string $IK_Ctrl_Grp[] = {"IK_Root_grp","IK_Chest_grp"};
		string $IKFK_Body_grp[] = {"IK_Body_grp","FK_Body_grp"};
		string $IK_Joint[] = {"IK_Root","IK_Spine1","IK_Chest"};
		string $FK_Joint[] = {"FK_Root","FK_Spine1","FK_Chest"};
		string $FK_Ctrl[] = {"FK_Root_ctrl","FK_Spine_ctrl","FK_Chest_ctrl"};
		string $FK_Ctrl_Grp[] = {"FK_Root_grp","FK_Spine_grp","FK_Chest_grp"};
		string $nAttrMainCtrl[] = {"Version_Tool", "Joint_Visibility", "Annotation"};
		string $pos[] = {".tx",".ty",".tz",".rx",".ry",".rz",".sx",".sy",".sz",".v"};
		string $IK_Ctrl[] = {"IK_Root_Ctrl","IK_Chest_Ctrl","Root_IK_jnt_Ctrl","Chest_IK_jnt_Ctrl"};
		string $curShape[] = {"curveShape1","curveShape2","curveShape3","curveShape4","curveShape5","curveShape6","curveShape7"};
		string $Arm[] = {"Scapula","Shoulder","Elbow","Wrist"};
		string $Finger[] = {"Thumb1","Thumb2","Thumb3","Index1","Index2","Index3","Middle1","Middle2","Middle3","Ring1","Ring2","Ring3","Pinky1","Pinky2","Pinky3"};
		string $Hand[] = {"Hand"};
		string $distance[] = {"Distance_Hand_Ctrl"};
		string $mul_hand_L[] = {"Hand_SDK_L", "Hand_BlendCL_L"};
		string $L_IK_Hand_Ctrl[] = {"L_IK_Hand_Ctrl", "L_Elbow_IK_Ctrl"};
		string $constraint_Hand_L[] = {"M_Shoulder_Constraint_L","M_Elbow_Constraint_L","M_Wrist_Constraint_L","L_Hand_Constraint", "L_Elbow_IK_Constraint"};
		
		int $number[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
		int $numIterations[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
		int $startIndex[]  = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
		int $iterationCount[]  = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
	refresh;
	// group spacial
		string $GroupSpecial[] = {"CONTROLLER","SYSTEMJNT","Joint_BindSkin","CONSTRAIN_CTRL","CONSTRAIN_JNT","System","Geometry","System_Rig","Main","Body_Ctrl_grp","Arm_grp_L","Arm_grp_R"};
			for ($group in $GroupSpecial){
				group -n $group -empty;
			}
	refresh;
			for ($group in $Hand){
				float $scale = 0.5;
				group -n ($group + "_grp_L") -empty;
				group -n ($group + "_grp_R") -empty;
				string $handCtrl_L = `curve -n ("Hand_Ctrl_L") -d 3 -p 0 1 0.26 -p 0 1 0.42 -p 0 1 1.16 -p 0 0.69 2.34 -p 0 -0.69 2.34 -p 0 -1 1.16 -p 0 -1 0.44 -p 0 -1 0.26`;
				string $handCtrl_R = `curve -n ("Hand_Ctrl_R") -d 3 -p 0 1 0.26 -p 0 1 0.42 -p 0 1 1.16 -p 0 0.69 2.34 -p 0 -0.69 2.34 -p 0 -1 1.16 -p 0 -1 0.44 -p 0 -1 0.26`;

				// attribute 
					addAttr -ln "Switch_IK_FK" -at "float" -min 0 -max 10 -keyable true $handCtrl_L;
					addAttr -ln "Stretchy" -at "float" -min 0 -max 10 -keyable true $handCtrl_L;
					addAttr -ln "Global" -at "float" -min 0 -max 10 -keyable true $handCtrl_L;
					addAttr -ln "Follow_Elbow" -at "long" -min 0 -max 1 -keyable true $handCtrl_L;

					addAttr -ln "_________________" -at "long" -min 0 -max 0 -keyable true $handCtrl_L;

					addAttr -ln "Spear" -at "float" -min -2 -max 10 -keyable true $handCtrl_L;
					addAttr -ln "Index" -at "float" -min -2 -max 10 -keyable true $handCtrl_L;
					addAttr -ln "Middle" -at "float" -min -2 -max 10 -keyable true $handCtrl_L;
					addAttr -ln "Ring" -at "float" -min -2 -max 10 -keyable true $handCtrl_L;
					addAttr -ln "Pinky" -at "float" -min -2 -max 10 -keyable true $handCtrl_L;
					addAttr -ln "Thumb" -at "float" -min -2 -max 10 -keyable true $handCtrl_L;

					// ##
					addAttr -ln "Switch_IK_FK" -at "float" -min 0 -max 10 -keyable true $handCtrl_R;
					addAttr -ln "Stretchy" -at "float" -min 0 -max 10 -keyable true $handCtrl_R;
					addAttr -ln "Global" -at "float" -min 0 -max 10 -keyable true $handCtrl_R;
					addAttr -ln "Follow_Elbow" -at "long" -min 0 -max 1 -keyable true $handCtrl_R;

					addAttr -ln "_________________" -at "long" -min 0 -max 1 -keyable true $handCtrl_R;

					addAttr -ln "Index" -at "float" -min -2 -max 10 -keyable true $handCtrl_R;
					addAttr -ln "Middle" -at "float" -min -2 -max 10 -keyable true $handCtrl_R;
					addAttr -ln "Ring" -at "float" -min -2 -max 10 -keyable true $handCtrl_R;
					addAttr -ln "Pinky" -at "float" -min -2 -max 10 -keyable true $handCtrl_R;
					addAttr -ln "Thumb" -at "float" -min -2 -max 10 -keyable true $handCtrl_R;


				setAttr ($handCtrl_L + ".scaleX") $scale;
				setAttr ($handCtrl_L + ".scaleY") $scale;
				setAttr ($handCtrl_L + ".scaleZ") $scale;
				setAttr ($handCtrl_R + ".scaleX") $scale;
				setAttr ($handCtrl_R + ".scaleY") $scale;
				setAttr ($handCtrl_R + ".scaleZ") $scale;	
				parent 	$handCtrl_L ($group + "_grp_L");	
				parent 	$handCtrl_R ($group + "_grp_R");	
				makeIdentity -apply true -s 1 -n 0 -pn 1 $handCtrl_R;
				makeIdentity -apply true -s 1 -n 0 -pn 1 $handCtrl_L;
				setAttr ("curveShape8.overrideEnabled") 1;
				setAttr ("curveShape8.overrideColor") 17;	
				setAttr ("curveShape9.overrideEnabled") 1;
				setAttr ("curveShape9.overrideColor") 17;	
			}
	refresh;
		// #### hand grp #### //
			for ($group in $Arm ){
				group -n ($group + "_grp_L") -empty;
				circle -n ($group + "_Ctrl_L") ;
				parent ($group + "_Ctrl_L") ($group + "_grp_L");
				setAttr ($group + "_Ctrl_L" + "Shape.overrideEnabled") 1;
				setAttr ($group + "_Ctrl_L" + "Shape.overrideColor") 18;	
				delete -ch 	($group + "_Ctrl_L");
				group -n ($group + "_grp_R") -empty;		
				circle -n ($group + "_Ctrl_R") ;
				parent ($group + "_Ctrl_R") ($group + "_grp_R");
				setAttr ($group + "_Ctrl_R" + "Shape.overrideEnabled") 1;
				setAttr ($group + "_Ctrl_R" + "Shape.overrideColor") 18;	
				delete -ch 	($group + "_Ctrl_R");	
			}
	refresh;
			for ($group in $Finger){
				float $scale = 0.1;
				group -n ($group + "_grp_L") -empty;
				group -n ($group + "_ros_L") -empty;
				circle -n ($group + "_Ctrl_L") ;
				setAttr ($group + "_Ctrl_L" + ".ry") 90;
				setAttr ($group + "_Ctrl_L" + ".scaleX") $scale;
				setAttr ($group + "_Ctrl_L" + ".scaleY") $scale;
				setAttr ($group + "_Ctrl_L" + ".scaleZ") $scale;
				makeIdentity -apply true -s 1 -r 1 -n 0 -pn 1 ($group + "_Ctrl_L");
				parent ($group + "_Ctrl_L") ($group + "_ros_L");
				parent ($group + "_ros_L") ($group + "_grp_L") ;
				setAttr ($group + "_Ctrl_L" + "Shape.overrideEnabled") 1;
				setAttr ($group + "_Ctrl_L" + "Shape.overrideColor") 18;	
				delete -ch 	($group + "_Ctrl_L");	
				group -n ($group + "_grp_R") -empty;
				group -n ($group + "_ros_R") -empty;
				circle -n ($group + "_Ctrl_R") ;
				setAttr ($group + "_Ctrl_R" + ".ry") 90;
				setAttr ($group + "_Ctrl_R" + ".scaleX") $scale;
				setAttr ($group + "_Ctrl_R" + ".scaleY") $scale;
				setAttr ($group + "_Ctrl_R" + ".scaleZ") $scale;
				makeIdentity -apply true -s 1 -r 1 -n 0 -pn 1 ($group + "_Ctrl_R");
				parent ($group + "_Ctrl_R") ($group + "_ros_R");
				parent ($group + "_ros_R") ($group + "_grp_R");
				setAttr ($group + "_Ctrl_R" + "Shape.overrideEnabled") 1;
				setAttr ($group + "_Ctrl_R" + "Shape.overrideColor") 18;	
				delete -ch ($group + "_Ctrl_R");	
			}
	refresh;
	// parent group
		parent  $GroupSpecial[8] $GroupSpecial[5] $GroupSpecial[1] $GroupSpecial[0] $GroupSpecial[3] $GroupSpecial[4] $GroupSpecial[7];
		parent $GroupSpecial[2] $GroupSpecial[7] $GroupSpecial[6] $nameRig;


			// set attr 
			setAttr ($GroupSpecial[1] + $pos[9]) 1;setAttr -lock true ($GroupSpecial[1] + $pos[9]);
			setAttr -lock true -keyable false -channelBox false ($GroupSpecial[3] + $pos[0]);setAttr -lock true -keyable false -channelBox false ($GroupSpecial[3] + $pos[1]);
			setAttr -lock true -keyable false -channelBox false ($GroupSpecial[3] + $pos[2]);setAttr -lock true -keyable false -channelBox false ($GroupSpecial[3] + $pos[3]);
			setAttr -lock true -keyable false -channelBox false ($GroupSpecial[3] + $pos[4]);setAttr -lock true -keyable false -channelBox false ($GroupSpecial[3] + $pos[5]);
			setAttr -lock true -keyable false -channelBox false ($GroupSpecial[3] + $pos[6]);setAttr -lock true -keyable false -channelBox false ($GroupSpecial[3] + $pos[7]);
			setAttr -lock true -keyable false -channelBox false ($GroupSpecial[3] + $pos[8]);setAttr -lock true -keyable false -channelBox false ($GroupSpecial[3] + ".v");

	refresh;
// parent grp Arm #####
		// left _L Finger grp
			parent ($Finger[2] + "_grp_L") ($Finger[1] + "_Ctrl_L");
			parent ($Finger[1] + "_grp_L") ($Finger[0] + "_Ctrl_L");

			parent ($Finger[5] + "_grp_L") ($Finger[4] + "_Ctrl_L");
			parent ($Finger[4] + "_grp_L") ($Finger[3] + "_Ctrl_L");

			parent ($Finger[8] + "_grp_L") ($Finger[7] + "_Ctrl_L");
			parent ($Finger[7] + "_grp_L") ($Finger[6] + "_Ctrl_L");

			parent ($Finger[11] + "_grp_L") ($Finger[10] + "_Ctrl_L");
			parent ($Finger[10] + "_grp_L") ($Finger[9] + "_Ctrl_L");

			parent ($Finger[14] + "_grp_L") ($Finger[13] + "_Ctrl_L");
			parent ($Finger[13] + "_grp_L") ($Finger[12] + "_Ctrl_L");

	refresh;
		// right _R Finger grp
			parent ($Finger[2] + "_grp_R") ($Finger[1] + "_Ctrl_R");
			parent ($Finger[1] + "_grp_R") ($Finger[0] + "_Ctrl_R");

			parent ($Finger[5] + "_grp_R") ($Finger[4] + "_Ctrl_R");
			parent ($Finger[4] + "_grp_R") ($Finger[3] + "_Ctrl_R");

			parent ($Finger[8] + "_grp_R") ($Finger[7] + "_Ctrl_R");
			parent ($Finger[7] + "_grp_R") ($Finger[6] + "_Ctrl_R");

			parent ($Finger[11] + "_grp_R") ($Finger[10] + "_Ctrl_R");
			parent ($Finger[10] + "_grp_R") ($Finger[9] + "_Ctrl_R");

			parent ($Finger[14] + "_grp_R") ($Finger[13] + "_Ctrl_R");
			parent ($Finger[13] + "_grp_R") ($Finger[12] + "_Ctrl_R");

	refresh;progressBar -edit -step 1 progressBarRig;
		// parent to hand ctrl
			parent ($Finger[12] + "_grp_R") ($Finger[9] + "_grp_R") ($Finger[6] + "_grp_R") ($Finger[3] + "_grp_R") ($Finger[0] + "_grp_R") ($Hand[0] + "_grp_R");
			parent ($Finger[12] + "_grp_L") ($Finger[9] + "_grp_L") ($Finger[6] + "_grp_L") ($Finger[3] + "_grp_L") ($Finger[0] + "_grp_L") ($Hand[0] + "_grp_L");
	refresh;
	// parent Arm grp
		// left _L Finger grp
			parent ($Arm[3] + "_grp_L") ($Arm[2] + "_Ctrl_L");
			parent ($Arm[2] + "_grp_L") ($Arm[1] + "_Ctrl_L");
	refresh;
		// right _R Finger grp
			parent ($Arm[3] + "_grp_R") ($Arm[2] + "_Ctrl_R");
			parent ($Arm[2] + "_grp_R") ($Arm[1] + "_Ctrl_R");
	refresh;progressBar -edit -step 1 progressBarRig;
	// parent Arm all
		parent ($Hand[0] + "_grp_R") ($GroupSpecial[11]);
		parent ($Arm[0] + "_grp_R") ($Arm[1] + "_grp_R") ($GroupSpecial[11]);
		parent ($Arm[0] + "_grp_L") ($Arm[1] + "_grp_L") ($GroupSpecial[10]);
		parent ($Hand[0] + "_grp_L") ($GroupSpecial[10]);
	refresh;
	// parent Controller All
		parent ($GroupSpecial[10]) ($GroupSpecial[11]) ($GroupSpecial[0]);
	refresh;
// create Set controls ## //
	select -cl;
	$Sets = `sets -name "SetControl"`;
	$SetSkeleton =`sets -name "Skeleton"`;
	$SetAllControl =`sets -name "AllCtrl"`;
	$SetAll =`sets -name "All"`;
	$FK_Body_sets =`sets -name "FK_Body_Ctrl"`;
	$FK_Arm_sets =`sets -name "FK_Arm_Ctrl"`;
	refresh;
	// connect 
	connectAttr -f ($SetSkeleton + ".message") ($Sets + ".dnSetMembers[0]");
	connectAttr -f ($SetAllControl + ".message") ($Sets + ".dnSetMembers[1]");
	connectAttr -f ($SetAll + ".message") ($Sets + ".dnSetMembers[2]");

	connectAttr -f ($FK_Body_sets + ".message") ($SetAllControl + ".dnSetMembers[0]");
	connectAttr -f ($FK_Arm_sets + ".message") ($SetAllControl + ".dnSetMembers[1]");
	refresh;

	// sets
		select -hierarchy $nameRig;
		string $selectAll1[] = `ls -sl`;
		for ($obj in $selectAll1){
			sets -edit -forceElement $SetAll $obj  ;refresh;
		}
	progressBar -edit -step 1 progressBarRig;
// ########## IK body ctrl ###############################################################
// ########## IK body ctrl #############
// setup body joint
	sets -edit -forceElement  $SetAll Tri3D_auto_rig ;
	parent -w L_Hip R_Hip R_Scapula L_Scapula;
		setAttr ("Neck" + $pos[9]) 0;setAttr ("L_Hip" + $pos[9]) 0;
		setAttr ("R_Hip" + $pos[9]) 0;setAttr ("R_Scapula" + $pos[9]) 0;setAttr ("L_Scapula" + $pos[9]) 0;
	refresh;
	// Orient joint body
		select -r Root ;
			joint -e  -oj xyz -secondaryAxisOrient zdown -ch -zso;
				parent -w Neck;
					duplicate -rr Root;duplicate -rr Root;
	refresh;
	//rename joint body
		rename "Root" $IK_Joint[0];rename "IK_Root|Spine1" $IK_Joint[1];rename "IK_Spine1|Chest" $IK_Joint[2];
		rename "Root1" $FK_Joint[0];rename "FK_Root|Spine1" $FK_Joint[1];rename "FK_Spine1|Chest" $FK_Joint[2];
		rename "Root2" $M_Joint[0];rename "Spine1" $M_Joint[1];rename "Chest" $M_Joint[2];
		select -cl ;joint -n $IK_Ctrl[3] -a;
		select -cl ;joint -n $IK_Ctrl[2] -a;
			matchTransform -pos -rot $IK_Ctrl[3] $IK_Joint[2];
			matchTransform -pos -rot $IK_Ctrl[2] $IK_Joint[0];
	refresh;
	// parent constrain body joint 
		parentConstraint -mo $IK_Joint[0] $FK_Joint[0] $M_Joint[0];
		parentConstraint -mo $IK_Ctrl[3] $FK_Joint[2] $M_Joint[2];
		parentConstraint -mo $IK_Joint[1] $FK_Joint[1] $M_Joint[1];
	refresh;
	// IK body ctrl
	// ikHandle -sol ikSplineSolver $IK_Root $IK_Chest;
		string $IK_Handle_Body = "ikHandle_Body";string $IK_Curve_Body = "Curve_Body";
		select -r $IK_Joint[0] ;
		select -add $IK_Joint[2] ;
		ikHandle -sol ikSplineSolver;refresh;
		rename "ikHandle1" $IK_Handle_Body;
		rename "curve1" $IK_Curve_Body;
		select -r $IK_Ctrl[2] $IK_Ctrl[3] $IK_Curve_Body;refresh;
		SmoothBindSkin;
	refresh;
	// node body
		string $nameCurveInfoBody = "Curve_info_Body";
		string $nameMulBody = "Mul_Body";
			shadingNode -asUtility -n $nameCurveInfoBody curveInfo;refresh;
			shadingNode -asUtility -n $nameMulBody multiplyDivide;refresh;
			setAttr ($nameMulBody + ".operation") 2;refresh;
	refresh;
	// connect
		connectAttr -f ($nameCurveInfoBody + ".arcLength") ($nameMulBody + ".input1X");refresh;
		connectAttr -f ("Curve_BodyShape.worldSpace[0]") ($nameCurveInfoBody + ".inputCurve");refresh;
		connectAttr -f ($nameMulBody + ".outputX") ($IK_Joint[1]+ $pos[6]);refresh;
		connectAttr -f ($nameMulBody + ".outputX") ($IK_Joint[2]+ $pos[6]);refresh;
		connectAttr -f ($nameMulBody + ".outputX") ($IK_Joint[0] + $pos[6]);refresh;
		connectAttr -f ($IK_Joint[0] + ".scale") ($IK_Joint[1]+ ".inverseScale");refresh;
		connectAttr -f ($IK_Joint[1]+ ".scale") ($IK_Joint[2]+ ".inverseScale");refresh;
		float $arcLengthBody = `getAttr ( $nameCurveInfoBody + ".arcLength" )`;refresh;
			setAttr ($nameMulBody + ".input2X") $arcLengthBody;
	refresh;progressBar -edit -step 1 progressBarRig;
	// off vis //
	setAttr ($IK_Joint[0] + $pos[9]) 0;
	setAttr ($FK_Joint[0] + $pos[9]) 0;
	// create controller 
		// create ctrl
			group -n $IK_Ctrl_Grp[0] -empty;group -n $IK_Ctrl_Grp[1] -empty;
			duplicate -rr $CubeCtrl;duplicate -rr $CubeCtrl;
			select -r ($CubeCtrl + "1") ($CubeCtrl + "2");
			scale 0.7 0.7 0.7;
			makeIdentity -apply true -s 1 -n 0 -pn 1;select -cl;
			rename ($CubeCtrl + "1") $IK_Ctrl[0];rename ($CubeCtrl + "2") $IK_Ctrl[1];
			parent $IK_Ctrl[0] $IK_Ctrl_Grp[0];parent $IK_Ctrl[1] $IK_Ctrl_Grp[1];
				matchTransform -pos -rot $IK_Ctrl_Grp[0] $IK_Joint[0];
				matchTransform -pos -rot $IK_Ctrl_Grp[1] $IK_Joint[2];
			parent $IK_Ctrl[2] $IK_Ctrl[0];
			parent $IK_Ctrl[3] $IK_Ctrl[1];
				setAttr ($IK_Ctrl[3] + $pos[9]) 0;
				setAttr ($IK_Ctrl[2] + $pos[9]) 0;
	refresh;
			// advanced twist controls
				setAttr ($IK_Handle_Body + ".dTwistControlEnable") 1;
				setAttr ($IK_Handle_Body + ".dWorldUpType") 4;
				setAttr ($IK_Handle_Body + ".dWorldUpVectorY") 1;
				setAttr ($IK_Handle_Body + ".dWorldUpVectorEndY") 1;
				// setAttr ($IK_Handle_Body + ".dWorldUpVectorZ") -1;
				// setAttr ($IK_Handle_Body + ".dWorldUpVectorEndZ") -1;
				connectAttr -f ($IK_Ctrl[0] + ".worldMatrix[0]") ($IK_Handle_Body + ".dWorldUpMatrix");
				connectAttr -f ($IK_Ctrl[1] + ".worldMatrix[0]") ($IK_Handle_Body + ".dWorldUpMatrixEnd"); 
	refresh;
	// group IK System
		setAttr ($IK_Handle_Body + $pos[9]) 0;setAttr ($IK_Curve_Body + $pos[9]) 0;
		parent $IK_Handle_Body $IK_Curve_Body $GroupSpecial[5];
		group -n $IKFK_Body_grp[0] -empty;
		parent $IK_Ctrl_Grp[0] $IK_Ctrl_Grp[1] $IKFK_Body_grp[0];
	refresh;progressBar -edit -step 1 progressBarRig;
// ########## FK body ctrl #############
	// create fk ctrl
			select -r $CirclePlusBodyCtrl $BodyCtrl;
			scale 0.7 0.7 0.7;
			makeIdentity -apply true -s 1 -n 0 -pn 1;select -cl;refresh;
		duplicate -rr $CirclePlusBodyCtrl;duplicate -rr $CirclePlusBodyCtrl;duplicate -rr $CirclePlusBodyCtrl;
			rename ($CirclePlusBodyCtrl + "1") $FK_Ctrl[0];
			rename ($CirclePlusBodyCtrl + "2") $FK_Ctrl[1];
			rename ($CirclePlusBodyCtrl + "3") $FK_Ctrl[2];
		// sets
			sets -edit -forceElement $FK_Body_sets $FK_Ctrl[0]  ;refresh;
			sets -edit -forceElement $FK_Body_sets $FK_Ctrl[1]  ;refresh;
			sets -edit -forceElement $FK_Body_sets $FK_Ctrl[2]  ;refresh;
	refresh;
	// scale ctrl
		select -r $FK_Ctrl[0] $FK_Ctrl[1] $FK_Ctrl[2];
		scale 1.5 1.5 1.5 ;
		float $ValueScaleFKBody = `getAttr ($FK_Ctrl[0] + $pos[6])`;
		if ($ValueScaleFKBody <= 2){
			makeIdentity -apply true -t 0 -r 0 -s 1 -n 0 -pn 1;
			}
				group -n $FK_Ctrl_Grp[0] -empty;
				group -n $FK_Ctrl_Grp[1] -empty;
				group -n $FK_Ctrl_Grp[2] -empty;
					parent $FK_Ctrl[0] $FK_Ctrl_Grp[0];
					parent $FK_Ctrl[1] $FK_Ctrl_Grp[1];
					parent $FK_Ctrl[2] $FK_Ctrl_Grp[2];
		matchTransform -pos -rot $FK_Ctrl_Grp[0] $FK_Joint[0];refresh;
		matchTransform -pos -rot $FK_Ctrl_Grp[2] $FK_Joint[2];refresh;
		matchTransform -pos -rot $FK_Ctrl_Grp[1] $FK_Joint[1];refresh;
			parent $FK_Ctrl_Grp[2] $FK_Ctrl[1];
			parent $FK_Ctrl_Grp[1] $FK_Ctrl[0];
			group -n $IKFK_Body_grp[1] -empty;
			parent $FK_Ctrl_Grp[0] $IKFK_Body_grp[1];
	refresh;progressBar -edit -step 1 progressBarRig;
	// parent constrain to joint
		parentConstraint $FK_Ctrl[0] $FK_Joint[0];
		parentConstraint $FK_Ctrl[1] $FK_Joint[1];
		parentConstraint $FK_Ctrl[2] $FK_Joint[2];

	refresh;progressBar -edit -step 1 progressBarRig;
	// body controller
		parent $BodyCtrl $GroupSpecial[9];
		matchTransform -pos $GroupSpecial[9] $M_Joint[0];refresh;
		parentConstraint -mo $BodyCtrl $IKFK_Body_grp[1];refresh;
		parentConstraint -mo $BodyCtrl $IKFK_Body_grp[0];refresh;

	refresh;
	// set driven key frame
		string $Mul_Inverse_Value_IKFK_Body = "InverseValueSwIKFKBody";
		string $driver_attr_vis_ctrlBody = $BodyCtrl + ".FK_IK";
		string $driven_IK_attr_vis_ctrlBody = $IKFK_Body_grp[0] + $pos[9];
		string $driven_FK_attr_vis_ctrlBody = $IKFK_Body_grp[1] + $pos[9];
		string $driven_M_Root_FK = "M_Root_parentConstraint1.FK_RootW1";
		string $driven_M_Root_IK = "M_Root_parentConstraint1.IK_RootW0";

		addAttr -ln "FK_IK" -at "float" -min 0 -max 1 -keyable true $BodyCtrl;
		shadingNode -asUtility -n $Mul_Inverse_Value_IKFK_Body floatMath;refresh;

	refresh;
	// setAttr ($Mul_Inverse_Value_IKFK_Body + ".floatB") -1;
		setAttr ($Mul_Inverse_Value_IKFK_Body + ".operation") 1;
	refresh;
	//key vis
		float $setAttrGet = `getAttr ($Mul_Inverse_Value_IKFK_Body + ".operation")`;
		if ($setAttrGet == 1){
			setDrivenKeyframe -currentDriver $driver_attr_vis_ctrlBody -driverValue 0 -value 0 $driven_IK_attr_vis_ctrlBody;
			setDrivenKeyframe -currentDriver $driver_attr_vis_ctrlBody -driverValue 1 -value 1 $driven_IK_attr_vis_ctrlBody;
			setDrivenKeyframe -currentDriver $driver_attr_vis_ctrlBody -driverValue 0 -value 1 $driven_FK_attr_vis_ctrlBody;
			setDrivenKeyframe -currentDriver $driver_attr_vis_ctrlBody -driverValue 1 -value 0 $driven_FK_attr_vis_ctrlBody;
			}
	refresh;progressBar -edit -step 1 progressBarRig;
		//key IK FK
			if ($setAttrGet == 1){
				connectAttr -f ($BodyCtrl + ".FK_IK") M_Root_parentConstraint1.IK_RootW0;
				connectAttr -f ($BodyCtrl + ".FK_IK") M_Spine1_parentConstraint1.IK_Spine1W0;
				connectAttr -f ($BodyCtrl + ".FK_IK") M_Chest_parentConstraint1.Chest_IK_jnt_CtrlW0;
				}
	refresh;progressBar -edit -step 1 progressBarRig;
		// reverse value sw
			if ($setAttrGet == 1){
				connectAttr -f ($BodyCtrl + ".FK_IK") ($Mul_Inverse_Value_IKFK_Body + ".floatA");
				connectAttr -f ($Mul_Inverse_Value_IKFK_Body + ".outFloat") M_Root_parentConstraint1.FK_RootW1;
				connectAttr -f ($Mul_Inverse_Value_IKFK_Body + ".outFloat") M_Spine1_parentConstraint1.FK_Spine1W1;
				connectAttr -f ($Mul_Inverse_Value_IKFK_Body + ".outFloat") M_Chest_parentConstraint1.FK_ChestW1;
				}
	refresh;progressBar -edit -step 1 progressBarRig;
		// set key
			if ($setAttrGet == 1){
				setDrivenKeyframe -currentDriver $driver_attr_vis_ctrlBody -driverValue 0 -value -1 ($Mul_Inverse_Value_IKFK_Body + ".floatB");
				setDrivenKeyframe -currentDriver $driver_attr_vis_ctrlBody -driverValue 1 -value 1 ($Mul_Inverse_Value_IKFK_Body + ".floatB");	
				}			
	refresh;progressBar -edit -step 1 progressBarRig;
		// parent to main group
			if ($setAttrGet == 1){
				parent $GroupSpecial[9] $IKFK_Body_grp[1] $IKFK_Body_grp[0] $GroupSpecial[0];
				parent $M_Joint[0] $IK_Joint[0] $FK_Joint[0] $GroupSpecial[1];
				}
	refresh;progressBar -edit -step 1 progressBarRig;
		// lock attr 
			if ($setAttrGet == 1){
					setAttr -lock true -keyable false -channelBox false ($BodyCtrl + $pos[6]);
					setAttr -lock true -keyable false -channelBox false ($BodyCtrl + $pos[7]);
					setAttr -lock true -keyable false -channelBox false ($BodyCtrl + $pos[8]);
				}

	refresh;progressBar -edit -step 1 progressBarRig;
// ############ Main controller #############
	duplicate -rr $CirclePlusHandCtrl;
	rename ($CirclePlusHandCtrl + "1") $mainCtrl;

	float $versionATR = `textField -q -tx info_frame_layout`;
	if ($mainCtrl == "Main_ctrl"){
		addAttr -ln $nAttrMainCtrl[0] -at "float" -min $versionATR -max $versionATR -keyable true  $mainCtrl;
		addAttr -ln $nAttrMainCtrl[1] -at "bool" -defaultValue  1 -keyable true $mainCtrl;
		addAttr -ln $nAttrMainCtrl[2] -at "bool" -dv 1 -keyable true $mainCtrl;
		}
	refresh;progressBar -edit -step 1 progressBarRig;
	// make non keyable
		for ($attrName in $nAttrMainCtrl){
			string $fullAttrName = $mainCtrl + "." + $attrName;
			setAttr -keyable false -channelBox true $fullAttrName;
			}

		float $getScaleMainCtrl = `getAttr ($mainCtrl + $pos[6])`;
	refresh;progressBar -edit -step 1 progressBarRig;
		if ($getScaleMainCtrl  <= 1){
			setAttr ($mainCtrl + $pos[6]) 2.5;
			setAttr ($mainCtrl + $pos[7]) 2.5;
			setAttr ($mainCtrl + $pos[8]) 2.5;
				}
			else{
				setAttr ($mainCtrl + $pos[6]) 1;
				print ($getScaleMainCtrl + "Not is value need !");
			}

	refresh;progressBar -edit -step 1 progressBarRig;
		if ($getScaleMainCtrl >= 1){
			makeIdentity -apply true -s 1 -n 0 -pn 1 $mainCtrl;
			parent $mainCtrl $GroupSpecial[8];
			}
	// rename and change color main ctrl
		string $curveShapeMainCtrl = "CurveMainShape";
		rename ($mainCtrl + "|" + $curShape[5]) $curveShapeMainCtrl;
		float $valueColorMainCtrl = `getAttr ($curveShapeMainCtrl + ".overrideEnabled")`;
			if ($valueColorMainCtrl == 1){
				setAttr ($curveShapeMainCtrl + ".overrideColor") 6;
				}
				else{
					setAttr ($curveShapeMainCtrl + ".overrideEnabled") 1;
					setAttr ($curveShapeMainCtrl + ".overrideColor") 6;
					}refresh;
	// parent constraint to body
		parentConstraint -mo $mainCtrl ($GroupSpecial[9]);

		connectAttr -f ($mainCtrl + ".scale") ($GroupSpecial[0] + ".scale");
		connectAttr -f ($mainCtrl + ".scale") ($GroupSpecial[1] + ".scale");	refresh;progressBar -edit -step 1 progressBarRig;
	refresh;
// ##### Neck controller #####
	duplicate $CirclePlusBodyCtrl;duplicate $CirclePlusBodyCtrl;
			select -r ($CirclePlusBodyCtrl + "1");
			scale 0.7 0.7 0.7;
			makeIdentity -apply true -s 1 -n 0 -pn 1;select -cl;refresh;	
	group -n $Neck_grp[0] -empty;
	rename ($CirclePlusBodyCtrl + "1") $Neck_grp[1];
	parent $Neck_grp[1] $Neck_grp[0];refresh;
	group -n $Neck_grp[2] -empty;
	rename ($CirclePlusBodyCtrl + "2") $Neck_grp[3];
	parent $Neck_grp[3] $Neck_grp[2];
	parent $Neck_grp[2] $Neck_grp[1];
	parent $Neck_grp[0] $GroupSpecial[0];refresh;

	// Orient joint neck
		setAttr "Neck.visibility" 1;
			select -r Neck;
				joint -e  -oj xyz -secondaryAxisOrient yup -ch -zso;refresh;progressBar -edit -step 1 progressBarRig;
	// match ctrl
		matchTransform -pos -rot $Neck_grp[0] Neck;
		matchTransform -pos -rot $Neck_grp[2] Head;refresh;
	//parent Constraint
		parentConstraint -mo $Neck_grp[1] Neck;
		parentConstraint -mo $Neck_grp[3] Head;
		parentConstraint -mo $M_Joint[2] $Neck_grp[0];refresh;
		parent Neck $M_Joint[2];refresh;
		// IK Head
			select -r Head ;
			select -add HeadEnd ;
			ikHandle -sol ikSplineSolver;
			delete ikHandle1;refresh;
			// setup surve and distance
				string $disHead = "CurveHead";
				rename curve1 $disHead;
				parent $disHead $GroupSpecial[5];refresh;
				setAttr ($disHead + ".visibility") 0;
			
			shadingNode -asUtility -n ($disHead + "_info") curveInfo;refresh;
			connectAttr -f ( $disHead+ "Shape.worldSpace[0]") ($disHead + "_info" + ".inputCurve");refresh;
			float $arcLengthHead = `getAttr ( $disHead + "_info" + ".arcLength" )`;refresh;progressBar -edit -step 1 progressBarRig;

			// move ctrl
				select -r ($Neck_grp[3] + ".cv[0:24]") ;
				move -r -os -wd $arcLengthHead 0 0 ;refresh;
	// sets
	// select -hierarchy $nameRig;
	// string $selectAll2[] = `ls -sl`;
	// for ($obj in $selectAll2){
	// 	sets -edit -forceElement $SetAll $obj  ;progressBar -edit -step 1 progressBarRig;refresh;
	// }
	progressBar -edit -step -100 progressBarRig;
// ########## left Arm rig #########
	// spacula
		// setAttr ("L_" + $Arm[0] + ".jointOrientX") 0;
		// setAttr ("L_" + $Arm[0] + ".jointOrientY") 0;
		// setAttr ("L_" + $Arm[0] + ".jointOrientZ") 0;

	parent -w "L_Thumb1" "L_Index1" "L_Middle1" "L_Ring1" "L_Pinky1";
	setAttr "L_Scapula.visibility" 1;

	// if rotate > 0
		// spacula
			float $rotateX_spacula = `getAttr ("L_" + $Arm[0] + ".rx")`;
			float $rotateY_spacula = `getAttr ("L_" + $Arm[0] + ".ry")`;
			float $rotateZ_spacula = `getAttr ("L_" + $Arm[0] + ".rz")`;
				if ($rotateX_spacula > 0 || $rotateY_spacula > 0 || $rotateZ_spacula > 0){
					makeIdentity -apply 1 -r 1 -n 0 -pn 1 ("L_" + $Arm[0]);}
		// shoulder
			float $rotateX_shoulder = `getAttr ("L_" + $Arm[1] + ".rx")`;
			float $rotateY_shoulder = `getAttr ("L_" + $Arm[1] + ".ry")`;
			float $rotateZ_shoulder = `getAttr ("L_" + $Arm[1] + ".rz")`;
				if ($rotateX_shoulder > 0 || $rotateY_shoulder > 0 || $rotateZ_shoulder > 0){
					makeIdentity -apply 1 -r 1 -n 0 -pn 1 ("L_" + $Arm[1]);}
		// elbow 
			float $rotateX_elbow = `getAttr ("L_" + $Arm[2] + ".rx")`;
			float $rotateY_elbow = `getAttr ("L_" + $Arm[2] + ".ry")`;
			float $rotateZ_elbow = `getAttr ("L_" + $Arm[2] + ".rz")`;
				if ($rotateX_elbow > 0 || $rotateY_elbow > 0 || $rotateZ_elbow > 0){
					makeIdentity -apply 1 -r 1 -n 0 -pn 1 ("L_" + $Arm[2]);}
		// wrist
			float $rotateX_wrist = `getAttr ("L_" + $Arm[3] + ".rx")`;
			float $rotateY_wrist = `getAttr ("L_" + $Arm[3] + ".ry")`;
			float $rotateZ_wrist = `getAttr ("L_" + $Arm[3] + ".rz")`;
				if ($rotateX_wrist > 0 || $rotateY_wrist > 0 || $rotateZ_wrist > 0){
					makeIdentity -apply 1 -r 1 -n 0 -pn 1 ("L_" + $Arm[2]);}
		select -r "L_Shoulder";
		joint -e  -oj zyx -secondaryAxisOrient zup -ch -zso;refresh;


	parent  "L_Thumb1" "L_Index1" "L_Middle1" "L_Ring1" "L_Pinky1" "L_Hand";
	parent -w "L_Hand";
	// joint -e  -oj zxy -secondaryAxisOrient zup -ch -zso;
	select -cl;
	// joint setup
		duplicate "L_Shoulder";duplicate "L_Shoulder";refresh;
		parent -w L_Shoulder L_Shoulder|L_Elbow L_Shoulder|L_Elbow|L_Wrist L_Shoulder1 L_Shoulder1|L_Elbow L_Shoulder1|L_Elbow|L_Wrist L_Shoulder2 L_Shoulder2|L_Elbow L_Shoulder2|L_Elbow|L_Wrist ;refresh;
		
		// Main Arm ##
			select -r ("L_" + $Arm[1]) ("L_" + $Arm[2]) ("L_" + $Arm[3]);refresh;
			string $objects_M[] = `ls -selection`;
			for ($i in $objects_M) {
				string $newNameF = ($i + "_M");
				rename $i $newNameF;
				}
			// reParent 
				parent ("L_" + $Arm[3] + "_M") ("L_" + $Arm[2] + "_M");
				parent ("L_" + $Arm[2] + "_M") ("L_" + $Arm[1] + "_M");refresh;progressBar -edit -step 1 progressBarRig;
				select -cl;
		
		// IK Arm ##
			rename ("L_" + $Arm[1] + "1") ("L_" + $Arm[1]);
			rename ("L_" + $Arm[2] + "1") ("L_" + $Arm[2]);
			rename ("L_" + $Arm[3] + "1") ("L_" + $Arm[3]);
			select -r ("L_" + $Arm[1]) ("L_" + $Arm[2]) ("L_" + $Arm[3]);refresh;
			string $objects_IK[] = `ls -selection`;
			for ($i in $objects_IK) {
				string $newNameF = ($i + "_IK");
				rename $i $newNameF;
				}
			// reParent 
				parent ("L_" + $Arm[3] + "_IK") ("L_" + $Arm[2] + "_IK");
				parent ("L_" + $Arm[2] + "_IK") ("L_" + $Arm[1] + "_IK");refresh;
				select -cl;

		// FK Arm ##
			rename ("L_" + $Arm[1] + "2") ("L_" + $Arm[1]);
			rename ("L_" + $Arm[2] + "2") ("L_" + $Arm[2]);
			rename ("L_" + $Arm[3] + "2") ("L_" + $Arm[3]);
			select -r ("L_" + $Arm[1]) ("L_" + $Arm[2]) ("L_" + $Arm[3]);refresh;
			string $objects_FK[] = `ls -selection`;
			for ($i in $objects_FK) {
				string $newNameF = ($i + "_FK");
				rename $i $newNameF;
				}
			// reParent 
				parent ("L_" + $Arm[3] + "_FK") ("L_" + $Arm[2] + "_FK");
				parent ("L_" + $Arm[2] + "_FK") ("L_" + $Arm[1] + "_FK");refresh;progressBar -edit -step 1 progressBarRig;
				select -cl;

		// parentConstraint 
			parentConstraint -mo -n $constraint_Hand_L[0] ("L_" + $Arm[1] + "_IK") ("L_" + $Arm[1] + "_FK") ("L_" + $Arm[1] + "_M");
			parentConstraint -mo -n $constraint_Hand_L[1] ("L_" + $Arm[2] + "_IK") ("L_" + $Arm[2] + "_FK") ("L_" + $Arm[2] + "_M");
			parentConstraint -mo -n $constraint_Hand_L[2] ("L_" + $Arm[3] + "_IK") ("L_" + $Arm[3] + "_FK") ("L_" + $Arm[3] + "_M");refresh;

		// left FK Arm ctrl
			matchTransform -pos -rot ($Arm[1] + "_grp_L") ("L_" + $Arm[1] + "_FK");
			matchTransform -pos -rot ($Arm[2] + "_grp_L") ("L_" + $Arm[2] + "_FK");
			matchTransform -pos -rot ($Arm[3] + "_grp_L") ("L_" + $Arm[3] + "_FK");refresh;progressBar -edit -step 1 progressBarRig;
		// sets
			sets -edit -forceElement  FK_Arm_Ctrl ($Arm[1] + "_Ctrl_L") ;
			sets -edit -forceElement  FK_Arm_Ctrl ($Arm[2] + "_Ctrl_L") ;
			sets -edit -forceElement  FK_Arm_Ctrl ($Arm[3] + "_Ctrl_L") ;refresh;
		// parent to jnt
			parentConstraint -mo ($Arm[1] + "_Ctrl_L") ("L_" + $Arm[1] + "_FK");
			parentConstraint -mo ($Arm[2] + "_Ctrl_L") ("L_" + $Arm[2] + "_FK");
			parentConstraint -mo ($Arm[3] + "_Ctrl_L") ("L_" + $Arm[3] + "_FK");refresh;

				setAttr ("L_" + $Arm[1] + "_FK" + $pos[9]) 0;
				setAttr ("L_" + $Arm[1] + "_M" + $pos[9]) 0;
				parent ("L_" + $Arm[1] + "_FK") ("L_" + $Arm[0]);
				parent ("L_" + $Arm[1] + "_M") ("L_" + $Arm[0]);refresh;progressBar -edit -step 1 progressBarRig;
			
	// Hand Ctrl ######
		// setAttr ( "L_" + $Finger[0] + $pos[5]) 90;
			matchTransform -pos -rot ($Hand[0] + "_grp_L") ("L_" + $Arm[3] + "_M");
		// distance hand to midle 4 
			distanceDimension -sp 0 -1 0 -ep 0 1 0 ;
			rename "distanceDimension1" $distance[0];
			rename "locator1" "Loc_Hand_Ctrl_1";
			rename "locator2" "Loc_Hand_Ctrl_2";refresh;
			rename "curveShape8" "Hand_Ctrl_LShape";
			
		matchTransform -pos -rot "Loc_Hand_Ctrl_1" ("L_" + $Arm[3] + "_M");
		matchTransform -pos -rot "Loc_Hand_Ctrl_2" "L_Middle4";
		// scale to ctrl
			float $length_Hand_Ctrl = `getAttr "Distance_Hand_Ctrl.distance"`;refresh;
			select -r ($Hand[0] + "_grp_L");
			scale $length_Hand_Ctrl $length_Hand_Ctrl $length_Hand_Ctrl;
			makeIdentity -apply true -s 1 ($Hand[0] + "_grp_L");

			setAttr "Distance_Hand_Ctrl.visibility" 0;
			setAttr "Loc_Hand_Ctrl_1.visibility" 0;
			setAttr "Loc_Hand_Ctrl_2.visibility" 0;

			parent "Loc_Hand_Ctrl_1" "Loc_Hand_Ctrl_2" "Distance_Hand_Ctrl" $GroupSpecial[5];refresh;


		// fingers ######
				// match and parent to joint
					for ($group in $Finger){
						matchTransform -pos -rot ($group + "_grp_L") ("L_" + $group);refresh;
						parentConstraint -mo ($group + "_Ctrl_L") ("L_" + $group);refresh;progressBar -edit -step 1 progressBarRig;
					}
				// shading node blendeColors
					for ($group in $Finger){
						// distanced rotate
							float $vl_current = `getAttr ($group + "_grp_L" + $pos[4])`;
							float $vl_after = 90 - $vl_current;
						shadingNode -asUtility -n ("L_" + $group + "_bcRos") blendColors;refresh;
						shadingNode -asUtility -n ("L_" + $group + "_mulRos") multiplyDivide;refresh;progressBar -edit -step 1 progressBarRig;
						setAttr ("L_" + $group + "_bcRos" + ".color1R") $vl_after;
						setAttr ("L_" + $group + "_bcRos" + ".color2R") 0;
						setAttr ("L_" + $group + "_mulRos" + ".input2X") 10;
						setAttr ("L_" + $group + "_mulRos" + ".operation") 2;
						connectAttr -f ("L_" + $group + "_bcRos" + ".outputR") ($group + "_ros_L" + $pos[4]);refresh;
						connectAttr -f ("L_" + $group + "_mulRos" + ".outputX") ("L_" + $group + "_bcRos" + ".blender");refresh;
					}
				// connect to hand ctrl 
					// thumb
						string $Thumb_cr;
						for ($Thumb_cr in $Finger) {
							if ($number[0] >= $number[3]) {
								break;
							}
							string $group = $Thumb_cr;
							connectAttr -f ($Hand[0] + "_Ctrl_L" + ".Thumb") ("L_" + $group + "_mulRos" + ".input1X");refresh;progressBar -edit -step 1 progressBarRig;
							$number[0] += 1;
						}
					// index
						int $endIndex_thumb = $startIndex[3] + $numIterations[3] - 1;
						int $thumb_cr = $startIndex[3];
						while ($thumb_cr <= $endIndex_thumb && $thumb_cr < size($Finger)) {
							string $group = $Finger[$thumb_cr];
							connectAttr -f ($Hand[0] + "_Ctrl_L" + ".Index") ("L_" + $group + "_mulRos" + ".input1X");refresh;progressBar -edit -step 1 progressBarRig;
							$thumb_cr += 1;
							$iterationCount[0] += 1;
						}
					// middle
						int $endIndex_middle = $startIndex[6] + $numIterations[3] - 1;
						int $middle_cr = $startIndex[6];
						while ($middle_cr <= $endIndex_middle && $middle_cr < size($Finger)) {
							string $group = $Finger[$middle_cr];
							connectAttr -f ($Hand[0] + "_Ctrl_L" + ".Middle") ("L_" + $group + "_mulRos" + ".input1X");refresh;progressBar -edit -step 1 progressBarRig;
							$middle_cr += 1;
							$iterationCount[0] += 1;
						}
					// ring
						int $endIndex_ring = $startIndex[9] + $numIterations[3] - 1;
						int $rign_cr = $startIndex[9];
						while ($rign_cr <= $endIndex_ring && $rign_cr < size($Finger)) {
							string $group = $Finger[$rign_cr];
							connectAttr -f ($Hand[0] + "_Ctrl_L" + ".Ring") ("L_" + $group + "_mulRos" + ".input1X");refresh;progressBar -edit -step 1 progressBarRig;
							$rign_cr += 1;
							$iterationCount[0] += 1;
						}
					// pinky
						int $endIndex_pinky = $startIndex[12] + $numIterations[3] - 1;
						int $pinky_cr = $startIndex[12];
						while ($pinky_cr <= $endIndex_pinky && $pinky_cr < size($Finger)) {
							string $group = $Finger[$pinky_cr];
							connectAttr -f ($Hand[0] + "_Ctrl_L" + ".Pinky") ("L_" + $group + "_mulRos" + ".input1X");refresh;progressBar -edit -step 1 progressBarRig;
							$pinky_cr += 1;
							$iterationCount[0] += 1;
						}
						if (1 > 0){
							float $vl_current1 = `getAttr ($Finger[0] + "_grp_L" + $pos[4])`;
							float $vl_current2 = `getAttr ($Finger[3] + "_grp_L" + $pos[4])`;
							float $vl_current3 = `getAttr ($Finger[6] + "_grp_L" + $pos[4])`;
							float $vl_current4 = `getAttr ($Finger[9] + "_grp_L" + $pos[4])`;
							float $vl_current5 = `getAttr ($Finger[12] + "_grp_L" + $pos[4])`;
							float $bf1 = 90 - $vl_current1;
							float $bf2 = 90 - $vl_current2;
							float $bf3 = 90 - $vl_current3;
							float $bf4 = 90 - $vl_current4;
							float $bf5 = 90 - $vl_current5;
							setAttr ("L_" + $Finger[0] + "_bcRos" + ".color1R") ($vl_current1 + $bf1);
							setAttr ("L_" + $Finger[3] + "_bcRos" + ".color1R") ($vl_current2 + $bf2);
							setAttr ("L_" + $Finger[6] + "_bcRos" + ".color1R") ($vl_current3 + $bf3);
							setAttr ("L_" + $Finger[9] + "_bcRos" + ".color1R") ($vl_current4 + $bf4);
							setAttr ("L_" + $Finger[12] + "_bcRos" + ".color1R") ($vl_current5 + $bf5);
						}
					// hiden history
					// 	for ($group in $Finger){
					// 		setAttr ("L_" + $Finger[0] + "_bsRos"  + ".isHistoricallyInteresting") 0;
					// 		setAttr ("L_" + $Finger[0] + "_mulRos" + ".isHistoricallyInteresting") 0;
					// 	}
			progressBar -edit -step 1 progressBarRig;

		// IK Arm ###
			// Hand ctrl
				select -r ("L_" + $Arm[1] + "_IK");
				select -add ("L_" + $Arm[3] + "_IK");
				ikHandle -n "L_IkHandle";refresh;

				string $L_Hand_IK = `group -n ( "L_" + $Hand[0] + "_IK_grp") -empty`;
				duplicate $CubeCtrl;
				rename ($CubeCtrl + "1") $L_IK_Hand_Ctrl[0];
				parent $L_IK_Hand_Ctrl[0] ( "L_" + $Hand[0] + "_IK_grp");
				select -r $L_IK_Hand_Ctrl[0];scale 1.5 0.2 0.2;
				makeIdentity -apply true -s 1 -n 0 -pn 1 $L_IK_Hand_Ctrl[0];refresh;progressBar -edit -step 1 progressBarRig;

					matchTransform -pos -rot ( "L_" + $Hand[0] + "_IK_grp") ("L_" + $Arm[3] + "_IK");
					parent "L_IkHandle" $L_IK_Hand_Ctrl[0];
					setAttr ("L_IkHandle" + $pos[9]) 0;refresh;
			
			// Elbow ctrl
				duplicate $LocatorCtrl;
				string $L_Elbow_IK_grp = `group -n "L_Elbow_IK_grp" -empty`;refresh;
				rename ($LocatorCtrl + "1") $L_IK_Hand_Ctrl[1];
				parent $L_IK_Hand_Ctrl[1] $L_Elbow_IK_grp;refresh;

					matchTransform -pos -rot $L_Elbow_IK_grp ("L_" + $Arm[2] + "_IK");
					float $transZ_elbow_ik = `getAttr ($L_Elbow_IK_grp + $pos[2])`;
					setAttr ($L_Elbow_IK_grp + $pos[2]) ($transZ_elbow_ik - 3.5);refresh;
					parentConstraint -mo -n $constraint_Hand_L[4] $L_IK_Hand_Ctrl[0] $L_Elbow_IK_grp;refresh;

			// pole 
				poleVectorConstraint $L_IK_Hand_Ctrl[1] "L_IkHandle";refresh;

			// parent controller grp
				parent $L_Elbow_IK_grp $L_Hand_IK $GroupSpecial[0];
				parent ("L_" + $Arm[1] + "_IK") ("L_" + $Arm[0]);refresh;progressBar -edit -step 1 progressBarRig;

		// Hand Parent ####
			parentConstraint -mo ($Hand[0] + "_Ctrl_L") ("L_" + $Hand[0]);
			parentConstraint -mo -n $constraint_Hand_L[3] $L_IK_Hand_Ctrl[0] ($Arm[3] + "_Ctrl_L") ($Hand[0] + "_grp_L");

		// set driven key hand ctrl Switch IK FK ##

			shadingNode -asUtility -n $mul_hand_L[0] multiplyDivide;refresh;
			shadingNode -asUtility -n $mul_hand_L[1] blendColors;refresh;
			
			// edit node
				setAttr ($mul_hand_L[0] + ".input2X") 10;
				setAttr ($mul_hand_L[0] + ".input2Y") 10;
				setAttr ($mul_hand_L[0] + ".operation") 2;

				setAttr ($mul_hand_L[1] + ".color1R") 0;
				setAttr ($mul_hand_L[1] + ".color2R") 1;

				setAttr ($L_IK_Hand_Ctrl[0] + ".translateZ") -2.5;refresh;
			// connect 
				// Hand ctrl
				connectAttr -f (($Hand[0] + "_Ctrl_L") + ".Switch_IK_FK") ($mul_hand_L[0] + ".input1X");refresh;
				connectAttr -f (($Hand[0] + "_Ctrl_L") + ".Switch_IK_FK") ($mul_hand_L[0] + ".input1Y");refresh;
				connectAttr -f ($mul_hand_L[0] + ".outputY") ($mul_hand_L[1] + ".blender");refresh;
				setAttr ($L_IK_Hand_Ctrl[1] + ".translateX") -2.5;refresh;
				connectAttr -f ($mul_hand_L[0] + ".outputX") ($constraint_Hand_L[3] + "." + $L_IK_Hand_Ctrl[0] +"W0");refresh;
				connectAttr -f ($mul_hand_L[1] + ".outputR") ($constraint_Hand_L[3] + "." + $Arm[3] + "_Ctrl_L" +"W1");refresh;

				connectAttr -f ($mul_hand_L[0] + ".outputX") ($constraint_Hand_L[0] + "." + "L_" + $Arm[1] + "_IK" +"W0");refresh;
				connectAttr -f ($mul_hand_L[0] + ".outputX") ($constraint_Hand_L[1] + "." + "L_" + $Arm[2] + "_IK" +"W0");refresh;
				connectAttr -f ($mul_hand_L[0] + ".outputX") ($constraint_Hand_L[2] + "." + "L_" + $Arm[3] + "_IK" +"W0");refresh;
				
				connectAttr -f ($mul_hand_L[0] + ".outputX") ($L_Hand_IK + ".visibility");refresh;
				connectAttr -f ($mul_hand_L[0] + ".outputX") ($L_Elbow_IK_grp + ".visibility");refresh;

				connectAttr -f ($mul_hand_L[1] + ".outputR") ($constraint_Hand_L[0] + "." + "L_" + $Arm[1] + "_FK" +"W1");refresh;
				connectAttr -f ($mul_hand_L[1] + ".outputR") ($constraint_Hand_L[1] + "." + "L_" + $Arm[2] + "_FK" +"W1");refresh;
				connectAttr -f ($mul_hand_L[1] + ".outputR") ($constraint_Hand_L[2] + "." + "L_" + $Arm[3] + "_FK" +"W1");refresh;

				connectAttr -f ($mul_hand_L[1] + ".outputR") ($Arm[1] + "_grp_L" + ".visibility");refresh;progressBar -edit -step 1 progressBarRig;

		// follow elbow ##
			connectAttr -f (($Hand[0] + "_Ctrl_L") + ".Follow_Elbow") ($constraint_Hand_L[4] + "." + $L_IK_Hand_Ctrl[0] + "W0");refresh;
			// test 
				setAttr ($L_IK_Hand_Ctrl[1] + ".translateX") 2.5;refresh;
				setAttr ($L_IK_Hand_Ctrl[0] + ".translateZ") 0;refresh;
				setAttr ($L_IK_Hand_Ctrl[1] + ".translateX") 0;refresh;
		// parent joint to chest M
			parent ("L_" + $Arm[0] ) $M_Joint[2];refresh;
			parent ("L_" + $Hand[0] ) ("L_" + $Arm[3] + "_M");refresh;

	// spacular ##
		setAttr ($Arm[0] + "_Ctrl_L" + ".ry") 90;
		makeIdentity -apply 1 -r 1 -n 0 -pn 1($Arm[0] + "_Ctrl_L");
		matchTransform -rot -pos ($Arm[0] + "_grp_L") ("L_" + $Arm[0]);
		select -r ($Arm[0] + "_Ctrl_L" + ".cv[0]") ($Arm[0] + "_Ctrl_L" + ".cv[6:7]") ;
		move -r 0 0.696331 0 ;
		scale -r -p 0.807309cm 15.355887cm -0.182224cm 2.024085 2.024085 2.024085 ;
		select -cl;

		// parent 
			parentConstraint -mo ($Arm[0] + "_Ctrl_L") ($Arm[1] + "_grp_L");
			parentConstraint -mo $M_Joint[2] ($Arm[0] + "_grp_L");
			parentConstraint -mo ($Arm[0] + "_Ctrl_L") ("L_" + $Arm[0]);


// #### vis joint off ##### //
	delete CubeCtrl HandCtrl IKFKSWCtrl LocatorCtrl CirclePlusBodyCtrl CirclePlusHandCtrl;
	setAttr "L_Shoulder_IK.visibility" 0;
	setAttr "L_Shoulder_M.visibility" 1;
	
// #### Set controls ##### //
	// sets
	select -hierarchy $nameRig;
	string $selectAll[] = `ls -sl`;
	for ($obj in $selectAll){
		sets -edit -forceElement $SetAll $obj  ;refresh;progressBar -edit -s 1 progressBarRig;
	}
	progressBar -edit -hlc 0 1 0 progressBarRig;
	select -cl;
	hideHistoryBuildRig();

}

global proc hideHistoryBuildRig(){
	string $Hand[] = {"Hand"};
	string $clistConnections[] = `listConnections ($Hand[0] + "_Ctrl_L")`;
	print $clistConnections;

	// string $selectCtrl[] = `select -r ($Hand[0] + "_Ctrl_L")`;
	for ($n in $clistConnections){
		setAttr ($n+".ihi") 0 ;
		string $nList[] = `listConnections $n`;
			for($n in $nList){
				setAttr ($n + ".ihi") 0 ;
			}
	}


}

/// build FK rig ####################################
	global proc addInbetweenAttribute(){
		global string $nbIbwJoint;
		global string $tfnJnt;
		float $number = `textField -q -tx tf_nbIbwJoint`;
		string $select[] = `ls -sl`;
		if (size($select) == 0){
			textField -e -tx "Not object select !!" -bgc 1 1 0 tfnbJont;
			warning "Select Object please !!";
		}
		else{
			if($number > 0){
				string $selectToTF = "";
				for($obj in $select){
					$selectToTF += $obj + "   ";
					string $typeObj = `nodeType $obj`;
					if($typeObj == "joint"){
						addAttr -ln "Inbetween_Joints" -min $number -max $number -keyable true $obj;
					}
					else{
						confirmDialog -m "Not joint !!";

					}
				}
				textField -e -tx $selectToTF -bgc 0 1 1 tfnbJont;
			}

		}
	}
	global proc buildFKinbetweenRig(){
		
	}
	global proc buttonAddInbetWeenNotThing(){
		global string $buttonAddInbetWeen;
		global string $nbIbwJoint;
		string $nb = `textField -q -tx tf_nbIbwJoint`;
		if ($nb == 0){
			button -edit -enable false buttonAddInbetWeen;
		}
		
		else{
			button -edit -enable true buttonAddInbetWeen;
			return;
		}
	}
	global proc buildFKinbetween() {
		string $cInstallToolsTri3D = `trInstallToolsTri3D`;
		global string $buttonAddInbetWeen;
		global string $nbIbwJoint;
		string $nb = `textField -q -tx tf_nbIbwJoint`;
		if ($nb == 0){
			python("execfile('" + $cInstallToolsTri3D + "/Functions/Python/FKConntroller.py" + "')");
			// string $scriptPath = $cInstallToolsTri3D + "/Functions/Python/FKConntroller.py";
			// string $pythonCommand = "exec(open('" + $scriptPath + "').read())";
			// python($pythonCommand);
		}
		
		else{
			confirmDialog -m "Comming soon !!";
			return;
		}
	}

//////////////// path rig #################################/////////////
	global proc creatPathRigTri3D(){
		string $cInstallToolsTri3D = `trInstallToolsTri3D`;
		global string $nbCtrlCreatePathRig;
		global string $rpCreate;
		global string $rpAuto;

		string $rpCreateq = `radioButton -q -select rpCreate`;
		string $rpAutoq = `radioButton -q -select rpAuto`;
		string $nbCtrlCreatePathRigq = `textField -q -tx nbCtrlCreatePathRig`;

		string $select[] = `ls -sl `;
		if(size($select) >= 1){
			// count object ##
			int $totalObj = 0;
			for ($obj in $select) {
				string $allDescendants[] = `listRelatives -allDescendents -fullPath $obj`;
				$totalObj += (size($allDescendants) + 1);
			}
		// command #
			if($totalObj >= 4){
				createNode blendColors -n ($select[0] + "_bsc_orient_bake");
					setAttr (($select[0] + "_bsc_orient_bake") + ".color2R") 0;
					setAttr (($select[0] + "_bsc_orient_bake") + ".color2G") 0;
					setAttr (($select[0] + "_bsc_orient_bake") + ".color2B") 0;
				float $randColor = `rand 13 20`;
				$curMain = `curve -n ($select[0] + "_ctrl_main") -d 1 -p 0 0 0 -p -0 5.6 -0 -p -0.7 5.6 -0 -p -0.7 7 -0 -p 0.7 7 -0 -p 0.7 5.6 -0 -p -0 5.6 -0` ;
					addAttr -ln "OrientConstraint" -min 0 -max 1 -dv 1 -keyable true $curMain;	
					setAttr ($curMain + ".overrideEnabled") 1;
					setAttr ($curMain + ".overrideColor") $randColor;
							setAttr ($curMain + ".v") -keyable false;
				$grp = `group -n ($select[0] + "_Path_grp" ) -empty `;
				$cur = `curve -n ($select[0] + "_Path_Ctrl") -d 1 -p -2 0 0 -p 2 0 0 -p 0 0 0 -p 0 0 2 -p 0 0 -2 -p 0 0 0 -p 0 2 0 -p 0 -2 0`;
					// Loc path
						$loc = `spaceLocator -n ($select[0] + "_Loc_Path_Line")`;
					addAttr -ln "VisMainCtrl" -min 0 -max 1 -dv 1 -keyable true $cur;
					addAttr -ln "OrientConstraint" -min 0 -max 1 -dv 1 -keyable true $cur;
					setAttr ($cur + ".overrideEnabled") 1;
					setAttr ($cur + ".overrideColor") 14;
						connectAttr -f ($cur + ".VisMainCtrl") ($curMain + ".v");
				parent $cur $grp;
				select -r ($select[0]);
				if ($rpCreateq){
					python("execfile('" + $cInstallToolsTri3D + "/Functions/Python/CreateCurveInJoint.py" + "')");
					// string $scriptPath = $cInstallToolsTri3D + "/Functions/Python/CreateCurveInJoint.py";
					// string $pythonCommand = "exec(open('" + $scriptPath + "').read())";
					// python($pythonCommand);
				}
			}
			else{
				confirmDialog -m "Please create better than 3 joint !!!";
			}
		}
		else{
			confirmDialog -m "Please select obj";
		}
	}
	global proc bakeOirentcreatPathRigTri3D(){
		string $select[] = `ls -sl`;

		if(`gmatch ($select[0]) "*_ctrl_main*"`){// int $pos = `gmatch ($select[0]) ("*" + "_ctrl_main")`;
			string $newName = `substituteAllString ($select[0]) "_ctrl_main" ""`;

			float $OS_Attr = `getAttr (($select[0]) + ".OrientConstraint")`;
				float $Path_Attr = `getAttr ($newName + ".Path")`;

			float $valueRTx = `getAttr ($newName + "_Path_grp" + ".rx")`;
				float $valueRTy = `getAttr ($newName + "_Path_grp" + ".ry")`;
					float $valueRTz = `getAttr ($newName + "_Path_grp" + ".rx")`;

				int $currentFrame = `currentTime -query`;
				int $previousFrame = $currentFrame - 1;

			// if($Path_Attr == 0){
				if($OS_Attr == 1){
					setKeyframe -breakdown 0 -preserveCurveShape 0 -hierarchy none -controlPoints 0 -shape 0  -at "color2R" -t $previousFrame ($newName + "_bsc_orient_bake");
						setKeyframe -breakdown 0 -preserveCurveShape 0 -hierarchy none -controlPoints 0 -shape 0  -at "color2G" -t $previousFrame ($newName + "_bsc_orient_bake");
							setKeyframe -breakdown 0 -preserveCurveShape 0 -hierarchy none -controlPoints 0 -shape 0  -at "color2B" -t $previousFrame ($newName + "_bsc_orient_bake");

					setKeyframe -breakdown 0 -preserveCurveShape 0 -hierarchy none -controlPoints 0 -shape 0  -at "color2R" -v $valueRTx -t $currentFrame ($newName + "_bsc_orient_bake");
						setKeyframe -breakdown 0 -preserveCurveShape 0 -hierarchy none -controlPoints 0 -shape 0  -at "color2G" -v $valueRTy -t $currentFrame ($newName + "_bsc_orient_bake");
							setKeyframe -breakdown 0 -preserveCurveShape 0 -hierarchy none -controlPoints 0 -shape 0  -at "color2B" -v $valueRTz -t $currentFrame ($newName + "_bsc_orient_bake");

					// setAttr (($newName + "_bsc_orient_bake") + ".color2R") $valueRTx;
					// 	setAttr (($newName + "_bsc_orient_bake") + ".color2G") $valueRTy;
					// 		setAttr (($newName + "_bsc_orient_bake") + ".color2B") $valueRTz;

					setKeyframe -breakdown 0 -preserveCurveShape 0 -hierarchy none -controlPoints 0 -shape 0 -t $previousFrame (($select[0]));
					setAttr ($select[0] + ".OrientConstraint") 0;
						setKeyframe -breakdown 0 -preserveCurveShape 0 -hierarchy none -controlPoints 0 -shape 0 {($select[0])};
					setKeyframe -breakdown 0 -preserveCurveShape 0 -hierarchy none -controlPoints 0 -shape 0 -t $currentFrame (($select[0]));
				}
				if($OS_Attr < 1){
					confirmDialog -m ($select[0] + " Orient Constraint Attr not aready !!");
					// setAttr ($select[0] + ".OrientConstraint") 0;
					// 	setKeyframe -breakdown 0 -preserveCurveShape 0 -hierarchy none -controlPoints 0 -shape 0 {($select[0])};
					// setKeyframe -breakdown 0 -preserveCurveShape 0 -hierarchy none -controlPoints 0 -shape 0  -at "color2R" -t $previousFrame ($newName + "_bsc_orient_bake");
					// 	setKeyframe -breakdown 0 -preserveCurveShape 0 -hierarchy none -controlPoints 0 -shape 0  -at "color2G" -t $previousFrame ($newName + "_bsc_orient_bake");
					// 		setKeyframe -breakdown 0 -preserveCurveShape 0 -hierarchy none -controlPoints 0 -shape 0  -at "color2B" -t $previousFrame ($newName + "_bsc_orient_bake");

					// setKeyframe -breakdown 0 -preserveCurveShape 0 -hierarchy none -controlPoints 0 -shape 0  -at "color2R" -v $valueRTx -t $currentFrame ($newName + "_bsc_orient_bake");
					// 	setKeyframe -breakdown 0 -preserveCurveShape 0 -hierarchy none -controlPoints 0 -shape 0  -at "color2G" -v $valueRTy -t $currentFrame ($newName + "_bsc_orient_bake");
					// 		setKeyframe -breakdown 0 -preserveCurveShape 0 -hierarchy none -controlPoints 0 -shape 0  -at "color2B" -v $valueRTz -t $currentFrame ($newName + "_bsc_orient_bake");
				}
			// }
		}
		else{
			confirmDialog -m "Please select ctrl main !!!";
		}
	}
	global proc deletaBakePath(){
		string $select[] = `ls -sl`;

		if(size($select) == 1){
			for ($obj in $select) {
				if (`gmatch $obj "*_ctrl_main*"`) {
					// int $pos = `gmatch ($select[0]) ("*" + "_ctrl_main")`;
					string $newName = `substituteAllString ($select[0]) "_ctrl_main" ""`;
					selectKey -add -k ($newName + "_bsc_orient_bake_color2R") ($newName + "_bsc_orient_bake_color2G") ($newName + "_bsc_orient_bake_color2B")  ;
					cutKey -animation keys -clear;
					// CBdeleteConnection ($newName + "_bsc_orient_bake.color2R");
					// 	  CBdeleteConnection ($newName + "_bsc_orient_bake.color2G");
					// 		 CBdeleteConnection ($newName + "_bsc_orient_bake.color2B");
				}
				else{
					confirmDialog -m "Please select ctrl_main !!";
				}
			}
		}
		else{
			confirmDialog -m "Please select one ctrl !!";
		}

		
	}
// create curve obj to obj // ##
		global proc CreateCurveArc(){
			string $select[] = `ls -sl`;
			string $cShapes[];
			if(size($select) == 2){
				float $pos1[] = `xform -q -ws -t ($select[0])`;
				float $pos2[] = `xform -q -ws -t ($select[1])`;
				$curve = `curve -d 1 -n "Arc_Curve_Distance" -p $pos1[0] $pos1[1] $pos1[2] -p $pos2[0] $pos2[1] $pos2[2]`;
				addAttr -ln "Arc_Curve" -at "float" -keyable true $curve;
				addAttr -ln "Arc_Curve" -at "float" -proxy ($curve + ".Arc_Curve") -keyable true ($select[0]);
				addAttr -ln "Arc_Curve" -at "float" -proxy ($curve + ".Arc_Curve") -keyable true ($select[1]);
				select -r ($select[0]) ($select[1]) $curve;
				SmoothBindSkin;
				$attr = ($select[0] + "_Arc_Curve");
				$fl = ($select[0] + "_fl");
				createNode curveInfo -n $attr;
				createNode floatMath -n $fl;
					string $cShapes[] = `listRelatives -shapes ($curve)`;
					for ($shape in $cShapes){
						if(`gmatch $shape "*Shape*"`){
							string $newName = `substituteAllString $shape "Orig" ""`;
							connectAttr -f ($newName + ".worldSpace") ($attr + ".inputCurve");
						}
					}
				connectAttr ($attr + ".arcLength") ($curve + ".Arc_Curve");
				connectAttr ($attr + ".arcLength") ($fl + ".floatA");
				float $float = `getAttr ($fl + ".floatA")`;
				setAttr ($fl + ".floatB") $float;
				select -cl;
				
			}
			else{
				confirmDialog -m "Please select 2 joint !!";
			}
		}

		global proc distanceObjtoObj(){
			string $select[] = `ls -sl`;
			if(size($select) == 2){
				distanceDimension -sp 0 -1 0 -ep 0 1 0;
				string $dis = `rename "distanceDimension1" ($select[0] + "_" + $select[1] + "_Dis")`;
				$loc11 = "locator1";
				$loc22 = "locator2";
					matchTransform -pos $loc11 ($select[0]);			
					matchTransform -pos $loc22 ($select[1]);
				$loc1 = `rename $loc11 ($select[0] + "_sLoc")`;
				$loc2 = `rename $loc22 ($select[1] + "_eLoc")`;
					float $distanceFL = `getAttr ($dis + ".distance")`;
					annotate -tx ($dis + " = " + $distanceFL) $loc2;
					$anno = `rename "annotation1" ($select[0] + "_" + $select[1] + "_Anno")`;
						float $posX = `getAttr ($loc2 + ".tx")`;
						float $posY = `getAttr ($loc2 + ".ty")`;
						float $posZ = `getAttr ($loc2 + ".tz")`;
							setAttr ($anno + ".tx") ($posX + 0.5);
							setAttr ($anno + ".ty") ($posY + 2);
							setAttr ($anno + ".tz") ($posZ + 0.5);
						float $randomColor = `rand 2 22`;
						setAttr ($anno + ".overrideEnabled") 1;
						setAttr ($anno + ".overrideColor") $randomColor;
				$grp = `group -empty -n ($dis + "_grp")`;
					parent $loc1 $loc2 $dis $anno $grp;
				select -cl;
			}
			else{
				confirmDialog -m "Please select 2 object !!";

			}
		}
		// auto vis
			global proc SDKVisAuto(){
				if(`window -exists autoviswd`){
					deleteUI autoviswd;
				}
				window -w 300 -title "Auto Visibility Tri 3D" autoviswd;
				$mainLayout = `columnLayout -w 300 mainLayout`;
					rowColumnLayout -p $mainLayout -w 300 -nc 3 rlAutoVis;
						$tfNameController = `textField -w 200 -editable false tfNameController`;
						text -l "" -w 10;
						button -l "Select" -w 90 -c "objSDKAutoEnter;";
						$tfNameAttr = `textField -w 200 -editable true tfNameAttr`;
						text -l "" -w 10;
						button -l "Build" -w 90 -c "SDKVisAutoProc;";
						$tfDebugLog = `textField -w 200 -editable false tfDebugLog`;
						text -l "" -w 10;
						button -l "Proxy" -w 90 -c "SDKVisAutoProcProxy;";	

				showWindow autoviswd;				
			}
			global proc objSDKAutoEnter(){
				string $nameAttrEx = "existsSDKautoTri3d";
				string $select[] = `ls -sl`; 
				textField -edit -tx $select[0] tfNameController;
				if(`objExists $nameAttrEx`){
					string $connections[] = `listConnections -p true ($nameAttrEx + ".inputA")`;
					if (size($connections) > 0) {
						for ($i = 0; $i < size($connections); $i++) {
							// $connections[$i];
							$naemAttrCtrl = `substitute ($select[0] + ".") $connections[$i] "" `;
							textField -edit -tx $naemAttrCtrl tfNameAttr;
						}
					}
				}				
			}
			global proc SDKVisAutoProc(){
				global string $tfNameAttr,$tfDebugLog,$tfNameController;
				$nameCtrl = `textField -q -tx tfNameController`;
				$nameAttr = `textField -q -tx tfNameAttr`;
				string $driverAttr = $nameCtrl + "." + $nameAttr; 
				string $select[] = `ls -sl`;
				string $nameAttrEx = "existsSDKautoTri3d";
					if($nameAttr != ""){
						if(size($select) > 0){
							int $count = size($select);
							addAttr -ln $nameAttr -at "long" -min 0 -max $count -keyable true $nameCtrl;					
							for ($i = 0; $i < $count + 1; $i++) {
								for ($j = 0; $j < size($select); $j++) {
									string $drivenObj = $select[$j];
									string $drivenAttr = $drivenObj + ".visibility";refresh;
									if ($j < $i) {
										setDrivenKeyframe -cd $driverAttr -dv $i -v 1 $drivenAttr;refresh;
									} 
									else {
										setDrivenKeyframe -cd $driverAttr -dv $i -v 0 $drivenAttr;refresh;
									}
								}
							}
							if(`objExists $nameAttrEx`){
								connectAttr -f $driverAttr ($nameAttrEx + ".inputA");
							}
							else{
								$abNodeCloud = `createNode animBlendNodeEnum -n $nameAttrEx`;
								connectAttr -f $driverAttr ($abNodeCloud + ".inputA");
							}
							
						}
						else {
							warning "Please select obj !!";
						}					
						textField -e -tx "Done Visibility Auto SDK !!" tfDebugLog;
					}
					else{
						warning "Please enter name Attribute !!";
					}

			}
			global proc SDKVisAutoProcProxy(){
				global string $tfNameAttr,$tfDebugLog,$tfNameController;
				$nameCtrl = `textField -q -tx tfNameController`;
				$nameAttr = `textField -q -tx tfNameAttr`;				
				string $driverAttr = $nameCtrl + "." + $nameAttr; 
				string $select[] = `ls -sl`;
				if(size($select) > 0){
					for($obj in $select){
						addAttr -ln $nameAttr -at "long" -proxy $driverAttr -keyable 1 $obj;
					}
					textField -e -tx "Done Proxy Ctrl SDK !!" tfDebugLog;
				}
			}
global proc autoRigWheel(){
	string $cInstallToolsTri3D = `trInstallToolsTri3D`;
	string $pos[] = {".tx",".ty",".tz",".rx",".ry",".rz",".sx",".sy",".sz"};
	string $selectWheel[] = `ls -sl`;
	if(size($selectWheel) > 0){
		if(`objExists "Tri3D_Auto_Wheel_Dyn"`){
		}
		else{
			group -empty -n "Tri3D_Auto_Wheel_Dyn";
		}
		for($wheel in $selectWheel){
			$jntMainWHeelAuto = "Main_jnt" + $wheel; 						// main jnt
			$loftedAutoWheel = "ltw_"+$wheel; 		 						// loft curve
			$autoWheelMainCtrl = "Main_Ctrl"+$wheel; 						// main ctrl
			$autoWheelClusCtrl = "Clus_Ctrl"+$wheel; 						// main ctrl
			$cirBeforeLoff =  "lc_"+$wheel;			 						// loft circle
			$ctrlDynWheelAffter =  "Ctrl_Dyn_"+$wheel;			 			// dyn Ctrl circle
			$grpNhairSym = "ns_grp"+$wheel;			 						// nHair grp
			$grpSymnHairCurve = "shc_grp" + $wheel;  						// sym hair grp
			$grpNhairMain = "nmj_grp" + $wheel;								// nHair main grp
			$grpParentConstraintNode = "pcn_" + $wheel;						// parent grp
			$grpSystem = "gsa_" + $wheel;									// system grp
			$grpMainCtrl = "MainCtrl_grp" + $wheel;							// main ctrl
			$jntBindAuto = "THIS_IS_JOINT_BINDSKIN_" + $wheel;				// joint bind skin
			$grpTri3DAutoWheel = "Tri3D_Auto_Wheel_Dyn";     				// joint bind
			$systemgrp = "St_grp" + $wheel;
			$lattice = "ltlt_" + $wheel ;
			$cluster = "Cls_"+$wheel ;
			$autoWheelDirectionCtrl = "Direc_Ctrl_" + $wheel;
			$autoWheelDirectionCtrlGrp = "Direc_Grp_" + $wheel;
			$systemClus = "grpClus_" + $wheel;
			$systemClusRela = "grpClusRela_" + $wheel;
			$jntMainnHair = "";
			$nodeFlFlatTire = ("flatTireNode" + $wheel);
			$nodeRevFlFlatTire = ("flatTireNodeRev" + $wheel);
			$ranColor = `rand "stream1" 17 25 `;



			// group 
				group -empty -n $grpMainCtrl;
				group -empty -n $grpSystem;
				group -empty -n $grpSymnHairCurve;
				group -empty -n $grpParentConstraintNode;
				group -empty -n $jntBindAuto;
				group -empty -n $systemgrp;
				group -empty -n $autoWheelDirectionCtrlGrp;
				group -empty -n $systemClus;
				group -empty -n $systemClusRela;
					parent $grpSystem  $grpTri3DAutoWheel;
			
				// joint main
					createNode joint -n $jntMainWHeelAuto;
						parent $jntMainWHeelAuto $jntBindAuto;
			// ctrl and curve to loft
				curve -n $autoWheelMainCtrl -d 1 -p 1 1 1 -p 1 1 -1 -p 1 -1 -1 -p 1 -1 1 -p -1 -1 1 -p -1 1 1 -p 1 1 1 
								-p 1 -1 1 -p -1 -1 1 -p -1 -1 -1 -p -1 1 -1 -p 1 1 -1 -p 1 -1 -1 -p -1 -1 -1 -p -1 1 -1 -p -1 1 1;
					rename curveShape1 ($autoWheelMainCtrl + "Shape");
				curve -n $autoWheelClusCtrl -d 1 -p 1 1 1 -p 1 1 -1 -p 1 -1 -1 -p 1 -1 1 -p -1 -1 1 -p -1 1 1 -p 1 1 1 
								-p 1 -1 1 -p -1 -1 1 -p -1 -1 -1 -p -1 1 -1 -p 1 1 -1 -p 1 -1 -1 -p -1 -1 -1 -p -1 1 -1 -p -1 1 1;
					rename curveShape1 ($autoWheelClusCtrl + "Shape");					
				curve -n $autoWheelDirectionCtrl -d 1 -p 0 0 0 -p 0 5.6 0 -p 0 5.63 0.21 -p 0 5.71 0.4 -p 0 5.83 0.57 -p 0 6 0.69 
													-p 0 6.19 0.77 -p 0 6.4 0.8 -p 0 6.4 0 -p 0 5.6 0 -p 0 5.63 -0.21 -p 0 5.71 -0.4 -p 0 5.83 -0.57 
													-p 0 6 -0.69 -p 0 6.19 -0.77 -p 0 6.4 -0.8 -p 0 6.61 -0.77 -p 0 6.8 -0.69 -p 0 6.97 -0.57 
													-p 0 7.09 -0.4 -p 0 7.17 -0.21 -p 0 7.2 0 -p 0 7.17 0.21 -p 0 7.09 0.4 -p 0 6.97 0.57 
													-p 0 6.8 0.69 -p 0 6.61 0.77 -p 0 6.4 0.8 -p 0 6.4 -0.8 -p 0 6.4 0 -p 0 7.2 0;								
					rename curveShape1 ($autoWheelDirectionCtrl + "Shape");
					addAttr -ln "FlatTire" -at "float" -min 0 -dv 1 -keyable 1 $autoWheelDirectionCtrl;
					createNode floatMath -n $nodeFlFlatTire;
					createNode floatMath -n $nodeRevFlFlatTire;
					connectAttr -f ($autoWheelDirectionCtrl + ".FlatTire") ($nodeFlFlatTire + ".floatA");
					connectAttr -f ($autoWheelDirectionCtrl + ".ty") ($nodeRevFlFlatTire + ".floatA");
					connectAttr -f ($nodeRevFlFlatTire + ".outFloat") ($nodeFlFlatTire + ".floatB");
					setAttr ($nodeRevFlFlatTire + ".operation") 2;
					setAttr ($nodeRevFlFlatTire + ".floatB") -1;
				circle -n $cirBeforeLoff;
			// start auto
				rebuildCurve -ch 1 -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s 32 -d 3 -tol 0.01 $cirBeforeLoff;
			// distance wheel 
				string $sourceObj = $wheel;
				float $sourceBBox[] = `xform -q -ws -boundingBox $sourceObj`;
					float $sourceWidthX = $sourceBBox[3] - $sourceBBox[0];
					float $sourceWidthY = $sourceBBox[4] - $sourceBBox[1];
					float $sourceWidthZ = $sourceBBox[5] - $sourceBBox[2];

				if($sourceWidthX < $sourceWidthZ){ // if X < Z than Z direction main ahead //
					$tCircleY = ($sourceBBox[1] + ($sourceWidthY / 2));
					$tCircleZ = ($sourceBBox[2] + ($sourceWidthZ / 2));	
						setAttr ($cirBeforeLoff + ".ry") 90;
						makeIdentity -apply 1 -r 1 $cirBeforeLoff;
						delete -ch $cirBeforeLoff;
					// setAttr to pos
						setAttr ($cirBeforeLoff + ".tx") $sourceBBox[3];
						setAttr ($cirBeforeLoff + ".ty") $tCircleY;
						setAttr ($cirBeforeLoff + ".tz") $tCircleZ;
						// scale ratio cir for wheel 
							string $cirBeforeLoffScale = $cirBeforeLoff; // curve loft
								// lofted
								float $targetBBox[] = `xform -q -ws -boundingBox $cirBeforeLoffScale`;
									float $targetWidthX = $targetBBox[3] - $targetBBox[0];
									float $targetWidthY = $targetBBox[4] - $targetBBox[1];
									float $targetWidthZ = $targetBBox[5] - $targetBBox[2];
										float $scaleFactorX = ($targetWidthX != 0) ? ($sourceWidthX / $targetWidthX) : 1;
										float $scaleFactorY = ($targetWidthY != 0) ? ($sourceWidthY / $targetWidthY) : 1;
										float $scaleFactorZ = ($targetWidthZ != 0) ? ($sourceWidthZ / $targetWidthZ) : 1;
								scale -r 1 $scaleFactorY $scaleFactorZ $cirBeforeLoffScale;								
								// main ctrl
								float $targetBBoxMain[] = `xform -q -ws -boundingBox $autoWheelMainCtrl`;
									float $targetWidthXMain = $targetBBoxMain[3] - $targetBBoxMain[0];
									float $targetWidthYMain = $targetBBoxMain[4] - $targetBBoxMain[1];
									float $targetWidthZMain = $targetBBoxMain[5] - $targetBBoxMain[2];
										float $scaleFactorMainX = ($targetWidthXMain != 0) ? ($sourceWidthX / $targetWidthXMain) : 1;
										float $scaleFactorMainY = ($targetWidthYMain != 0) ? ($sourceWidthY / $targetWidthYMain) : 1;
										float $scaleFactorMainZ = ($targetWidthZMain != 0) ? ($sourceWidthZ / $targetWidthZMain) : 1;										
								scale -r ($scaleFactorMainX + 0.1) ($scaleFactorMainY) ($scaleFactorMainZ) $autoWheelMainCtrl;
								// ctrlDirec ctrl
								float $targetBBoxctrlDirec[] = `xform -q -ws -boundingBox $autoWheelDirectionCtrl`;
									float $targetWidthXctrlDirec = $targetBBoxctrlDirec[3] - $targetBBoxctrlDirec[0];
									float $targetWidthYctrlDirec = $targetBBoxctrlDirec[4] - $targetBBoxctrlDirec[1];
									float $targetWidthZctrlDirec = $targetBBoxctrlDirec[5] - $targetBBoxctrlDirec[2];
										float $scaleFactorctrlDirecX = ($targetWidthXctrlDirec != 0) ? ($sourceWidthX / $targetWidthXctrlDirec) : 1;
										float $scaleFactorctrlDirecY = ($targetWidthYctrlDirec != 0) ? ($sourceWidthY / $targetWidthYctrlDirec) : 1;
										float $scaleFactorctrlDirecZ = ($targetWidthZctrlDirec != 0) ? ($sourceWidthZ / $targetWidthZctrlDirec) : 1;										
								scale -r ($scaleFactorctrlDirecX ) (($scaleFactorctrlDirecY / 2)+ 0.15) 1 $autoWheelDirectionCtrl;
								makeIdentity -apply 1 -s 1 $autoWheelDirectionCtrl;
					// add circle symetry
						duplicate $cirBeforeLoff;
							$cirBeforeLoffSym = `rename ($cirBeforeLoff + "1") ($cirBeforeLoff + "Sym")`;
							setAttr ($cirBeforeLoffSym + ".tx") $sourceBBox[0];
						loft  -ch 1 -u 1 -c 0 -ar 1 -d 3 -ss 1 -rn 0 -po 0 -rsn true $cirBeforeLoffSym $cirBeforeLoff;
							rename "loftedSurface1" $loftedAutoWheel;
							duplicate $cirBeforeLoff;
							delete $cirBeforeLoffSym $cirBeforeLoff;
							xform -cpc $loftedAutoWheel;
						// ctrl dyn
							rename ($cirBeforeLoff + "1") $ctrlDynWheelAffter;
							setAttr ($ctrlDynWheelAffter + "Shape" + ".overrideEnabled")	1;
							setAttr ($ctrlDynWheelAffter + "Shape" + ".overrideColor")	$ranColor;
								float $targetBBoxDynCtrl[] = `xform -q -ws -boundingBox $ctrlDynWheelAffter`;
									float $targetWidthXDynCtrl = $targetBBoxDynCtrl[3] - $targetBBoxDynCtrl[0];
									float $targetWidthYDynCtrl = $targetBBoxDynCtrl[4] - $targetBBoxDynCtrl[1];
									float $targetWidthZDynCtrl = $targetBBoxDynCtrl[5] - $targetBBoxDynCtrl[2];
										float $scaleFactorCtrlDynX = ($targetWidthXDynCtrl != 0) ? ($sourceWidthX / $targetWidthXDynCtrl) : 1;
										float $scaleFactorCtrlDynY = ($targetWidthYDynCtrl != 0) ? ($sourceWidthY / $targetWidthYDynCtrl) : 1;
										float $scaleFactorCtrlDynZ = ($targetWidthZDynCtrl != 0) ? ($sourceWidthZ / $targetWidthZDynCtrl) : 1;								
								scale -r 1 ($scaleFactorCtrlDynY+0.2) ($scaleFactorCtrlDynZ+0.2) $ctrlDynWheelAffter;								

					// matchTransform ctrl and jnt main to loft center
							matchTransform -pos $jntMainWHeelAuto $loftedAutoWheel;
							matchTransform -pos $autoWheelMainCtrl $jntMainWHeelAuto;		
					// nHair sym
						select -r $loftedAutoWheel;
						createHair 16 2 10 0 0 1 0 5 0 1 1 1 ;
							delete "hairSystem1" "pfxHair1" "nucleus1";
							rename "hairSystem1Follicles" $grpNhairSym;
						select -hi $grpNhairSym;
							string $selectGrpHairSym[] = `ls -sl`;
							$n = 1;
							// create nhair and jnt
								for($curveHair in $selectGrpHairSym){
									if(`gmatch $curveHair "*curve*"`){
										$newPrefixName = `substitute "curve" $curveHair ""`;
										$curveInFollicle = `rename $curveHair ("sh" + $newPrefixName + $wheel)`;
										$jntSymnHair = `createNode joint -n ("jsh" + $wheel + $n)`;
											matchTransform -pos -rot $jntSymnHair $curveInFollicle;
											parent $jntSymnHair $curveInFollicle;
											$n = $n + 1;
									}								
								}
							// create curve sym distance land sym jnt
								string $slJntnHairSym[] = `listRelatives -ad -type "joint" $grpNhairSym`;
									select $slJntnHairSym;
										// for($jntSymnHair in $slJntnHairSym){
										// 	print ($jntSymnHair + "\n");
										// }
									$nj = 2;
									$n = 1;
									for($i = 0; $i<size($slJntnHairSym); $i += $nj){
										if($i + 1< size($slJntnHairSym)){
											$firstJnt = $slJntnHairSym[$i];
											$secondJnt = $slJntnHairSym[$i + 1];
												float $pos1[] = `xform -q -ws -t ($firstJnt)`;
												float $pos2[] = `xform -q -ws -t ($secondJnt)`;
											$curSymnHairDisLand = `curve -n ("cnh" + $firstJnt) -d 1 -p $pos1[0] $pos1[1] $pos1[2] 
																				-p $pos2[0] $pos2[1] $pos2[2]`;
													$shapeCurDisLand=`rename "curveShape1" ("Shape" + $curSymnHairDisLand)`;
													setAttr ($shapeCurDisLand + ".dispGeometry") 0;
													// setAttr ($shapeCurDisLand + ".v") 0;													
												select -r $firstJnt $secondJnt $curSymnHairDisLand;
												SmoothBindSkin;
												xform -cpc $curSymnHairDisLand;
												parent $curSymnHairDisLand $grpSymnHairCurve;
												$infoCurveSymLand = `createNode curveInfo -n ("i_" + $n + $wheel)`;
												$floatMCurveSymLand = `createNode floatMath -n ("f_" + $n + $wheel)`;
												connectAttr -f ($shapeCurDisLand + ".worldSpace[0]") ($infoCurveSymLand + ".inputCurve");
												connectAttr -f ($infoCurveSymLand + ".arcLength") ($floatMCurveSymLand + ".floatA");
													float $valueArc = `getAttr ($infoCurveSymLand + ".arcLength")`;
													setAttr ($floatMCurveSymLand + ".floatB") $valueArc;
													setAttr ($floatMCurveSymLand + ".operation") 3;
												if($i >= 29){
													break;
												}
											$n = $n + 1;
										}
									}
									//delete jnt and curve 
										if(`objExists ("nh_"+ $wheel+"16")`){
											delete ("nh_"+ $wheel+"16") ;
										}
										if(`objExists ("sh31" + $wheel)`){
											string $prsh1[] = `listRelatives -parent ("sh31" + $wheel)`;
											string $prsh2[] = `listRelatives -parent ("sh32" + $wheel)`;
											delete ("sh31" + $wheel) ("sh32" + $wheel) $prsh1[0] $prsh2[0];
										}

					// nHair Main jnt
						select -cl ;
						select -r $loftedAutoWheel;
						createHair 16 1 10 0 0 1 0 5 0 1 1 1 ;
							delete "hairSystem1" "pfxHair1" "nucleus1";
							rename "hairSystem1Follicles" $grpNhairMain;
						select -hi $grpNhairMain;
							string $selectGrpHairMain[] = `ls -sl`;
							$n = 1;
							// create nhair and jnt
								for($curveHairMain in $selectGrpHairMain){
									if(`gmatch $curveHairMain "*curve*"`){
										$newPrefixName = `substitute "curve" $curveHairMain ""`;
										$curveInFollicle = `rename $curveHairMain ("nh_" + $wheel + $newPrefixName)`;
										$jntMainnHair = `createNode joint -n ("Jnt_" + $wheel + $n)`;refresh;
											if(`gmatch $wheel "*geo*"`){
												$newChar = `substitute "geo" $wheel ""`;
												$jntMainnHair = `rename $jntMainnHair ($newChar + "_jnt_" + $n)`;
											}
											matchTransform -pos -rot $jntMainnHair $curveInFollicle;refresh;
											parent $jntMainnHair $jntMainWHeelAuto;
											parentConstraint -n ("prmh_" + $wheel + $n) -mo $curveInFollicle $jntMainnHair;
											$n = $n + 1;
									}								
								}
								if(`objExists ("Jnt_"+ $wheel+"16")`){
									string $prnh[] = `listRelatives -parent ("nh_"+ $wheel+"16")`;
									delete ("Jnt_"+ $wheel+"16") ("nh_"+ $wheel+"16") $prnh[0];
								}
								if(`gmatch $wheel "*geo*"`){
									$newChar = `substitute "geo" $wheel ""`;
									if(`objExists ($newChar + "_jnt_" + "16")`){
										// string $prnh[] = `listRelatives -parent ("nh_"+ $wheel+"16")`;("nh_"+ $wheel+"16") $prnh[0]
										delete ($newChar + "_jnt_" + "16");
									}
								}


							// connect to joint
								$n = 1;
								string $sjs[] = `listRelatives -ad -type "joint" $grpNhairSym`;
									for($js in $sjs){
											if(`gmatch $wheel "*geo*"`){
												$nf = $wheel;
												$newChar = `substitute "geo" $wheel ""`;
												$jntMainnHair = $newChar + "_jnt_" + $n;
												connectAttr -f ("f_" + $n + $nf + ".outFloat") ($jntMainnHair + ".sy");
													
											}
										$n = $n +1;	
										if($n >= 16){
											break;
										}									
									}
					// loft latice
						lattice -dv 2 15 2 -oc true -n $lattice $loftedAutoWheel;
							setAttr ($lattice + ".outsideLattice") 2;
							setAttr ($lattice+".local") 1;
							setAttr ($lattice+".outsideLattice") 1;						
						select -r ($lattice + "Lattice" + ".pt[0:1][0:1][0:14]") ;
						cluster -rel -n $cluster;
						matchTransform -pos $systemClus ($cluster + "Handle");					
						// count >> value move lattice
								$targetMoveClus = $targetWidthY / 15;
								$wrp = `getAttr ($systemClus + ".ty")`;
								$wmlattice = ($wrp - $sourceBBox[1]);
								$vlLaticeCur = `getAttr ($lattice + "Lattice" + ".ty")`;
								setAttr ($cluster + "Handle" + ".sy") 0;
								print $wmlattice;
									if($vlLaticeCur > 0){
										setAttr ($lattice + "Lattice" + ".ty") ($vlLaticeCur - $wmlattice);
										setAttr ($lattice + "Base" + ".ty") ($vlLaticeCur - $wmlattice);
									}
									if($vlLaticeCur < 0){
										setAttr ($lattice + "Lattice" + ".ty") ($vlLaticeCur + $targetMoveClus);
										setAttr ($lattice + "Base" + ".ty") ($vlLaticeCur + $targetMoveClus);
									}
						// cin >> lattice parent
							parent ($lattice + "Lattice") ($lattice + "Base") $systemClus;
							connectAttr -f ($nodeFlFlatTire + ".outFloat") ($cluster + "Handle" + ".sx");
					// setup dynamics wheel
						duplicate $wheel;
						$dupWheel = `rename ($wheel + "1") ($wheel + "_wdl")`;
						matchTransform -pos $dupWheel $jntMainWHeelAuto;
						select -r $dupWheel;
						python("execfile('" + $cInstallToolsTri3D + "/Functions/Python/Tri3D_rigFunctions.py" + "')");
						// $ctrlDynWheelAffter;
							matchTransform -pos $ctrlDynWheelAffter ($wheel + "_Ctrl_Dyn");
							parent $ctrlDynWheelAffter ($wheel + "_Grp_Dyn");
							makeIdentity -apply 1 -t 1 -r 1 -s 1 $ctrlDynWheelAffter;
							parent ($wheel + "_Ctrl_Dyn") $ctrlDynWheelAffter;
						// hiden ctrl
							setAttr ($wheel + "_Ctrl_Dyn" + ".v") 0;
						// parent 
							$jntScale = `createNode joint -n ($wheel + "_js")`;
							parent $jntScale ($wheel + "_dyn_JNT");
								string $p[] = {".tx",".ty",".tz",".rx",".ry",".rz"};
									for($ppp in $p){
										setAttr ($jntScale + $ppp) 0;
									}
						// detele obj
							delete ($wheel + "_wdl");
							parent ("SystemDY_" + $wheel + "_wdl") $grpSystem;
							parent ($wheel + "_Grp_Dyn") $grpSystem;
							parentConstraint -mo -n ("prmh_Pa" + $wheel + $jntMainWHeelAuto) ($wheel + "_js") $jntMainWHeelAuto;
							scaleConstraint -mo -n ("prmh_Sca" + $wheel + $jntMainWHeelAuto) ($wheel + "_js") $jntMainWHeelAuto;
			// ctrl main settup
					setAttr ($autoWheelMainCtrl + "Shape" + ".overrideEnabled")	1;
					setAttr ($autoWheelMainCtrl + "Shape" + ".overrideColor")	$ranColor;

					setAttr ($autoWheelClusCtrl + "Shape" + ".overrideEnabled")	1;
					setAttr ($autoWheelClusCtrl + "Shape" + ".overrideColor")	$ranColor;
						parent $autoWheelClusCtrl $systemClus;


					matchTransform -pos $grpMainCtrl $wheel;
				parent $autoWheelMainCtrl $grpMainCtrl;
				makeIdentity -apply 1 -s 1 -t 1 $autoWheelMainCtrl;
			// ctrl direction
				parent $autoWheelDirectionCtrl $autoWheelDirectionCtrlGrp;
					setAttr ($autoWheelDirectionCtrl + "Shape" + ".overrideEnabled")	1;
					setAttr ($autoWheelDirectionCtrl + "Shape" + ".overrideColor")	$ranColor;	
					matchTransform -pos $autoWheelDirectionCtrlGrp $loftedAutoWheel;

			// parent 
				parent $jntBindAuto $systemgrp $grpParentConstraintNode $grpNhairSym $grpSymnHairCurve $grpNhairMain $autoWheelDirectionCtrlGrp $systemClus $grpSystem;
				parent $loftedAutoWheel $systemgrp ;
				// parentConstraint -mo $autoWheelMainCtrl ($wheel + "_Grp_Dyn");
				scaleConstraint -mo $autoWheelMainCtrl ($wheel + "_Grp_Dyn");
			// hiden
				string $hf[] = {($lattice + "Lattice"),($lattice + "Base"),$systemClus,$grpNhairMain,$loftedAutoWheel,$systemgrp,$grpParentConstraintNode,$grpNhairSym,$grpSymnHairCurve };
					for ($gh in $hf){
						setAttr ($gh + ".v") 0;
						setAttr -lock true -keyable false -channelBox false ($gh + ".v");
					}
				// direction loft system
					matchTransform -pos $autoWheelClusCtrl ($cluster + "Handle");
					matchTransform -pos $systemClusRela ($cluster + "Handle");
					makeIdentity -apply 1 -t 1 $systemClusRela;
					parent ($cluster + "Handle") $systemClusRela;
					parent $systemClusRela $autoWheelClusCtrl;
					parentConstraint -mo -skipTranslate x -skipTranslate y -skipTranslate z ($wheel + "_js")  $loftedAutoWheel;
					parentConstraint -mo -sr x -sr y -sr z $autoWheelDirectionCtrl  $loftedAutoWheel;
					scaleConstraint -mo ($wheel + "_js") $loftedAutoWheel;
					parentConstraint -mo $autoWheelDirectionCtrl ($wheel + "_Grp_Dyn");
					parentConstraint -mo -n ("prmh_Pa" + $wheel + $autoWheelMainCtrl) $autoWheelMainCtrl $autoWheelDirectionCtrlGrp;
					parentConstraint -mo -n ("prmh_PaLa" + $wheel + $autoWheelMainCtrl) $autoWheelMainCtrl $systemClus;
					scaleConstraint -mo -n ("prmh_Sca" + $wheel + $autoWheelMainCtrl) $autoWheelMainCtrl $autoWheelDirectionCtrlGrp;
					scaleConstraint -mo -n ("prmh_ScaLa" + $wheel + $autoWheelMainCtrl) $autoWheelMainCtrl $systemClus;
				// parent
					string $pcMainCtrlParentConstraint[] = `listRelatives -ad -children $jntMainWHeelAuto`;
						for($apr in $pos){
							setAttr -lock true -keyable false -channelBox false ($grpParentConstraintNode + $apr);	
						}
					for($ParentConstraintJnt in $pcMainCtrlParentConstraint){
						if(`gmatch $ParentConstraintJnt "*prmh_*"`){
							parent $ParentConstraintJnt $grpParentConstraintNode;
						}
					}
					select -cl;



			}
		}
	}
	else{
		confirmDialog -m "Please Select Wheel !!";
	}
}