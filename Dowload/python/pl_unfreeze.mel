//pl_unfreeze.mel By Paul Lemeshko
//SETS ROTATION BASED ON SELECTED FACE
//HOW TO USE:
//SELECT A FACE FOR EACH OBJECT AND RUN IN MEL pl_unfreeze


global proc pl_unfreeze(){
    string $delUv[];
    string $projection[];
    string $objs[]; 
    string $targets[] =`ls -sl`;
    string $objs2[] =`ls -sl -type "transform"`;
    $targets = stringArrayRemove($objs2, $targets); 
    
    for ($i=0; $i<size($targets); $i++) $objs[$i] = substituteAllString($targets[$i], `match ("[.].*") $targets[$i]`, "");

    constructionHistory -toggle true;

    if((`objExists zLocator`)!=1){
        spaceLocator -n zLocator -p 0 0 0;    
    }
        //do unfreeze for component selected objects
        if (size($objs)>0){
            
            for ($i=0; $i<size($objs); $i++){            
                //snap locator to selected object
                makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $objs[$i]; 
                $delUv[$i]=stringArrayToString(`polyMapDel -ch 1 $objs[$i]`, "");
                select $targets[$i];
                $projection[$i]=stringArrayToString(`polyProjection -ch 1 -type Planar -ibd on -kir  -md b`, "");
                select $targets[$i] zLocator;
                doCreatePointOnPolyConstraintArgList 2 {   "0" ,"0" ,"0" ,"1" ,"" ,"0" ,"0" ,"0" ,"0" ,"0" };
                delete `listRelatives -typ "constraint" zLocator`;
                setAttr zLocator.rotateX (`getAttr zLocator.rotateX`-90);
                
                //snap locator to selected object's pivot
                vector $p = `getAttr ($objs[$i] + ".rotatePivot")`;
                move -rpr ($p.x) ($p.y) ($p.z) zLocator;
                
                //snap object to world's origin
                vector $tran = `getAttr zLocator.translate`;
                vector $rot = `getAttr zLocator.rotate`;
                parentConstraint -mo -w 1 zLocator $objs[$i];  
                move -a 0 0 0 zLocator; rotate -a 0 0 0 zLocator;
                
                //restore object's transform
                select $objs[$i];
                delete `listRelatives -typ "constraint" $objs[$i]` ;
                makeIdentity -apply true -t 1 -r 1 -s 1 -n 0; 
                move -a ($tran.x) ($tran.y) ($tran.z); rotate -a ($rot.x) ($rot.y) ($rot.z);
            }
            delete $projection;
            delete $delUv;
            delete -ch $objs;
        }   
        //do unfreeze for selected objects  
        if (size($objs2)>0){  
            for ($ob in $objs2){                  
                makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $ob;   
                select $ob zLocator;
                delete `pointConstraint -offset 0 0 0 -weight 1`;        
                move -rpr 0 0 0 $ob;
                makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $ob;        
                select zLocator $ob;            
                delete `pointConstraint -offset 0 0 0 -weight 1`;
            }
        }    
    delete zLocator;
}