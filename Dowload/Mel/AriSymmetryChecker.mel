//--------------------------------------------------------------------------
//
// ScriptName : AriSymmetryChecker
// Contents   : オブジェクトがシンメトリーかどうかチェック、非対称頂点を対象座標に移動します。
// Author     : A-RI
// Update     : 2015/09/06 UVに対応。
//              2015/05/26 同じ名前のオブジェクトが存在するときに動作しないことがあるバグ修正。
//                         探索許容値に0.01超えの数値を入れられるように修正。
//              2015/05/24 左右同じ構造モデルに対してのトポロジー情報による対称化機能を追加。
//              2015/03/01 レイアウト改良。
//                         ピボット座標を中心軸に設定。
//                         x以外の軸にも対応。
//              2014/09/23 大きな値を入れてもX軸に飛ばないようにX値を別々に設定できるように改良
//              2014/06    公開
// Note       : 
//               
//--------------------------------------------------------------------------



global proc AriSymmetryChecker(){
global string $AriSymmetryChecker_message;
global string $ARISymmetryCheckerPC;
global string $AriSymCheckerSlider[8];
global string $AriSymCheckerText[2];
global string $AriSymCheckerRadio[5];
global string $AriSymCheckerCheckBox;
global string $AriSymCheckerGroups[4];
global string $AriSymCheckerFloat[2];
string $mage;
if((`window -ex AriSymmetryChecker`)==true)deleteUI AriSymmetryChecker;
window -title "AriSymmetryChecker"  -w 300 -h 300 -mxb 0  AriSymmetryChecker;
string $tabChild1=`columnLayout -adj 1`;
rowLayout -h 30 -nc 2 -cw2 75 130  ;
text -label "コンポーネント:";
$AriSymCheckerRadio[2] = `radioButtonGrp -l "  " -nrb 2  -labelArray2 "頂点" "UV" -select 1 -cw3 2 50 50 -cc "AriSymmetryChecker_UIChange()" `;
setParent..;
separator -h 5 -w 240 -style "in";
rowLayout -nc 2 -cw2 70 130 ;
text -label "対称軸:";
$AriSymCheckerRadio[0] = `radioButtonGrp -l "  "  -nrb 3  -labelArray3 "X" "Y" "Z" -select 1 -cw4 5 40 40 40 -cc "AriSymmetryChecker_UIChange()"`;
setParent..;
$AriSymCheckerGroups[3]=`rowLayout -nc 5 -cw5 70 90 30 20 70`;
text -label "";
$AriSymCheckerRadio[3] = `radioButtonGrp -l "  "  -nrb 2  -labelArray2 "U" "V"     -select 1 -cw3 5 40 40   -cc "AriSymmetryChecker_UIChange()"`;
text -l "中心";
$AriSymCheckerFloat[0]=`floatField -w 42 -v 0.5 -pre 3`;
button -l "Get" -c "AriSymmetryChecker_getPiv()";
setParent..;
separator -h 5 -w 240 -style "in";
text -al "left" -label "探索許容値:";
$AriSymCheckerSlider[0]=`floatSliderGrp -l "頂点" -field true -cw 1 30 -min 0.0000 -max 0.01 -fmx 10 -value 0.001 -step 0.00001`;
$AriSymCheckerSlider[6]=`floatSliderGrp -l "UV"   -field true -cw 1 30 -min 0.0000 -max 0.01 -fmx 10 -value 0.00001 -step 0.00001`;
separator -h 5 -w 240 -style "in";
rowLayout -nc 2 -cw2 70 130  ;
text -label "対称化方法:";
$AriSymCheckerRadio[1] = `radioButtonGrp -nrb 3  -labelArray3 "トポロジ" "距離" "頂点情報" -select 1 -cw3 60 60 60  -cc "AriSymmetryChecker_UIChange()"`;
setParent..;
$AriSymCheckerGroups[0]=`columnLayout`;
rowLayout -nc 2 -cw2 70 130;
text -l "反復回数:";
$AriSymCheckerSlider[3]=`intField -w 30 -v 50 -min 1 -max 100`;
setParent..;
setParent..;
$AriSymCheckerGroups[1]=`columnLayout -adj 1`;
$AriSymCheckerText[2]=`text -al "left" -label "センター吸着距離:"`;
$AriSymCheckerSlider[2]=`floatSliderGrp -field true -l "頂点" -cw 1 30 -min 0.001 -max 1 -value 0.01 -step 0.001 -fmx 1000 -ann "軸からこれ以内であれば軸に吸着"`;
$AriSymCheckerSlider[4]=`floatSliderGrp -field true -l "UV" -cw 1 30 -min 0.0001 -max 1 -value 0.001 -step 0.001 -fmx 1000 -ann "軸からこれ以内であれば軸に吸着"`;
setParent..;
$AriSymCheckerGroups[2]=`columnLayout -adj 1`;
text -al "left" -label "移動近似値:";
$AriSymCheckerSlider[1]=`floatSliderGrp -field true -l "頂点" -cw 1 30 -min 0.001 -max 1 -value 0.01 -step 0.001 -fmx 1000`;
$AriSymCheckerSlider[5]=`floatSliderGrp -field true -l "UV" -cw 1 30 -min 0.001 -max 1 -value 0.01 -step 0.001 -fmx 1000`;
setParent..;
$AriSymCheckerCheckBox =`checkBox -al "left" -label "正負反転(+固定 -移動)"-v 1`;
string $buttonL,$buttonR;
$form = `formLayout`;
$buttonL = `button  -label "探索" -h 30 -ann "選択から非対称頂点を探索" -command ("ARISearchSymmetryAdjust(0)")`;
$buttonR = `button  -label "移動" -h 30 -ann "移動近似値内にある頂点に移動" -command ("ARISearchSymmetryAdjust(1)")`;
setParent..;
formLayout -e
-af $buttonL	"left" 0
-ap $buttonL	"right" 0 50
-af $buttonL	"bottom" 0 
-ap $buttonR	"left" 0 50
-af $buttonR	"right" 0
-af $buttonR	"bottom" 0 
$form;
string $AriSymmetryChecker_message=`text -al "left" -label ""`;
$ARISymmetryCheckerPC= `progressBar -width 240`;
setParent..;
AriSymmetryChecker_UIChange();
showWindow;
}
global proc AriSymmetryChecker_UIChange(){
global string $AriSymCheckerText[2];
global string $AriSymCheckerRadio[5];
global string $AriSymCheckerGroups[4];
global string $AriSymCheckerSlider[8];
int $UVVer        = `radioButtonGrp -q -select $AriSymCheckerRadio[2]`;
int $selectValMode= `radioButtonGrp -q -select $AriSymCheckerRadio[1]`;
if($UVVer==1){
radioButtonGrp -e -en 1 $AriSymCheckerRadio[0];
radioButtonGrp -e -en 0 $AriSymCheckerRadio[3];
rowLayout -e -en 0 $AriSymCheckerGroups[3];
floatSliderGrp -e -en 1 $AriSymCheckerSlider[0];
floatSliderGrp -e -en 0 $AriSymCheckerSlider[6];
floatSliderGrp -e -vis 1 $AriSymCheckerSlider[2];
floatSliderGrp -e -vis 0 $AriSymCheckerSlider[4];
floatSliderGrp -e -vis 1 $AriSymCheckerSlider[1];
floatSliderGrp -e -vis 0 $AriSymCheckerSlider[5];
radioButtonGrp -e -en3 0 $AriSymCheckerRadio[1];
if($selectValMode==3){
radioButtonGrp -e -select 1 $AriSymCheckerRadio[1];
}
}
if($UVVer==2){
radioButtonGrp -e -en 0 $AriSymCheckerRadio[0];
radioButtonGrp -e -en 1 $AriSymCheckerRadio[3];
rowLayout -e -en 1 $AriSymCheckerGroups[3];
floatSliderGrp -e -en 0 $AriSymCheckerSlider[0];
floatSliderGrp -e -en 1 $AriSymCheckerSlider[6];
floatSliderGrp -e -vis 0 $AriSymCheckerSlider[2];
floatSliderGrp -e -vis 1 $AriSymCheckerSlider[4];
floatSliderGrp -e -vis 0 $AriSymCheckerSlider[1];
floatSliderGrp -e -vis 1 $AriSymCheckerSlider[5];
radioButtonGrp -e -en3 1 $AriSymCheckerRadio[1];
}	
int $mode[3];
if($selectValMode==1){
$mode[0]=1;
$mode[1]=1;
$mode[2]=0;
}
if($selectValMode==2){
$mode[0]=0;
$mode[1]=1;
$mode[2]=1;
}
if($selectValMode==3){
radioButtonGrp -e -en 1 $AriSymCheckerRadio[0];
floatSliderGrp -e -en 1 $AriSymCheckerSlider[0];
}
columnLayout -e -en $mode[0] $AriSymCheckerGroups[0];
columnLayout -e -en $mode[1] $AriSymCheckerGroups[1];
columnLayout -e -en $mode[2] $AriSymCheckerGroups[2];
}
global proc AriSymmetryChecker_getPiv(){
global string $AriSymCheckerRadio[5];
global string $AriSymCheckerFloat[2];
string $selectObj[]=`ls -sl`;
string $uvs[] = `polyListComponentConversion -tuv $selectObj`;
$uvs = `filterExpand -selectionMask 35 $uvs`;
if(size($uvs)==0)return;
float $valMax;
float $valMin;
int $radSel=`radioButtonGrp -q -select $AriSymCheckerRadio[3]`;
$radSel--;
print $radSel;
int $i=0;
for($uv in $uvs){
float $uvPos[2];
$uvPos = `polyEditUV -q $uv`;	
if($i==0){
$valMax=$uvPos[$radSel];
$valMin=$uvPos[$radSel];
}
if($valMax<$uvPos[$radSel])$valMax=$uvPos[$radSel];
if($valMin>$uvPos[$radSel])$valMin=$uvPos[$radSel];
$i++;
}
float $ave = ($valMax+$valMin)/2;
floatField -e -v $ave $AriSymCheckerFloat[0];
}
global proc AriSymmetryChecker_GoSymmetryUVfromVer(string $UnSymmetry_plus[],string $UnSymmetry_minus[],float $uvCenter){
global string $ARISymmetryCheckerPC;
global string $AriSymCheckerSlider[8];
global string $AriSymCheckerText[2];
global string $AriSymCheckerRadio[5];
global string $AriSymCheckerCheckBox;
global string $AriSymCheckerGroups[4];
global string $ARISymmetryCheckerPC;;
global string $AriSymmetryChecker_message;
int $objCenter=0;
float $gosa=0.001;
string $moveUVList[];
int $jikuXYZ=`radioButtonGrp -q -select $AriSymCheckerRadio[0]`;
int $jikuUV =`radioButtonGrp -q -select $AriSymCheckerRadio[3]`;
int $mirrorCheck =`checkBox -q -v $AriSymCheckerCheckBox`;	
string $work_symmetry_plus[] =$UnSymmetry_plus;
string $work_symmetry_minus[]=$UnSymmetry_minus;
if(!$mirrorCheck){
$work_symmetry_plus  = $UnSymmetry_minus;
$work_symmetry_minus = $UnSymmetry_plus;
}
string $ver_minus[];
$ver_minus = `polyListComponentConversion -tv $work_symmetry_minus`;
$ver_minus = `filterExpand -selectionMask 31 $ver_minus`;
int $plusCounter=0;
int $minusCounter=0;
int $moveCounter=0;
int $pr=0;
text -e -label ("頂点座標と比較中") $AriSymmetryChecker_message;
progressBar -e -pr $pr -maxValue (size($work_symmetry_plus)) $ARISymmetryCheckerPC ;
for($plusCounter=0; $plusCounter<size($work_symmetry_plus); $plusCounter++){
string $ver_plus[] = `polyListComponentConversion -tv $work_symmetry_plus[$plusCounter]`;
float $ver_plus_pos[]=`pointPosition -l $ver_plus[0]`;
$ver_plus_pos[$jikuXYZ-1]=$ver_plus_pos[$jikuXYZ-1];
for($ver in $ver_minus){
float $ver_minus_pos[]=`pointPosition -l $ver`;
$ver_minus_pos[$jikuXYZ-1]=($ver_minus_pos[$jikuXYZ-1] - $objCenter)*-1 + $objCenter;
if(AriSymmetryChecker_valMuch($ver_minus_pos,$ver_plus_pos,$gosa)){
string $uvs[];
clear $uvs;
$uvs = `polyListComponentConversion -tuv $ver`;
$uvs = `filterExpand -selectionMask 35 $uvs`;
if(size($uvs)==1){
vector $uvPos;
vector $uvMirrorPos;
$uvPos=`polyEditUV -q $work_symmetry_plus[$plusCounter]`;
if($jikuUV==1)$uvMirrorPos = <<(($uvPos.x-$uvCenter)*-1)+$uvCenter,$uvPos.y,$uvPos.z>>;
if($jikuUV==2)$uvMirrorPos = <<$uvPos.x,(($uvPos.y-$uvCenter)*-1)+$uvCenter,$uvPos.z>>;
polyEditUV -r false -u ($uvMirrorPos.x) -v ($uvMirrorPos.y) $uvs[0];
$moveUVList[$moveCounter]=$uvs[0];
$moveCounter++;
$moveUVList[$moveCounter]=$work_symmetry_plus[$plusCounter];
$moveCounter++;
progressBar -e -pr $pr $ARISymmetryCheckerPC ;
refresh;
$pr++;
}
break;
}
}
}
select -d $moveUVList;
radioButtonGrp -e -select 1 $AriSymCheckerRadio[1];
ARISearchSymmetryAdjust(1);
radioButtonGrp -e -select 3 $AriSymCheckerRadio[1];
text -e -label (" ") $AriSymmetryChecker_message;
progressBar -e -endProgress $ARISymmetryCheckerPC;
}
global proc ARISearchSymmetryAdjust(int $mode){
global string $AriSymmetryChecker_message;
global string $AriSymCheckerSlider[8];
global string $ARISS_texAnsym;
global string $ARISS_texTotal;
global string $ARISymmetryCheckerPC;
global string $gMainProgressBar ;
global string $AriSymCheckerRadio[5];
global string $AriSymCheckerCheckBox;
global string $AriSymCheckerFloat[2];
int $topologyMode=0;
int $selRadio=`radioButtonGrp -q -select $AriSymCheckerRadio[2]`;
int $UVMode=0;
$UVMode=$selRadio-1;
int $moveMode=`radioButtonGrp -q -select $AriSymCheckerRadio[1]`;
if($mode==0){
$moveMode=0;
}
int $jikuXYZ;
if($UVMode==0) $jikuXYZ = `radioButtonGrp -q -select $AriSymCheckerRadio[0]`;
if($UVMode==1) $jikuXYZ = `radioButtonGrp -q -select $AriSymCheckerRadio[3]`;
int $mirrorCheck =`checkBox -q -v $AriSymCheckerCheckBox`;	
float $centerGosa;
float $gosa;	
if($moveMode==2){
if($UVMode==0)	$gosa =`floatSliderGrp -q -v $AriSymCheckerSlider[1]`;
if($UVMode==1)	$gosa =`floatSliderGrp -q -v $AriSymCheckerSlider[5]`;
}
else{
if($UVMode==0)	$gosa =`floatSliderGrp -q -v $AriSymCheckerSlider[0]`;
if($UVMode==1)	$gosa =`floatSliderGrp -q -v $AriSymCheckerSlider[6]`;
}
if($moveMode==1 || $moveMode==2){
if($UVMode==0)	$centerGosa =`floatSliderGrp -q -v $AriSymCheckerSlider[2]`;
if($UVMode==1)	$centerGosa =`floatSliderGrp -q -v $AriSymCheckerSlider[4]`;
}
else{
if($UVMode==0)	$centerGosa=`floatSliderGrp -q -v  $AriSymCheckerSlider[0]`;
if($UVMode==1)	$centerGosa=`floatSliderGrp -q -v  $AriSymCheckerSlider[6]`;
}
string $poly[]=`ls -sl`;
string $pointList[];
if($UVMode==0){
$pointList = `polyListComponentConversion -tv $poly`;		
$pointList = `filterExpand -selectionMask 31 $pointList`;
}
if($UVMode==1){
$pointList = `polyListComponentConversion -tuv $poly`;		
$pointList = `filterExpand -selectionMask 35 $pointList`;
}
if(size($pointList)<=0){
text -e -label ("オブジェクトまたは頂点を選択してください") $AriSymmetryChecker_message;
return;
}
string $object[]=$poly;
if(objectType($poly[0])!="transform"){
$object = `polyListComponentConversion $poly`;		
$object = `listRelatives -p -pa -type "transform" $object[0]`;
}	
float $pivPos;
if($UVMode==0){
float $scalePiv[]=`getAttr ($object[0]+".scalePivot")`;
if($jikuXYZ==1) $pivPos=$scalePiv[0];
if($jikuXYZ==2) $pivPos=$scalePiv[1];
if($jikuXYZ==3) $pivPos=$scalePiv[2];
}
if($UVMode==1){
$pivPos = `floatField -q -v $AriSymCheckerFloat[0]`;
}
string $zeroNum[];
vector $verPlus_Pos[];
string $verPlus_Num[];
vector $verMinus_Pos[];
string $verMinus_Num[];
int $coPlus=0;
int $coMinus=0;
int $coZero=0;
for($ver in $pointList){
vector $posXYZ;
if($UVMode==0)	$posXYZ = `pointPosition -l $ver`;	
if($UVMode==1){
$posXYZ = `polyEditUV -q $ver`;	
$posXYZ=<<$posXYZ.x,$posXYZ.y,$pivPos>>;
}
float $pos;
if($jikuXYZ==1) $pos=$posXYZ.x;
if($jikuXYZ==2) $pos=$posXYZ.y;
if($jikuXYZ==3) $pos=$posXYZ.z;
$pos -= $pivPos;
if($pos<=$centerGosa && $pos>=-1*$centerGosa){
if($moveMode==1 || $moveMode==2){
if($UVMode==0){
if($jikuXYZ==1)	move -ls $pivPos ($posXYZ.y) ($posXYZ.z) $ver;
if($jikuXYZ==2)	move -ls ($posXYZ.x) $pivPos ($posXYZ.z) $ver;
if($jikuXYZ==3)	move -ls ($posXYZ.x) ($posXYZ.y) $pivPos $ver;
}
if($UVMode==1){
if($jikuXYZ==1)	polyEditUV -r false -u $pivPos     -v ($posXYZ.y) $ver;
if($jikuXYZ==2)	polyEditUV -r false -u ($posXYZ.x) -v $pivPos     $ver;
}
}
$zeroNum[$coZero]= $ver;
$coZero++;
}
if($pos > $centerGosa){
$verPlus_Pos[$coPlus]=$posXYZ;
$verPlus_Num[$coPlus]=$ver;
$coPlus++;
}
if($pos < -1*$centerGosa){
$verMinus_Pos[$coMinus]=$posXYZ;
$verMinus_Num[$coMinus]=$ver;
$coMinus++;
}
}
int $totalVer=`size $verPlus_Pos`+ `size $verMinus_Pos`;
text -e -label ( $coPlus+"/"+(size($verPlus_Pos)) ) $AriSymmetryChecker_message;
int $progressMaxVal=(size($verPlus_Pos));
if($topologyMode)$progressMaxVal=$progressMaxVal*2;
if(size($verPlus_Pos)>0)progressBar -e -maxValue $progressMaxVal $ARISymmetryCheckerPC;
progressBar -e
-beginProgress
-isInterruptable true
$gMainProgressBar ;
int $esc=1;
int $verPlus_symmeFlag[];
int $verMinus_symmeFlag[];
for($coPlus=0;$coPlus<size($verPlus_Pos);$coPlus++){		
text -e -label ( $coPlus+"/"+(size($verPlus_Pos)) ) $AriSymmetryChecker_message;
progressBar -e -step 1 $ARISymmetryCheckerPC ;
if(`progressBar -query -isCancelled $gMainProgressBar`)	break;
vector $plus=$verPlus_Pos[$coPlus];
for($coMinus=0; $coMinus<size($verMinus_Pos); $coMinus++){
vector $minus=$verMinus_Pos[$coMinus];
if($jikuXYZ==1)$minus = <<(-1*($minus.x-$pivPos))+$pivPos, $minus.y, $minus.z>>;
if($jikuXYZ==2)$minus = <<$minus.x, (-1*($minus.y-$pivPos))+$pivPos, $minus.z>>;
if($jikuXYZ==3)$minus = <<$minus.x, $minus.y, (-1*($minus.z-$pivPos))+$pivPos>>;
if( $plus.x <= $minus.x+$gosa && $plus.x >= $minus.x-$gosa){
if( $plus.y <= $minus.y+$gosa && $plus.y >= $minus.y-$gosa){
if( $plus.z <= $minus.z+$gosa && $plus.z >= $minus.z-$gosa){
$verPlus_symmeFlag[$coPlus]=1;
$verMinus_symmeFlag[$coMinus]=1;
if($moveMode==2){	
if(!$mirrorCheck){
if($UVMode==0)	move -ls ($minus.x) ($minus.y) ($minus.z) $verPlus_Num[$coPlus];
if($UVMode==1)	polyEditUV -r false -u ($minus.x) -v ($minus.y)  $verPlus_Num[$coPlus];
}
else{
if($jikuXYZ==1)$plus = <<(-1*($plus.x-$pivPos))+$pivPos, $plus.y, $plus.z>>;
if($jikuXYZ==2)$plus = <<$plus.x, (-1*($plus.y-$pivPos))+$pivPos, $plus.z>>;
if($jikuXYZ==3)$plus = <<$plus.x, $plus.y, (-1*($plus.z-$pivPos))+$pivPos>>;
if($UVMode==0)	move -ls ($plus.x) ($plus.y) ($plus.z)  $verMinus_Num[$coMinus];
if($UVMode==1)	polyEditUV -r false -u ($plus.x) -v ($plus.y)  $verMinus_Num[$coMinus];
}
}
/*
if($mode==2){
float $varAlpha[]=`polyColorPerVertex -q -a $verPlus_Num[$coPlus]`;
polyColorPerVertex -e -a $varAlpha[0] $verMinus_Num[$coMinus];
}
if($mode==3){
float $nor[]=`polyNormalPerVertex -q -xyz $verPlus_Num[$coPlus]`;
polyNormalPerVertex -e -x (-$nor[0]) -y $nor[1] -z $nor[2] $verMinus_Num[$coMinus];
}
*/
}}}
}
if($coPlus==(size($verPlus_Pos)-1))$esc=0;
}
if($mode==3){
for($zeroVer in $zeroNum){
float $nor[]=`polyNormalPerVertex -q -xyz $zeroVer`;
polyNormalPerVertex -e -x 0 -y $nor[1] -z $nor[2] $zeroVer;
}
}
string $Symmetry_plus[];	
string $Symmetry_minus[];	
string $UnSymmetry_plus[];	
string $UnSymmetry_minus[];	
int $count_sm=0;
int $count_ansm=0;
for( $coPlus=0; $coPlus<size($verPlus_Pos); $coPlus++ ){
if($verPlus_symmeFlag[$coPlus] == 1){
$Symmetry_plus[$count_sm] = $verPlus_Num[$coPlus];	
$count_sm++;
}
else{
$UnSymmetry_plus[$count_ansm] =  $verPlus_Num[$coPlus]; 
$count_ansm++;
}
}
$count_sm=0;
$count_ansm = 0;
for($coMinus=0;$coMinus<size($verMinus_Pos);$coMinus++){
if($verMinus_symmeFlag[$coMinus]==1){
$Symmetry_minus[$count_sm]=$verMinus_Num[$coMinus];	
$count_sm++;
}
else{
$UnSymmetry_minus[$count_ansm] =  $verMinus_Num[$coMinus];
$count_ansm++;
}
}
int $symkazu=`size($Symmetry_plus)`+`size($Symmetry_minus)`;
int $ansymkazu=`size($UnSymmetry_plus)`+`size($UnSymmetry_minus)`;
progressBar -e -endProgress $ARISymmetryCheckerPC;
progressBar -e -endProgress $gMainProgressBar;
select $UnSymmetry_plus;		
select -add $UnSymmetry_minus;	
if($moveMode==1){
refresh;
AriSymmetryChecker_GoSymmetryTP($UnSymmetry_plus,$UnSymmetry_minus,$pivPos);
}
if($moveMode==3){
refresh;
AriSymmetryChecker_GoSymmetryUVfromVer($UnSymmetry_plus,$UnSymmetry_minus,$pivPos);
}
if($moveMode==0 || $moveMode==2){
if($mode==0)text -e -label ($ansymkazu+" 頂点が非対称") $AriSymmetryChecker_message;
if($mode==1)text -e -label (`size($Symmetry_minus)`+" 頂点を移動") $AriSymmetryChecker_message;
}
return;
}
global proc AriSymmetryChecker_GoSymmetryTP(string $UnSymmetry_plus[],string $UnSymmetry_minus[],float $pivPos){
global string $AriSymCheckerRadio[5];
global string $AriSymCheckerSlider[8];
global string $AriSymCheckerCheckBox;
global string $AriSymmetryChecker_message;
global string $ARISymmetryCheckerPC;
global string $gMainProgressBar;
int $UnSymmeBeforeTotal=size($UnSymmetry_plus);
int $loop=`intField -q -v $AriSymCheckerSlider[3]`;
$loop=$loop*2;
int $UVMode=0;
int $selRadio=`radioButtonGrp -q -select $AriSymCheckerRadio[2]`;
$UVMode=$selRadio-1;
text -e -label ("トポロジ確認中") $AriSymmetryChecker_message;
progressBar -e -maxValue ($loop*200) $ARISymmetryCheckerPC ;
progressBar -e -pr ($loop*100) $ARISymmetryCheckerPC ;
int $jikuXYZ;
float $gosa;
if($UVMode==0){
$gosa =`floatSliderGrp -q -v  $AriSymCheckerSlider[0]`;
$jikuXYZ = `radioButtonGrp -q -select $AriSymCheckerRadio[0]`;
}
if($UVMode==1){
$gosa =`floatSliderGrp -q -v  $AriSymCheckerSlider[6]`;
$jikuXYZ = `radioButtonGrp -q -select $AriSymCheckerRadio[3]`;
}
$jikuXYZ = $jikuXYZ-1;
print("トポロジ------------------------\n");
int $loopVerTotal[2];
int $ii;
for($ii=0;$ii<$loop;$ii++){
int $circumMode=($ii)%2;
if(size($UnSymmetry_plus)==0)break;
if($loopVerTotal[0]==$loopVerTotal[1] && $loopVerTotal[0]==size($UnSymmetry_plus))break;
$loopVerTotal[$circumMode]=size($UnSymmetry_plus);
string $extendVers_plus_num[]; 
string $extendVers_minus_num[];
if($UVMode==0){
$extendVers_plus_num  = AriSymmetryChecker_CircumferenceVer($UnSymmetry_plus,$circumMode);
$extendVers_minus_num = AriSymmetryChecker_CircumferenceVer($UnSymmetry_minus,$circumMode);
}
if($UVMode==1){
$extendVers_plus_num  = AriSymmetryChecker_CircumferenceUV($UnSymmetry_plus,$circumMode);
$extendVers_minus_num = AriSymmetryChecker_CircumferenceUV($UnSymmetry_minus,$circumMode);
}
vector $extendVers_plus_pos[];
vector $extendVers_minus_pos[];
clear $extendVers_plus_pos;
clear $extendVers_minus_pos;
for($i=0; $i<size($extendVers_plus_num); $i++){
if($UVMode==0)$extendVers_plus_pos[$i]=`pointPosition -l $extendVers_plus_num[$i]`;
if($UVMode==1){
float $uvPosWork[2]=`polyEditUV    -q $extendVers_plus_num[$i]`;
$extendVers_plus_pos[$i]=<<$uvPosWork[0],$uvPosWork[1],$pivPos>>;
}
}
for($i=0; $i<size($extendVers_minus_num); $i++){
if($UVMode==0)$extendVers_minus_pos[$i]=`pointPosition -l $extendVers_minus_num[$i]`;
if($UVMode==1){
float $uvPosWork[2]=`polyEditUV    -q $extendVers_minus_num[$i]`;
$extendVers_minus_pos[$i]=<<$uvPosWork[0],$uvPosWork[1],$pivPos>>;
}
}
string $extendVers_plus_sym[];
string $extendVers_minus_sym[];
clear $extendVers_plus_sym;
clear $extendVers_minus_sym;
int $symCount=0;
for($i=0; $i<size($extendVers_plus_num); $i++){
float $plus_pos[] = $extendVers_plus_pos[$i];
$plus_pos[$jikuXYZ] = -1*($plus_pos[$jikuXYZ]-$pivPos)+$pivPos;
for($j=0; $j<size($extendVers_minus_num); $j++){
float $minus_pos[] = $extendVers_minus_pos[$j];
if(AriSymmetryChecker_valMuch($plus_pos,$minus_pos,$gosa)){
$extendVers_plus_sym[$symCount]=$extendVers_plus_num[$i];
$extendVers_minus_sym[$symCount]=$extendVers_minus_num[$j];
$symCount++;
break;
}
}
}
int $plusFix=`checkBox -q -v $AriSymCheckerCheckBox`;
string $extendVers_main_sym[];
string $extendVers_sub_sym[];
if($plusFix){
$extendVers_main_sym = $extendVers_plus_sym;
$extendVers_sub_sym  = $extendVers_minus_sym;
}
else{
$extendVers_main_sym = $extendVers_minus_sym;
$extendVers_sub_sym  = $extendVers_plus_sym;
}
string $UnSymmetry_main[];
string $UnSymmetry_sub[];
if($plusFix){
$UnSymmetry_main = $UnSymmetry_plus;
$UnSymmetry_sub  = $UnSymmetry_minus;
}
else{
$UnSymmetry_main = $UnSymmetry_minus;
$UnSymmetry_sub  = $UnSymmetry_plus;
}
string $newSym_main[];
string $newSym_sub[];
clear $newSym_main;
clear $newSym_sub;
int $k=0;
for($i=0; $i<size($extendVers_sub_sym);$i++){
int $pr=$loop*100+($ii+(($i)*1.0)/size($extendVers_sub_sym))*100;
progressBar -e -pr $pr $ARISymmetryCheckerPC ;
string $extendVers_sub_sym_Array[1]={$extendVers_sub_sym[$i]};
if($UVMode==0)$subOne_extendVers = AriSymmetryChecker_CircumferenceVer($extendVers_sub_sym_Array,$circumMode);
if($UVMode==1)$subOne_extendVers = AriSymmetryChecker_CircumferenceUV ($extendVers_sub_sym_Array,$circumMode);
string $exUnSymList[];
$exUnSymList=AriSymmetryChecker_ArrayContainsArray($subOne_extendVers,$UnSymmetry_sub);
if(size($exUnSymList)==1){
string $subVer=$exUnSymList[0];
string $extendVers_main_sym_Array[1]={$extendVers_main_sym[$i]};
string $mainOne_ExtendVers[];
if($UVMode==0)$mainOne_ExtendVers = AriSymmetryChecker_CircumferenceVer($extendVers_main_sym_Array,$circumMode);
if($UVMode==1)$mainOne_ExtendVers = AriSymmetryChecker_CircumferenceUV ($extendVers_main_sym_Array,$circumMode);
string $exUnSymList[]=AriSymmetryChecker_ArrayContainsArray($mainOne_ExtendVers,$UnSymmetry_main);
string $mainVer=$exUnSymList[0];
float $pos[];
if($UVMode==0)$pos=`pointPosition -l $mainVer`;
if($UVMode==1)$pos=`polyEditUV -q $mainVer`;
$pos[$jikuXYZ]=(-1*($pos[$jikuXYZ]-$pivPos))+$pivPos;
if($UVMode==0) move -ls $pos[0] $pos[1] $pos[2] $subVer;
if($UVMode==1) polyEditUV -r false -u $pos[0] -v $pos[1] $subVer;
$newSym_main[$k]=$mainVer;
$newSym_sub[$k]=$subVer;
$k++;
}
}
$UnSymmetry_main=stringArrayRemoveExact($newSym_main, $UnSymmetry_main);
$UnSymmetry_sub=stringArrayRemoveExact($newSym_sub, $UnSymmetry_sub);
if($plusFix){
$UnSymmetry_plus  = $UnSymmetry_main;
$UnSymmetry_minus = $UnSymmetry_sub;
}
else{
$UnSymmetry_plus  = $UnSymmetry_sub;
$UnSymmetry_minus = $UnSymmetry_main;
}
select $UnSymmetry_plus;
select -add $UnSymmetry_minus;
progressBar -e -pr ($loop*100+($ii+1)*100) $ARISymmetryCheckerPC ;
refresh;
}
int $UnSymmeTotal=$UnSymmeBeforeTotal-size($UnSymmetry_plus);
text -e -label ($UnSymmeTotal+" 頂点を移動") $AriSymmetryChecker_message;
progressBar -e -endProgress $ARISymmetryCheckerPC;
progressBar -e -endProgress $gMainProgressBar;
}
global proc int AriSymmetryChecker_valMuch(float $valA[], float $valB[],float $gosa){
int $muchTrue=0;
if(    $valA[0] <= $valB[0]+$gosa && $valA[0] >= $valB[0]-$gosa
&& $valA[1] <= $valB[1]+$gosa && $valA[1] >= $valB[1]-$gosa
&& $valA[2] <= $valB[2]+$gosa && $valA[2] >= $valB[2]-$gosa){
$muchTrue=1;
}
return $muchTrue;
}
global proc string[] AriSymmetryChecker_CircumferenceVer(string $verList[],int $mode){
string $circumferenceList[];
clear $circumferenceList;
string $extendEdges[];
if($mode==0)$extendEdges = `polyListComponentConversion -te $verList`;
if($mode==1)$extendEdges = `polyListComponentConversion -tf $verList`;	
string $extendVers[] = `polyListComponentConversion -tv $extendEdges`;
$extendVers = `filterExpand -selectionMask 31 $extendVers`;
$circumferenceList=stringArrayRemoveExact($verList, $extendVers);
return $circumferenceList;
}
global proc string[] AriSymmetryChecker_CircumferenceUV(string $verList[],int $mode){
string $circumferenceList[];
clear $circumferenceList;
string $extendEdges[];
if($mode==0){
$extendEdges = `polyListComponentConversion -te $verList`;
}
if($mode==1)$extendEdges = `polyListComponentConversion -tf $verList`;	
string $extendVers[] = `polyListComponentConversion -tuv $extendEdges`;
$extendVers = `filterExpand -selectionMask 35 $extendVers`;
$circumferenceList=stringArrayRemoveExact($verList, $extendVers);
return $circumferenceList;
}
global proc string[] AriSymmetryChecker_ArrayContainsArray(string $verListA[],string $verListB[]){
string $ContainsList[];
int $i=0;
for($ver in $verListA){
if(stringArrayContains($ver,$verListB)){
$ContainsList[$i]=$ver;
$i++;
}
}
return $ContainsList;
}
global proc AriDebugPrint_float (string $text,float $val){
print ($text+" "+$val+"\n");
}

