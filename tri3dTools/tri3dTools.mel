// ################# Tri3d Rigger tools ################## //
// ## Contact to : info.tri3d@gmail.com
// ## Rigging - Animation
// ## No copy right !!!!
// ####################################################### //
global proc tri3dPathToolsProc (){}
global proc string tri3dPathTools ()
{
    string $whatIs=`whatIs tri3dPathToolsProc`;
    string $fullPath=`substring $whatIs 25 999`;
    string $buffer[];
    string $slash="/";
    if (`gmatch $whatIs "*\\\\*"`)
        $slash="\\";
    int $numTok=`tokenize $fullPath $slash $buffer`;
    int $numLetters=size($fullPath);
    int $numLettersLastFolder=size($buffer[$numTok-1]);
    string $scriptLocation=`substring $fullPath 1 ($numLetters-$numLettersLastFolder)`;
    return $scriptLocation;
}
// ########## data global ########### ######################## #####################
// ########## data global ########### ######################## #####################
    // import source ##
        string $cInstallToolsTri3DLink = `tri3dPathTools`;
        string $curveMel = "source \"" + $cInstallToolsTri3DLink + "Source\"System\"Curve.mel;";
global int $dataJsTools[];
global proc readAllValuesFromJson()
{
    global int $dataJsTools[];
    string $cInstallToolsTri3D = `tri3dPathTools`;
    string $filePath = $cInstallToolsTri3D + "Source/Data/UI.json";
    int $fileId = `fopen $filePath "r"`;

    if ($fileId != 0) {
        string $line = "";
        string $key = "";
        string $value = "";

        while (!`feof $fileId`) {
            $line = strip(`fgetline $fileId`);

            if ($line == "{" || $line == "}") continue;

            string $tokens[];
            tokenize($line, ":", $tokens);

            if (size($tokens) == 2) {
                $key = strip(substituteAllString($tokens[0], "\"", ""));
                $key = substituteAllString($key, ",", "");
                $value = strip(substituteAllString($tokens[1], ",", ""));
                int $intVal = int($value);
                if ($key == "optCount")
                    $dataJsTools[0] = $intVal;
                else if ($key == "curtab")
                    $dataJsTools[1] = $intVal;
                else if ($key == "curV")
                    $dataJsTools[2] = $intVal;                    
            }
        }
        fclose $fileId;
    }
}readAllValuesFromJson();

global proc checkJson()
{
    global int $dataJsTools[];  
    string $cInstallToolsTri3D = `tri3dPathTools`;
    string $filePath = $cInstallToolsTri3D + "Source/Data/UI.json";
    int $fileId = `fopen $filePath "w"`;
    int $n = ($dataJsTools[0]+=1);
    if ($fileId != 0) {
        fprint $fileId "{\n";
        fprint $fileId ("\t\"optCount\": " + $n + ",\n");
        fprint $fileId "\t\"curtab\": 1,\n";
        fprint $fileId "\t\"curV\": 1\n";
        fprint $fileId "}";
        fclose $fileId;
    }
}checkJson();
global proc checkTxt()
{
    string $cInstallToolsTri3D = `tri3dPathTools`;
    string $listData[] = {($cInstallToolsTri3D + "Source/Data/History.txt")
                            ,($cInstallToolsTri3D + "Source/Data/ListData.txt")
                            ,($cInstallToolsTri3D + "Source/Data/bin.dat")};
    for($filePath in $listData)
    {
        if (`filetest -f $filePath`) {
        } else {
            int $fileId = `fopen $filePath "w"`;
            if ($fileId == 0) {
                return;
            }
            fclose $fileId;
        }        
    }
    string $listLicense[] = {($cInstallToolsTri3D + "Source/License/license.json")
                        ,($cInstallToolsTri3D + "Source/License/tri3dTools.txt")
                        ,($cInstallToolsTri3D + "Source/License/reEcn.py")};
    for($filePath in $listLicense)
    {
        if (`filetest -f $filePath`) {
        } else {
            int $fileId = `fopen $filePath "w"`;
            if ($fileId == 0) {
                return;
            }
            fprint $fileId ("################# Tri3d Rigger tools ##################\n## Contact to : info.tri3d@gmail.com\n## Rigging - Animation\n## No copy right !!!!\n#######################################################");
            fclose $fileId;
        }        
    }
    int $reEcnPy = `fopen $listLicense[2] "w"`;
    if ($reEcnPy == 0) {
        return;
    }
    fprint $reEcnPy ("import os\nimport maya.cmds as cmds\ndef read_bin_and_save():\n    key = 123\n    current_dir = os.path.dirname('"+$listLicense[2]+"')\n    filepath = os.path.join(current_dir, 'data.bin')\n    with open(filepath, 'rb') as f:\n        data = f.read()\n    decrypted = ''.join([chr(ord(c) ^ key) for c in data])\n    cmds.optionVar(sv=('decryptedMessage', decrypted))\nread_bin_and_save() ");
    fclose $reEcnPy;    
}checkTxt();

global proc string readHistoryTxt()
{
    string $cInstallToolsTri3D = `tri3dPathTools`;
    string $filePath = $cInstallToolsTri3D + "Source/Data/History.txt";
    int $fileId = `fopen $filePath "r"`;
    string $fileContent = "";
    string $line;
    while (!`feof $fileId`) {
        $line = `fgetline $fileId`;
        $fileContent += $line;
    }
    fclose $fileId;
    return $fileContent;
}
global proc historyTxt(string $his)
{
    checkTxt();
    string $cInstallToolsTri3D = `tri3dPathTools`;
    string $filePath = $cInstallToolsTri3D + "Source/Data/History.txt";    
    int $fileId = `fopen $filePath "r"`;
    string $fullText = "";
    if ($fileId != 0) {
        while (!`feof $fileId`) {
            $fullText += `fgetline $fileId`;
        }
        fclose $fileId;
    }
    string $date = `date`;
    int $fileR = `fopen $filePath "w"`;
    fprint $fileR ($fullText+$date+" - "+$his+" ."+"\n");
    fclose $fileR;
}
global string $dataLicense;
global proc license()
{
    global string $dataLicense;
    string $cInstallToolsTri3D = `tri3dPathTools`;
    string $filePath = $cInstallToolsTri3D + "Source/License/data.bin";     
    python("execfile('" + $cInstallToolsTri3D + "Source/License/reEcn.py" + "')");
    string $msg = `optionVar -q "decryptedMessage"`;
    $dataLicense = `optionVar -q "decryptedMessage"`;
    print($msg);
}license();
// #################################################################### //
// #################################################################### //

global proc functionsWindow()
{
    global string $dataLicense;
    string $historyTxtRead = readHistoryTxt();
    global int $dataJsTools[];
    string $cInstallToolsTri3D = `tri3dPathTools`;
    string $wd[] = {"aliasTri3d", "Tri3d Tools","mainLayout","Rig","Modify","About","History"};
    float $wh[] = {500,500};
    string $buttonSingleTools[] = {"","Influences","Curve AI","Curve Arc","Curve ADV6","Parent Curve","SetLoop","Pasted","Set default","Anotations","Sample","Check","DtMush"
                                    ,"Ref Geo","Rivet","CurJnt"
                                    ,"ADV 6 set","Face BS","Auto Vis","Wheel Auto","Sword Motion","His"};
    string $commandSingleTools[] = {"","AddInfluenceOptions","jointToCurvePY","CreateCurveArc","ControllerGalleryImport","combineCurve","deleteIhistory","pastedRename","CreateQuickSelectSet","CreateAnnotateNode","triFitResample","triModelCheckerUI","triHardenWeights"
                                    ,"refGeoTest","toolsRivetWindow","createCurvePjnt"
                                    ,"checkFullADV5","importFacialBlendshape","SDKVisAuto","autoRigWheel","swordMotionAuto","DeleteIhi"};
    string $creatCtrl[] = {"","cCubeCur","cCircleCur","cCicleCurHafl","cHandCur","cLegCur","cTarget","cLocator","cTargetCircle","Plus","cCirclePlus","cRotate","cArrow","cColorRange","cDirections","cBody","cLockCircle","cLockSquare","cSquare","cFaceCtrl","dizzyCtrl"};
    string $imageCtrl[] = {"","ccButton02.png","ccButton08.png","ccButton48.png","ccButton11.png","ccButton12.png","ccButton03.png","ccButton10.png","ccButton19.png","ccButton17.png","ccButton23.png","ccButton27.png","ccButton29.png","ccButton32.png","ccButton35.png","ccButton38.png","ccButton40.png","ccButton43.png","ccSquare.png","ccFace.png","ccButton36.png"};
    string $cbCtrl[] = {"","Normal","Match","Boxer","Group","Joint","Parent","Bind"};
    string $cbAliasCtrl[] = {"","ck_Normal_Ctrl","ck_Match_Ctrl","ck_Boxer_Ctrl","ck_Group_Ctrl","ck_Joint_Ctrl","ck_Parent_Ctrl","ck_Bind_Ctrl"};
    string $fCommand[] = {"","","select -hierarchy;","delete -ch;","makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1;","xform -cpc;","performResetTransformations(0);","matchTransform;","setToolTo jointContext;","SmoothBindSkin;","DetachSkin;","ParentConstraint;","OrientConstraint;","ScaleConstraint;","CopySkinWeights;"};
    string $fImage[] = {"","","menuIconSelect.png","DeleteHistory.png","FreezeTransform.png","CenterPivot.png","pivotReset.png","NEX_clickDragMoveSnap.png","kinJoint.png","smoothSkin.png","detachSkin.png","parentConstraint.png","orientConstraint.png","scaleConstraint.png","copySkinWeight.png"};
    if(`window -exists $wd[0]`)
    {
        deleteUI $wd[0];
    }window -title $wd[1] -width $wh[0] -sizeable 0 $wd[0];
    columnLayout -w $wh[0] $wd[2];
    // #### tab rig #### //---------------------------------------------------------------------------------------------
        tabLayout -p $wd[2] $wd[3];
        scrollLayout -h $wh[1] -p $wd[3] Rig;
        $fRig = `formLayout -w $wh[0] -numberOfDivisions 300 -p Rig fRig`;
            // # switch texture
                $sep1 = `separator -w 200`;
                $sep2 = `separator -w 200`;
                $sep3 = `separator -w 470`;
                $op1 = `optionMenu -w 50 optionmenuType`;
                    menuItem -l "int" -p $op1;
                    menuItem -l "float" -p $op1;
                    menuItem -l "on" -p $op1;
                $tx1 = `text -l "Min" -w 40`;
                $tf1 = `textField -tx "1" -w 36 min_value_attribute`;
                $tx2 = `text -l "Max" -w 40`;
                $tf2 = `textField -tx "20" -w 36 max_value_attribute`;
                $bt1 = `button -l "Attr" -w 50 -c "addAttrNameSDK;"`;
                $bt2 = `button -l "Set" -w 50 -c "ConnectFrameEx;"`;
                $tf3 = `textField -editable 1 -tx "Color" -pht "name_attribute" -w 147 -h 25 name_attr_set_driven_key`;
                $tf4 = `textField -editable 1 -pht "name_text" -w 147 -h 25 name_text_set_driven_key`;

                formLayout -edit 
                    // switch text //
                        -attachForm $sep1 "top" 5 -attachForm $sep1 "left" 10 
                        -attachForm $op1 "top" 10 -attachForm $op1 "left" 10 
                        -attachForm $tx1 "top" 13 -attachForm $tx1 "left" 60 
                        -attachForm $tf1 "top" 10 -attachForm $tf1 "left" 100 
                        -attachForm $tx2 "top" 13 -attachForm $tx2 "left" 135 
                        -attachForm $tf2 "top" 10 -attachForm $tf2 "left" 175
                        -attachForm $tf3 "top" 32 -attachForm $tf3 "left" 65
                        -attachForm $tf4 "top" 60 -attachForm $tf4 "left" 65
                        -attachForm $bt1 "top" 32 -attachForm $bt1 "left" 10
                        -attachForm $bt2 "top" 60 -attachForm $bt2 "left" 10
                        -attachForm $sep2 "top" 87 -attachForm $sep2 "left" 10
                        -attachForm $sep3 "top" 260 -attachForm $sep3 "left" 10
                $fRig;
            // # function symbol
                int $left3 = 210;int $top3 = 0;
                for($j=2;$j<size($fImage);$j++)
                {
                    $button = `symbolButton -w 40 -h 40 -i ($cInstallToolsTri3D + "Source/Icons/" + $fImage[$j]) -c $fCommand[$j]`;
                    formLayout -edit
                        -attachForm $button "top" (10 + $top3) -attachForm $button "left" ($left3) 
                    $fRig;$left3+=38;
                    if($j>0&&$j%7==0){$top3 += 41;$left3 = 210;}
                }                
            // # function rig
                int $hieghtCount = 100;
                int $left = 10;int $top = 0;
                for($i=1;$i<size($buttonSingleTools);$i++)
                {
                    $button = `button -w 90 -h 25 -l $buttonSingleTools[$i] -c $commandSingleTools[$i]`;
                    formLayout -edit
                        -attachForm $button "top" ($hieghtCount + $top) -attachForm $button "left" ($left) 
                    $fRig;$left+=95;
                    if($i>0&&$i%5==0){$top += 30;$left = 10;}
                }
                $hieghtCount+=168;
            // # auto node
                $sepD = `separator -w 190`;
                $opt1 = `optionMenu -enable true -l "" -w 90 mnNameNode`;
                    menuItem -l "floatMath";
                    menuItem -l "multiplyDivide";
                    menuItem -l "blendColors";
                    menuItem -l "reverse";
                    menuItem -l "condition";
                $bt = `button -l "Create Node" -w 90 -c "autoCreateNode;"` ;  
                formLayout -edit
                    -attachForm $opt1 "top" ($hieghtCount +2) -attachForm $opt1 "left" 10 
                    -attachForm $bt "top" $hieghtCount -attachForm $bt "left" 110 
                    -attachForm $sepD "top" ($hieghtCount+30) -attachForm $sepD "left" 10 
                $fRig;                         
            // # create Ctrl
                $hieghtCount+=100;
                // ## color
                    $c1=`button -l "Return" -w 50 -bgc 1 1 1 -c reFillColorCurve`;
                    $c2=`canvas -w 45 -rgb 1 0 0 -pc redColorCurve`;
                    $c3=`canvas -w 45 -rgb 1 1 0 -pc yellowColorCurve`;
                    $c4=`canvas -w 45 -rgb 1 0.250 0.078 -pc orangeColorCurve`;
                    $c5=`canvas -w 45 -rgb 1 0.506 0.766 -pc pinkColorCurve`;
                    $c6=`canvas -w 45 -rgb 0 1 0 -pc greenColorCurve`;
                    $c7=`canvas -w 45 -rgb 1 1 1 -pc whiteColorCurve`; 
                    $c8=`canvas -w 45 -rgb 1 0 1 -pc purpleColorCurve`;
                    $c9=`canvas -w 45 -rgb 0 1 1 -pc blueColorCurve`;
                    $c10=`canvas -w 45 -rgb 0 0 1-pc blueBlackColorCurve`;       
                        formLayout -edit 
                            -attachForm $c1 "top" $hieghtCount -attachForm $c1 "left" 10
                            -attachForm $c2 "top" $hieghtCount -attachForm $c2 "left" 50
                            -attachForm $c3 "top" $hieghtCount -attachForm $c3 "left" 90
                            -attachForm $c4 "top" $hieghtCount -attachForm $c4 "left" 130 
                            -attachForm $c5 "top" $hieghtCount -attachForm $c5 "left" 170 
                            -attachForm $c6 "top" $hieghtCount -attachForm $c6 "left" 210
                            -attachForm $c7 "top" $hieghtCount -attachForm $c7 "left" 250                            
                            -attachForm $c8 "top" $hieghtCount -attachForm $c8 "left" 290                            
                            -attachForm $c9 "top" $hieghtCount -attachForm $c9 "left" 330                            
                            -attachForm $c10 "top" $hieghtCount -attachForm $c10 "left" 370                        
                        $fRig;   
                // # ctrl                  
                    int $left2 = 10;int $top2 = 0;
                    $hieghtCount+=20;
                    for($j=1;$j<size($cbCtrl);$j++)
                    {
                        $checkbox = `checkBox -l $cbCtrl[$j] -v 1 -w 60 -h 40 $cbAliasCtrl[$j]`;
                        formLayout -edit
                            -attachForm $checkbox "top" ($hieghtCount + $top2) -attachForm $checkbox "left" ($left2) 
                        $fRig;$left2+=65;
                        if($j>0&&$j%11==0){$top2 += 45;$left2 = 10;}
                    }            
                    $hieghtCount+=35;
                    int $left1 = 10;int $top1 = 0;
                    for($j=1;$j<size($creatCtrl);$j++)
                    {
                        $button = `symbolButton -w 43 -h 43 -i ($cInstallToolsTri3D + "Source/Icons/" + $imageCtrl[$j]) -c $creatCtrl[$j]`;
                        formLayout -edit
                            -attachForm $button "top" ($hieghtCount + $top1) -attachForm $button "left" ($left1) 
                        $fRig;$left1+=41;
                        if($j>0&&$j%11==0){$top1 += 41;$left1 = 10;}
                    }
                 
    // ### tab modify ### //--------------------------------------------------------------------------------------------
        tabLayout -p $wd[2] $wd[4];
        $fModify = `formLayout -w $wh[0] -numberOfDivisions 100 -p $wd[3] fMopdify`;
        $b2 = `button -l "Modify" -w 50`;
        formLayout -edit
            -attachForm $b2 "top" 40 -attachForm $b2 "left" 30
        $fModify;
    // ### tab About ### //
        tabLayout -p $wd[2] $wd[5];
        $fContent = `formLayout -w $wh[0] -numberOfDivisions 100 -p $wd[3] About`;
        $tf = `scrollField -editable 0 -tx $dataLicense -h 85 -w ($wh[0]-20)`;
        formLayout -edit
            -attachForm $tf "top" 5 -attachForm $tf "left" 5
        $fContent; 
    // ### tab History ### //
        tabLayout -p $wd[2] $wd[6];
        $fHistory = `formLayout -w $wh[0] -numberOfDivisions 100 -p $wd[3] History`;
        $tf = `textField -editable 0 -tx ("Open tools "+": "+$dataJsTools[0]+ " time.") -w ($wh[0]-20)`;
        $tf1 = `scrollField -editable 0 -tx ("History tools : \n"+$historyTxtRead) -w ($wh[0]-20) -h 470 scrollHistoryTxt`;
        formLayout -edit
            -attachForm $tf "top" 5 -attachForm $tf "left" 5
            -attachForm $tf1 "top" 30 -attachForm $tf1 "left" 5
        $fHistory;         
    showWindow $wd[0];
}

//############################ ====================
//############################ ====================

// color ex ######
    global proc addAttrNameSDK (){
            string $mn = `optionMenu -q -value optionmenuType`;
            float $minV = `textField -q -tx min_value_attribute`;
            float $maxV = `textField -q -tx max_value_attribute`;

            string $nameAttr = `textField -q -tx name_attr_set_driven_key`;
			string $dtType;
				if($mn == "float")$dtType = "float";
				if($mn == "int")$dtType = "long";

            string $selected[] =`ls -sl`;
            if(size($selected)>0)
            {
                for ($obj in $selected){
                    if(!`attributeExists $nameAttr $obj`)
                    {
                        if($mn == "on")
                        {
                            addAttr -ln $nameAttr -at bool -keyable true ;
                            return;
                        }                
                        if($minV  >= 0)
                        {
                            addAttr -ln $nameAttr -at $dtType -min $minV -max $maxV -keyable true ;
                        }
                        else if($minV  < 0)
                        {
                            addAttr -ln $nameAttr -at $dtType -keyable true ;
                        }                    
                    }
                    else
                    {
                        warning "Attribute Exists !!";
                    }
                }   
                hisData("Creat Attribute "+$nameAttr);           
            }
        }
    global proc ConnectFrameEx(){

        string $fileEXname = `textField -q -tx name_text_set_driven_key`;
        string $ctrlEXname = `textField -q -tx name_attr_set_driven_key`;
            string $mn = `optionMenu -q -value optionmenuType`;
			string $dtType;
				if($mn == "float")$dtType = "float";
				if($mn == "int")$dtType = "long";

        float $nMin = `textField -q -tx min_value_attribute`;
        float $nMax = `textField -q -tx max_value_attribute`;

        string $select[] = `ls -sl`;

        if (size($select) == 1){
            if (`objExists $select[0]`){
                float $attrEX = `getAttr ($fileEXname + ".useFrameExtension")`;
                if ($attrEX != 1){
                    setAttr ($fileEXname + ".useFrameExtension") 1;
                }
                else{
                    if(`attributeQuery -node $select[0] -exists $ctrlEXname`){
                        connectAttr -f ($select[0] + "." + $ctrlEXname) ($fileEXname + ".frameExtension");
                    }
                    else
                    {
                        addAttr -ln $ctrlEXname -at $dtType -min $nMin -max $nMax -keyable true ($select[0]);
                        connectAttr -f ($select[0] + "." + $ctrlEXname) ($fileEXname + ".frameExtension");
                    }
                    hisData("Switch texture !!");         
                }
            }
        }
        else{
            warning "Please select obj !!!";
        }
    }
// ################# funtion single tools  ####################### //
global proc DeleteIhi()
{
    string $lis[] = {"posur","curveFromMesh","loft","Corrective","div_Correct"};
    string $sl[] = `ls`;
    for($o in $sl)
    {
        for($l in $lis)
        {
            if(`gmatch $o ("*" + $l + "*")`)
            {
                setAttr ($l + ".ihi") 0;
            }
        }
    }hisData("Delete Output !!");
}
// ################## check advanced skeleton ###################### //

// ################# Curve ################# //

    global proc int[] checkBoxCtrl()
    {
        int $on[];
        $on[0] = `checkBox -q -value ck_Normal_Ctrl`;
        $on[1] = `checkBox -q -value ck_Match_Ctrl`;
        $on[2] = `checkBox -q -value ck_Boxer_Ctrl`;
        $on[3] = `checkBox -q -value ck_Group_Ctrl`;
        $on[4] = `checkBox -q -value ck_Joint_Ctrl`;
        return $on;
    }
    global proc matchTrans(string $tar,string $obj,int $m)
    {
        matchTransform -pos $obj $tar;
        if($m == 1)
        {
            makeIdentity -apply 1 -t 1 -r 1 -s 1 -n 9 -pn 1 $obj;
        }
    }
    global proc string renameCur(string $obj,string $sel)
    {
        $curN = `rename $obj ($sel + "_ctrl")`;
        string $lc[] = `listRelatives -shapes $curN`;
        for($o in $lc)
        {
            $newS = `rename $o ($sel + "CurShape")`;
        }
        return $curN;
    }
    // ctrl
    global proc cCubeCur()
    {
        string $sl[]=`ls -sl`;
        select -cl;
        int $check[]=checkBoxCtrl();
        if(size($sl)>0){
            for($o in $sl)
            {
                $newName="";$grp="";
                $cur=`curve -n "Cube" -d 1 -p 1 1 1 -p 1 1 -1 -p 1 -1 -1 -p 1 -1 1 -p -1 -1 1 -p -1 1 1 -p 1 1 1 -p 1 -1 1 -p -1 -1 1 -p -1 -1 -1 -p -1 1 -1 -p 1 1 -1 -p 1 -1 -1 -p -1 -1 -1 -p -1 1 -1 -p -1 1 1`;
                if(size($sl)>0){
                    $newName=renameCur($cur,$o);
                }
                if($check[4]==1&&size($sl)>0)
                {
                    $jnt=`createNode -n ($o+"_J") joint`;
                    parent $jnt $newName;
                    if($check[6]==1)
                    {
                        select -add $o $jnt;SmoothBindSkin;
                    }
                }
                if($check[3]==1&&size($sl)>0)
                {
                    $grp=`group -empty -n ($o+"_gr")`;
                    parent $newName $grp;
                }
                if($check[1]==1&&size($sl)>0)
                {
                    if($check[3]==1)
                    {
                        matchTrans($o,$grp,0);
                    }
                    else
                    {
                        matchTrans($o,$newName,1);
                    }
                }
                if($check[5]==1&&$check[6]==0)
                {
                    parent $o $newName;
                }
            }
            select -cl;hisData("Create Cube Curve");
        }
    }

// ################################## history tools ################################### //
global proc hisData(string $text)
{
    historyTxt($text);
    string $cur = readHistoryTxt();
    scrollField -edit -tx ("History Tools :\n"+$cur+"\n") scrollHistoryTxt;
}




