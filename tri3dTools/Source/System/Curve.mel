global proc reFillColorCurve ()
{
    string $cSelected[] = `ls -sl`;
    string $cShapes[];
    for($obj in $cSelected)
    {
        string $cShapes[] = `listRelatives -shapes $obj`;
        for ($shape in $cShapes)
        {
            setAttr ($shape + ".overrideEnabled") 0;
        }
    }
}
global proc redColorCurve ()
{
    string $cSelected[] = `ls -sl`;
    string $cShapes[];
    for($obj in $cSelected)
    {
        string $cShapes[] = `listRelatives -shapes $obj`;
        for ($shape in $cShapes)
        {
            setAttr ($shape + ".overrideEnabled") 1;
            setAttr ($shape + ".overrideColor") 13;
        }
    }
}
global proc yellowColorCurve ()
{
    string $cSelected[] = `ls -sl`;
    string $cShapes[];
    for($obj in $cSelected)
    {
        string $cShapes[] = `listRelatives -shapes $obj`;
        for ($shape in $cShapes)
        {
            setAttr ($shape + ".overrideEnabled") 1;
            setAttr ($shape + ".overrideColor") 17;
        }
    }
}
global proc orangeColorCurve ()
{
    string $cSelected[] = `ls -sl`;
    string $cShapes[];
    for($obj in $cSelected)
    {
        string $cShapes[] = `listRelatives -shapes $obj`;
        for ($shape in $cShapes)
        {
            setAttr ($shape + ".overrideEnabled") 1;
            setAttr ($shape + ".overrideColor") 21;
        }
    }
}
global proc pinkColorCurve ()
{
    string $cSelected[] = `ls -sl`;
    string $cShapes[];
    for($obj in $cSelected)
    {
        string $cShapes[] = `listRelatives -shapes $obj`;
        for ($shape in $cShapes)
        {
            setAttr ($shape + ".overrideEnabled") 1;
            setAttr ($shape + ".overrideColor") 20;
        }
    }
}
global proc greenColorCurve ()
{
    string $cSelected[] = `ls -sl`;
    string $cShapes[];
    for($obj in $cSelected)
    {
        string $cShapes[] = `listRelatives -shapes $obj`;
        for ($shape in $cShapes)
        {
            setAttr ($shape + ".overrideEnabled") 1;
            setAttr ($shape + ".overrideColor") 14;
        }
    }
}
global proc whiteColorCurve ()
{
    string $cSelected[] = `ls -sl`;
    string $cShapes[];
    for($obj in $cSelected)
    {
        string $cShapes[] = `listRelatives -shapes $obj`;
        for ($shape in $cShapes)
        {setAttr ($shape + ".overrideEnabled") 1;
        setAttr ($shape + ".overrideColor") 16;
        }
    }
}
global proc purpleColorCurve ()
{
    string $cSelected[] = `ls -sl`;
    string $cShapes[];
    for($obj in $cSelected)
    {
        string $cShapes[] = `listRelatives -shapes $obj`;
        for ($shape in $cShapes)
        {
            setAttr ($shape + ".overrideEnabled") 1;
            setAttr ($shape + ".overrideColor") 9;
        }
    }
}
global proc blueColorCurve ()
{
    string $cSelected[] = `ls -sl`;
    string $cShapes[];
    for($obj in $cSelected)
    {
        string $cShapes[] = `listRelatives -shapes $obj`;
        for ($shape in $cShapes)
        {
            setAttr ($shape + ".overrideEnabled") 1;
            setAttr ($shape + ".overrideColor") 18;
        }
    }
}
global proc blueBlackColorCurve (){
    string $cSelected[] = `ls -sl`;
    string $cShapes[];
    for($obj in $cSelected)
    {
        string $cShapes[] = `listRelatives -shapes $obj`;
        for ($shape in $cShapes)
        {
            setAttr ($shape + ".overrideEnabled") 1;
            setAttr ($shape + ".overrideColor") 6;
        }
    }
}
// ctrl
global proc cCubeCur()
{
    string $sl[]=`ls -sl`;
    select -cl;
    int $check[]=checkBoxCtrl();
    if(size($sl)>0){
        for($o in $sl)
        {
            $newName="";$grp="";
            $cur=`curve -n "Cube" -d 1 -p 1 1 1 -p 1 1 -1 -p 1 -1 -1 -p 1 -1 1 -p -1 -1 1 -p -1 1 1 -p 1 1 1 -p 1 -1 1 -p -1 -1 1 -p -1 -1 -1 -p -1 1 -1 -p 1 1 -1 -p 1 -1 -1 -p -1 -1 -1 -p -1 1 -1 -p -1 1 1`;
            if(size($sl)>0){
                $newName=renameCur($cur,$o);
            }
            if($check[4]==1&&size($sl)>0)
            {
                $jnt=`createNode -n ($o+"_J") joint`;
                parent $jnt $newName;
                if($check[6]==1&&$check[5]==0)
                {
                    select -r $o $jnt;SmoothBindSkin;
                }
            }
            if($check[3]==1&&size($sl)>0)
            {
                $grp=`group -empty -n ($o+"_gr")`;
                parent $newName $grp;
            }
            if($check[1]==1&&size($sl)>0)
            {
                if($check[3]==1)
                {
                    matchTrans($o,$grp,0);
                }
                else
                {
                    matchTrans($o,$newName,1);
                }
            }
            if($check[5]==1&&$check[6]==0)
            {
                parent $o $newName;
            }
        }
        select -cl;hisData("Create Cube Curve");
    }
}